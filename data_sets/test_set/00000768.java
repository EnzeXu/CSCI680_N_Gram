public class LoadDB extends RunnableOnFinish { private Uri mUri; private String mPass; private Uri mKey; private Database mDb; private Context mCtx; private boolean mRememberKeyfile; public LoadDB(Database db, Context ctx, Uri uri, String pass, Uri key, OnFinish finish) { super(finish); mDb = db; mCtx = ctx; mUri = uri; mPass = pass; mKey = key; SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx); mRememberKeyfile = prefs.getBoolean(ctx.getString(R.string.keyfile_key), ctx.getResources().getBoolean(R.bool.keyfile_default)); } @Override public void run() { try { mDb.LoadData(mCtx, mUri, mPass, mKey, mStatus); saveFileData(mUri, mKey); } catch (ArcFourException e) { finish(false, mCtx.getString(R.string.error_arc4)); return; } catch (InvalidPasswordException e) { finish(false, mCtx.getString(R.string.InvalidPassword)); return; } catch (ContentFileNotFoundException e) { finish(false, mCtx.getString(R.string.file_not_found_content)); return; } catch (FileNotFoundException e) { if (mUri != null && Android11WarningFragment.showAndroid11Warning(mUri)) { finish(false, new Android11WarningFragment()); return; } finish(false, mCtx.getString(R.string.FileNotFound)); return; } catch (IOException e) { finish(false, e.getMessage()); return; } catch (KeyFileEmptyException e) { finish(false, mCtx.getString(R.string.keyfile_is_empty)); return; } catch (InvalidAlgorithmException e) { finish(false, mCtx.getString(R.string.invalid_algorithm)); return; } catch (InvalidKeyFileException e) { finish(false, mCtx.getString(R.string.keyfile_does_not_exist)); return; } catch (InvalidDBSignatureException e) { finish(false, mCtx.getString(R.string.invalid_db_sig)); return; } catch (InvalidDBVersionException e) { finish(false, mCtx.getString(R.string.unsupported_db_version)); return; } catch (InvalidDBException e) { finish(false, mCtx.getString(R.string.error_invalid_db)); return; } catch (OutOfMemoryError e) { finish(false, mCtx.getString(R.string.error_out_of_memory)); return; } finish(true); } private void saveFileData(Uri uri, Uri key) { if ( ! mRememberKeyfile ) { key = null; } App.getFileHistory().createFile(uri, key); } }