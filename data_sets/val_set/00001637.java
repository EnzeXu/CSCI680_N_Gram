public class FlowNodeGraph extends BaseProcessGraph<FlowNode> { public static final FlowNodeComparator FLOW_NODE_COMPARATOR = new FlowNodeComparator(); public static class FlowNodeComparator implements Comparator<FlowNode> { @Override public int compare( FlowNode lhs, FlowNode rhs ) { int lhsSize = lhs.getElementGraph().vertexSet().size(); int rhsSize = rhs.getElementGraph().vertexSet().size(); int result = ( lhsSize < rhsSize ) ? -1 : ( ( lhsSize == rhsSize ) ? 0 : 1 ); if( result != 0 ) return result; lhsSize = lhs.getSourceElements().size(); rhsSize = rhs.getSourceElements().size(); return ( lhsSize < rhsSize ) ? -1 : ( ( lhsSize == rhsSize ) ? 0 : 1 ); } } public FlowNodeGraph() { } public FlowNodeGraph( FlowElementGraph flowElementGraph, List<? extends ElementGraph> nodeSubGraphs ) { this( new BaseFlowNodeFactory(), flowElementGraph, nodeSubGraphs ); } public FlowNodeGraph( FlowNodeFactory flowNodeFactory, List<? extends ElementGraph> nodeSubGraphs ) { this( flowNodeFactory, null, nodeSubGraphs ); } public FlowNodeGraph( FlowNodeFactory flowNodeFactory, FlowElementGraph flowElementGraph, List<? extends ElementGraph> nodeSubGraphs ) { this( flowNodeFactory, flowElementGraph, nodeSubGraphs, Collections.<ElementGraph, List<? extends ElementGraph>>emptyMap() ); } public FlowNodeGraph( FlowNodeFactory flowNodeFactory, FlowElementGraph flowElementGraph, List<? extends ElementGraph> nodeSubGraphs, Map<ElementGraph, List<? extends ElementGraph>> pipelineSubGraphsMap ) { buildGraph( flowNodeFactory, flowElementGraph, nodeSubGraphs, pipelineSubGraphsMap ); Iterator<FlowNode> iterator = getOrderedTopologicalIterator(); int ordinal = 0; int size = vertexSet().size(); while( iterator.hasNext() ) { BaseFlowNode next = (BaseFlowNode) iterator.next(); next.setOrdinal( ordinal ); next.setName( flowNodeFactory.makeFlowNodeName( next, size, ordinal ) ); ordinal++; } } protected void buildGraph( FlowNodeFactory flowNodeFactory, FlowElementGraph flowElementGraph, List<? extends ElementGraph> nodeSubGraphs, Map<ElementGraph, List<? extends ElementGraph>> pipelineSubGraphsMap ) { if( pipelineSubGraphsMap == null ) pipelineSubGraphsMap = Collections.emptyMap(); for( ElementGraph nodeSubGraph : nodeSubGraphs ) { List<? extends ElementGraph> pipelineGraphs = pipelineSubGraphsMap.get( nodeSubGraph ); FlowNode flowNode = flowNodeFactory.createFlowNode( flowElementGraph, nodeSubGraph, pipelineGraphs ); addVertex( flowNode ); } bindEdges(); } public Set<FlowElement> getFlowElementsFor( Enum annotation ) { Set<FlowElement> results = createIdentitySet(); for( FlowNode flowNode : vertexSet() ) results.addAll( flowNode.getFlowElementsFor( annotation ) ); return results; } public Iterator<FlowNode> getOrderedTopologicalIterator() { return super.getOrderedTopologicalIterator( FLOW_NODE_COMPARATOR ); } }