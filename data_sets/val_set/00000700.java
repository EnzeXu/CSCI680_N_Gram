public class CipherTest { private Random rand = new Random(); @Test public void testCipherFactory() throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException { byte[] key = new byte[32]; byte[] iv = new byte[16]; byte[] plaintext = new byte[1024]; rand.nextBytes(key); rand.nextBytes(iv); rand.nextBytes(plaintext); CipherEngine aes = CipherFactory.getInstance(AesEngine.CIPHER_UUID); Cipher encrypt = aes.getCipher(Cipher.ENCRYPT_MODE, key, iv); Cipher decrypt = aes.getCipher(Cipher.DECRYPT_MODE, key, iv); byte[] secrettext = encrypt.doFinal(plaintext); byte[] decrypttext = decrypt.doFinal(secrettext); assertArrayEquals("Encryption and decryption failed", plaintext, decrypttext); } @Test public void testCipherStreams() throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, IOException { final int MESSAGE_LENGTH = 1024; byte[] key = new byte[32]; byte[] iv = new byte[16]; byte[] plaintext = new byte[MESSAGE_LENGTH]; rand.nextBytes(key); rand.nextBytes(iv); rand.nextBytes(plaintext); CipherEngine aes = CipherFactory.getInstance(AesEngine.CIPHER_UUID); Cipher encrypt = aes.getCipher(Cipher.ENCRYPT_MODE, key, iv); Cipher decrypt = aes.getCipher(Cipher.DECRYPT_MODE, key, iv); ByteArrayOutputStream bos = new ByteArrayOutputStream(); CipherOutputStream cos = new CipherOutputStream(bos, encrypt); cos.write(plaintext); cos.close(); byte[] secrettext = bos.toByteArray(); ByteArrayInputStream bis = new ByteArrayInputStream(secrettext); BetterCipherInputStream cis = new BetterCipherInputStream(bis, decrypt); LEDataInputStream lis = new LEDataInputStream(cis); byte[] decrypttext = lis.readBytes(MESSAGE_LENGTH); assertArrayEquals("Encryption and decryption failed", plaintext, decrypttext); } }