public class SingleValueIterator<Value> implements Iterator<Value> { public static final SingleValueIterator EMPTY = new SingleValueIterator(); private boolean hasValue = true; protected Value value; public SingleValueIterator() { this.hasValue = false; } public SingleValueIterator( Value value ) { this.hasValue = value != null; this.value = value; } @Override public boolean hasNext() { return hasValue; } @Override public Value next() { if( !hasValue ) throw new IllegalStateException( "no value available" ); try { return value; } finally { hasValue = false; } } @Override public void remove() { throw new UnsupportedOperationException( "unimplimented" ); } public void reset( Value value ) { this.hasValue = value != null; this.value = value; } }