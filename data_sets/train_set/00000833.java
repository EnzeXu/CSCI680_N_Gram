public class FileSelectActivity extends AppCompatActivity { private ListView mList; private ListAdapter mAdapter; private static final int CMENU_CLEAR = Menu.FIRST; public static final int FILE_BROWSE = 1; public static final int GET_CONTENT = 2; public static final int OPEN_DOC = 3; private static final int PERMISSION_REQUEST_ID = 4; public static final int CREATE_DOC = 5; private RecentFileHistory fileHistory; private boolean recentMode = false; private boolean supportsDirectFile = false; private void createFile(String filename) { File file = new File(filename); try { if (file.exists()) { Toast.makeText(FileSelectActivity.this, R.string.error_database_exists, Toast.LENGTH_LONG).show(); return; } File parent = file.getParentFile(); if ( parent == null || (parent.exists() && ! parent.isDirectory()) ) { Toast.makeText(FileSelectActivity.this, R.string.error_invalid_path, Toast.LENGTH_LONG).show(); return; } if ( ! parent.exists() ) { if ( ! parent.mkdirs() ) { Toast.makeText(FileSelectActivity.this, R.string.error_could_not_create_parent, Toast.LENGTH_LONG).show(); return; } } file.createNewFile(); } catch (IOException e) { Toast.makeText( FileSelectActivity.this, getText(R.string.error_file_not_create) + " " + e.getLocalizedMessage(), Toast.LENGTH_LONG).show(); return; } createDB(filename, file.getName()); } private void createFile(Uri fileURI) { String filename = fileURI.toString(); createDB(filename, UriUtil.getFileName(fileURI, this)); } private void createDB(String filename, String dbName) { CollectPassword password = new CollectPassword( new LaunchGroupActivity(filename)); CreateDB create = new CreateDB(FileSelectActivity.this, filename, dbName, password, true); ProgressTask createTask = new ProgressTask( FileSelectActivity.this, create, R.string.progress_create); createTask.run(); } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); fileHistory = App.getFileHistory(); if (fileHistory.hasRecentFiles()) { recentMode = true; setContentView(R.layout.file_selection); } else { setContentView(R.layout.file_selection_no_recent); } supportsDirectFile = findViewById(R.id.file_filename) != null; Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); mList = (ListView)findViewById(R.id.file_list); mList.setOnItemClickListener( new AdapterView.OnItemClickListener() { public void onItemClick(AdapterView<?> parent, View v, int position, long id) { onListItemClick((ListView)parent, v, position, id); } } ); Button openButton = (Button) findViewById(R.id.open); openButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { if (supportsDirectFile) { String fileName = Util.getEditText(FileSelectActivity.this, R.id.file_filename); try { PasswordActivity.Launch(FileSelectActivity.this, fileName); } catch (ContentFileNotFoundException e) { Toast.makeText(FileSelectActivity.this, R.string.file_not_found_content, Toast.LENGTH_LONG).show(); } catch (FileNotFoundException e) { Toast.makeText(FileSelectActivity.this, R.string.FileNotFound, Toast.LENGTH_LONG).show(); } } else { Intent i = new Intent(StorageAF.ACTION_OPEN_DOCUMENT); i.addCategory(Intent.CATEGORY_OPENABLE); i.setType("**"); i.putExtra(Intent.EXTRA_TITLE, "keepass.kdbx"); i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION); Uri initialUri = Uri.parse("content: i.putExtra(DocumentsContract.EXTRA_INITIAL_URI, initialUri); startActivityForResult(i, CREATE_DOC); } } }); if (supportsDirectFile) { ImageButton browseButton = (ImageButton) findViewById(R.id.browse_button); browseButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { if (StorageAF.useStorageFramework(FileSelectActivity.this)) { Intent i = new Intent(StorageAF.ACTION_OPEN_DOCUMENT); i.addCategory(Intent.CATEGORY_OPENABLE); i.setType("**"); try { startActivityForResult(i, GET_CONTENT); } catch (ActivityNotFoundException e) { lookForOpenIntentsFilePicker(); } catch (SecurityException e) { lookForOpenIntentsFilePicker(); } } } private void lookForOpenIntentsFilePicker() { if (Interaction.isIntentAvailable(FileSelectActivity.this, Intents.OPEN_INTENTS_FILE_BROWSE)) { Intent i = new Intent(Intents.OPEN_INTENTS_FILE_BROWSE); i.setData(Uri.parse("file: try { startActivityForResult(i, FILE_BROWSE); } catch (ActivityNotFoundException e) { showBrowserDialog(); } } else { showBrowserDialog(); } } private void showBrowserDialog() { BrowserDialog diag = new BrowserDialog(FileSelectActivity.this); diag.show(); } }); } fillData(); registerForContextMenu(mList); SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this); String fileName = prefs.getString(PasswordActivity.KEY_DEFAULT_FILENAME, ""); if (fileName.length() > 0) { Uri dbUri = UriUtil.parseDefaultFile(fileName); String scheme = dbUri.getScheme(); if (!EmptyUtils.isNullOrEmpty(scheme) && scheme.equalsIgnoreCase("file")) { String path = dbUri.getPath(); File db = new File(path); if (db.exists()) { try { PasswordActivity.Launch(FileSelectActivity.this, path); } catch (Exception e) { } } } else { try { PasswordActivity.Launch(FileSelectActivity.this, dbUri.toString()); } catch (Exception e) { } } } } public void onRequestPermissionsResult (int requestCode, String[] permissions, int[] grantResults) { super.onRequestPermissionsResult(requestCode, permissions, grantResults); if (requestCode == PERMISSION_REQUEST_ID && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED){ String filename = Util.getEditText(FileSelectActivity.this, R.id.file_filename); createFile(filename); } else { Toast.makeText(this, R.string.no_external_permissions, Toast.LENGTH_LONG).show(); } } private class LaunchGroupActivity extends FileOnFinish { private Uri mUri; public LaunchGroupActivity(String filename) { super(null); mUri = UriUtil.parseDefaultFile(filename); } @Override public void run() { if (mSuccess) { fileHistory.createFile(mUri, getFilename()); GroupActivity.Launch(FileSelectActivity.this); } } } private class CollectPassword extends FileOnFinish { public CollectPassword(FileOnFinish finish) { super(finish); } @Override public void run() { SetPasswordDialog password = new SetPasswordDialog(FileSelectActivity.this, mOnFinish); password.show(); } } private void fillData() { if (supportsDirectFile) { EditText filename = (EditText) findViewById(R.id.file_filename); filename.setText(Environment.getExternalStorageDirectory().getAbsolutePath() + getString(R.string.default_file_path)); } mAdapter = new ArrayAdapter<String>(this, R.layout.file_row, R.id.file_filename, fileHistory.getDbList()); mList.setAdapter(mAdapter); } protected void onListItemClick(ListView l, View v, int position, long id) { new AsyncTask<Integer, Void, Void>() { String fileName; String keyFile; protected Void doInBackground(Integer... args) { int position = args[0]; fileName = fileHistory.getDatabaseAt(position); keyFile = fileHistory.getKeyfileAt(position); return null; } protected void onPostExecute(Void v) { try { PasswordActivity.Launch(FileSelectActivity.this, fileName, keyFile); } catch (ContentFileNotFoundException e) { Toast.makeText(FileSelectActivity.this, R.string.file_not_found_content, Toast.LENGTH_LONG) .show(); } catch (FileNotFoundException e) { if (Android11WarningFragment.showAndroid11Warning(fileName)) { Android11WarningFragment dialog = new Android11WarningFragment(); dialog.show(getSupportFragmentManager(), "Android11WarningFragment"); } else { Toast.makeText(FileSelectActivity.this, R.string.FileNotFound, Toast.LENGTH_LONG) .show(); } } } }.execute(position); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fillData(); String filename = null; if (requestCode == FILE_BROWSE && resultCode == RESULT_OK) { filename = data.getDataString(); if (filename != null) { if (filename.startsWith("file: filename = filename.substring(7); } filename = URLDecoder.decode(filename); } } else if ((requestCode == GET_CONTENT || requestCode == OPEN_DOC || requestCode == CREATE_DOC) && resultCode == RESULT_OK) { if (data != null) { Uri uri = data.getData(); if (uri != null) { if (StorageAF.useStorageFramework(this)) { try { ContentResolver resolver = getContentResolver(); ContentResolverCompat.takePersistableUriPermission(resolver, uri, Intent.FLAG_GRANT_READ_URI_PERMISSION); ContentResolverCompat.takePersistableUriPermission(resolver, uri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION); } catch (Exception e) { } } if (requestCode == GET_CONTENT) { uri = UriUtil.translate(this, uri); } filename = uri.toString(); if (requestCode == CREATE_DOC) { createFile(uri); } else { try { PasswordActivity.Launch(FileSelectActivity.this, filename); } catch (ContentFileNotFoundException e) { Toast.makeText(FileSelectActivity.this, R.string.file_not_found_content, Toast.LENGTH_LONG).show(); } catch (FileNotFoundException e) { Toast.makeText(FileSelectActivity.this, R.string.FileNotFound, Toast.LENGTH_LONG).show(); } } } } } if (supportsDirectFile && filename != null) { EditText fn = (EditText) findViewById(R.id.file_filename); fn.setText(filename); } }