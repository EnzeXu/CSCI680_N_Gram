public class UniquePathRulePartitioner extends ExpressionRulePartitioner { public UniquePathRulePartitioner( PlanPhase phase, RuleExpression ruleExpression ) { super( phase, ruleExpression ); } public UniquePathRulePartitioner( PlanPhase phase, RuleExpression ruleExpression, ElementAnnotation... annotations ) { super( phase, ruleExpression, annotations ); } public UniquePathRulePartitioner( PlanPhase phase, RuleExpression ruleExpression, Enum... annotationExcludes ) { super( phase, ruleExpression, annotationExcludes ); } public UniquePathRulePartitioner( PlanPhase phase, PartitionSource partitionSource, RuleExpression ruleExpression ) { super( phase, partitionSource, ruleExpression ); } public UniquePathRulePartitioner( PlanPhase phase, PartitionSource partitionSource, RuleExpression ruleExpression, ElementAnnotation... annotations ) { super( phase, partitionSource, ruleExpression, annotations ); } public UniquePathRulePartitioner( PlanPhase phase, PartitionSource partitionSource, RuleExpression ruleExpression, Enum... annotationExcludes ) { super( phase, partitionSource, ruleExpression, annotationExcludes ); } public UniquePathRulePartitioner( LogLevel logLevel, PlanPhase phase, RuleExpression ruleExpression ) { super( logLevel, phase, ruleExpression ); } public UniquePathRulePartitioner( LogLevel logLevel, PlanPhase phase, RuleExpression ruleExpression, ElementAnnotation... annotations ) { super( logLevel, phase, ruleExpression, annotations ); } public UniquePathRulePartitioner( LogLevel logLevel, PlanPhase phase, RuleExpression ruleExpression, Enum... annotationExcludes ) { super( logLevel, phase, ruleExpression, annotationExcludes ); } public UniquePathRulePartitioner( LogLevel logLevel, PlanPhase phase, PartitionSource partitionSource, RuleExpression ruleExpression ) { super( logLevel, phase, partitionSource, ruleExpression ); } public UniquePathRulePartitioner( LogLevel logLevel, PlanPhase phase, PartitionSource partitionSource, RuleExpression ruleExpression, ElementAnnotation... annotations ) { super( logLevel, phase, partitionSource, ruleExpression, annotations ); } public UniquePathRulePartitioner( LogLevel logLevel, PlanPhase phase, PartitionSource partitionSource, RuleExpression ruleExpression, Enum... annotationExcludes ) { super( logLevel, phase, partitionSource, ruleExpression, annotationExcludes ); } protected UniquePathRulePartitioner( PlanPhase phase, GraphPartitioner graphPartitioner ) { super( phase, graphPartitioner ); } protected UniquePathRulePartitioner( LogLevel logLevel, PlanPhase phase, GraphPartitioner graphPartitioner ) { super( logLevel, phase, graphPartitioner ); } protected UniquePathRulePartitioner( PlanPhase phase ) { super( phase ); } protected UniquePathRulePartitioner() { } @Override protected ExpressionGraphPartitioner createExpressionGraphPartitioner( ExpressionGraph contractionGraph, ExpressionGraph expressionGraph, ElementAnnotation[] annotations ) { return new UniquePathGraphPartitioner( contractionGraph, expressionGraph, true, annotations ); } }