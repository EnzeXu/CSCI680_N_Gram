public class TupleViewTest extends CascadingTestCase { public TupleViewTest() { } @Test public void testArgumentSelector() { Fields declarator = new Fields( "1", "2", "3", "4" ); Tuple incoming = new Tuple( 1, 2, 3, 4 ); Fields selector = new Fields( "3", "2" ); assertTuple( incoming.get( declarator, selector ) ); int[] pos = incoming.getPos( declarator, selector ); assertTuple( incoming.get( pos ) ); assertTuple( TupleViews.createNarrow( pos, incoming ) ); } private void assertTuple( Tuple result ) { assertEquals( new Tuple( 3, 2 ), result ); assertEquals( new Tuple( 3, 2 ), new Tuple( result ) ); assertEquals( 3, result.getObject( 0 ) ); assertEquals( 2, result.getObject( 1 ) ); } @Test public void testSelectorAll() { Fields incomingFields = new Fields( "1", "2", "3", "4" ); Tuple incoming = new Tuple( 1, 2, 3, 4 ); Fields resultFields = new Fields( "5", "6", "7" ); Tuple result = new Tuple( 5, 6, 7 ); Tuple view = TupleViews.createComposite( incoming, result ); assertEquals( new Tuple( 1, 2, 3, 4, 5, 6, 7 ), view ); assertEquals( new Tuple( 1, 2, 3, 4, 5, 6, 7 ), new Tuple( view ) ); Fields allFields = Fields.join( incomingFields, resultFields ); Fields selector = new Fields( "3", "2" ); assertTuple( view.get( allFields, selector ) ); } @Test public void testSelectorReplace() { Fields incomingFields = new Fields( "1", "2", "3", "4" ); Tuple incoming = new Tuple( 1, 2, 3, 4 ); Fields resultFields = new Fields( "3", "2" ); Tuple result = new Tuple( 5, 6 ); int[] setPos = incomingFields.getPos( resultFields ); Tuple view = TupleViews.createOverride( incomingFields.getPos(), incoming, setPos, result ); assertEquals( new Tuple( 1, 6, 5, 4 ), view ); assertEquals( new Tuple( 1, 6, 5, 4 ), new Tuple( view ) ); } @Test public void testSelectorMixed() { Fields incomingFields = new Fields( "1", "2", "3", "4" ); Tuple incoming = new Tuple( 1, 2, 3, 4 ); Fields resultFields = new Fields( "5", "6", "7" ); Tuple result = new Tuple( 5, 6, 7 ); Tuple bottomView = TupleViews.createComposite( incoming, result ); assertEquals( new Tuple( 1, 2, 3, 4, 5, 6, 7 ), bottomView ); assertEquals( new Tuple( 1, 2, 3, 4, 5, 6, 7 ), new Tuple( bottomView ) ); Fields allFields = Fields.join( incomingFields, resultFields ); Fields selector = new Fields( "3", "2" ); Tuple view = TupleViews.createNarrow( allFields.getPos( selector ), bottomView ); assertTuple( view ); } @Test public void testSelectorSwap() { Fields incomingFields = new Fields( "1", "2", "3", "4" ); Tuple incoming = new Tuple( 1, 2, 3, 4 ); Fields remainderFields = new Fields( "1", "4" ); Tuple bottomView = TupleViews.createNarrow( incomingFields.getPos( remainderFields ), incoming ); assertEquals( new Tuple( 1, 4 ), bottomView ); assertEquals( new Tuple( 1, 4 ), new Tuple( bottomView ) ); Fields resultFields = new Fields( "5", "6", "7" ); Tuple result = new Tuple( 5, 6, 7 ); Tuple view = TupleViews.createComposite( bottomView, result ); assertEquals( new Tuple( 1, 4, 5, 6, 7 ), view ); assertEquals( new Tuple( 1, 4, 5, 6, 7 ), new Tuple( view ) ); Tuple fieldView = TupleViews.createComposite( remainderFields, resultFields ); TupleViews.reset( fieldView, view, result ); assertEquals( new Tuple( 1, 4, 5, 6, 7 ), fieldView ); assertEquals( new Tuple( 1, 4, 5, 6, 7 ), new Tuple( fieldView ) ); } @Test public void testSelectorSwap2() { Fields incomingFields = new Fields( "0", "1", 2, 3 ); Tuple incoming = new Tuple( 0, 1, 2, 3 ); Fields resultFields = new Fields( "0", "1" ); Tuple result = new Tuple( 0, 1 ); Fields remainderFields = incomingFields.subtract( resultFields ); Tuple remainderView = createNarrow( incomingFields.getPos( remainderFields ) ); Tuple outgoingTuple = createComposite( Fields.asDeclaration( remainderFields ), resultFields ); TupleViews.reset( remainderView, incoming ); TupleViews.reset( outgoingTuple, remainderView, result ); assertEquals( new Tuple( 2, 3, 0, 1 ), outgoingTuple ); assertEquals( new Tuple( 2, 3, 0, 1 ), new Tuple( outgoingTuple ) ); } }