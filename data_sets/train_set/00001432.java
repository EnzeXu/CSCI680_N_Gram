public class TupleChainIterator implements Iterator<Tuple>, Closeable, Resettable<Iterator<Tuple>> { Iterator<Tuple>[] iterators; int currentIterator = 0; public TupleChainIterator( Iterator<Tuple>... iterators ) { this.iterators = iterators; } public boolean hasNext() { if( iterators.length < currentIterator + 1 ) return false; if( iterators[ currentIterator ].hasNext() ) return true; closeCurrent(); currentIterator++; return iterators.length != currentIterator && hasNext(); } @Override public void reset( Iterator<Tuple>... iterators ) { this.currentIterator = 0; this.iterators = iterators; } public Tuple next() { hasNext(); return iterators[ currentIterator ].next(); } public void remove() { iterators[ currentIterator ].remove(); } @Override public void close() { if( iterators.length != currentIterator ) closeCurrent(); } protected void closeCurrent() { close( iterators[ currentIterator ] ); } private void close( Iterator iterator ) { if( iterator instanceof Closeable ) { try { ( (Closeable) iterator ).close(); } catch( IOException exception ) { } } } }