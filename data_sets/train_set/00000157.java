public class MainHelper { static final String argFilePrefix = "scala-maven-"; static final String argFileSuffix = ".args"; public static String[] findFiles(File dir, String[] includes, String[] excludes) { DirectoryScanner scanner = new DirectoryScanner(); scanner.setBasedir(dir); scanner.setIncludes(includes); scanner.setExcludes(excludes); scanner.addDefaultExcludes(); scanner.scan(); return scanner.getIncludedFiles(); } public static String toClasspathString(ClassLoader cl) { StringBuilder back = new StringBuilder(); List<String> cps = new ArrayList<>(); appendUrlToClasspathCollection(cl, cps); for (String cp : cps) { if (back.length() != 0) { back.append(File.pathSeparatorChar); } back.append(cp); } return back.toString(); } private static void appendUrlToClasspathCollection(ClassLoader cl, Collection<String> classpath) { if (cl == null) { cl = Thread.currentThread().getContextClassLoader(); } while (cl != null) { if (cl instanceof URLClassLoader) { URLClassLoader ucl = (URLClassLoader) cl; URL[] urls = ucl.getURLs(); for (URL url : urls) { classpath.add(url.getFile()); } } cl = cl.getParent(); } } private static String escapeArgumentForScalacArgumentFile(String arg) { if (arg.matches(".*\\s.*")) { return '"' + arg + '"'; } return arg; } private static String unescapeArgumentForScalacArgumentFile(String arg) { if (arg.charAt(0) == '"' && arg.charAt(arg.length() - 1) == '"') { return arg.substring(1, arg.length() - 1); } return arg; } static File createArgFile(List<String> args) throws IOException { final File argFile = File.createTempFile(argFilePrefix, argFileSuffix); try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(argFile)))) { for (String arg : args) { out.println(escapeArgumentForScalacArgumentFile(arg)); } } return argFile; } static List<String> readArgFile(File argFile) throws IOException { ArrayList<String> back = new ArrayList<>(); try (BufferedReader in = new BufferedReader(new FileReader(argFile))) { String line; while ((line = in.readLine()) != null) { back.add(unescapeArgumentForScalacArgumentFile(line)); } } return back; } static void runMain(String mainClassName, List<String> args, ClassLoader cl) throws Exception { if (cl == null) { cl = Thread.currentThread().getContextClassLoader(); } Class<?> mainClass = cl.loadClass(mainClassName); Method mainMethod = mainClass.getMethod("main", String[].class); int mods = mainMethod.getModifiers(); if (mainMethod.getReturnType() != void.class || !Modifier.isStatic(mods) || !Modifier.isPublic(mods)) { throw new NoSuchMethodException("main"); } String[] argArray = args.toArray(new String[] {}); mainMethod.invoke(null, new Object[] {argArray}); } static String locateJar(Class<?> c) throws Exception { final URL location; final String classLocation = c.getName().replace('.', '/') + ".class"; final ClassLoader loader = c.getClassLoader(); if (loader == null) { location = ClassLoader.getSystemResource(classLocation); } else { location = loader.getResource(classLocation); } if (location != null) { Pattern p = Pattern.compile("^.*file:(.*)!.*$"); Matcher m = p.matcher(location.toString()); if (m.find()) { return URLDecoder.decode(m.group(1), "UTF-8"); } throw new ClassNotFoundException( "Cannot parse location of '" + location + "'. Probably not loaded from a Jar"); } throw new ClassNotFoundException( "Cannot find class '" + c.getName() + " using the classloader"); } }