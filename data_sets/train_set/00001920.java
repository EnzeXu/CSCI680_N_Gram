public class BuildDebugPlatformTest extends PlatformTestCase { public BuildDebugPlatformTest() { } @Test public void testDebugLevels() throws Exception { Tap source = getPlatform().getTextFile( "input" ); Tap sink = getPlatform().getTextFile( "output" ); Pipe pipe = new Pipe( "test" ); String regex = TestConstants.APACHE_COMMON_REGEX; pipe = new Each( pipe, new Fields( "line" ), new RegexParser( new Fields( "ip", "time", "method", "event", "status", "size" ), regex, new int[]{ 1, 2, 3, 4, 5, 6} ) ); pipe = new Each( pipe, AssertionLevel.STRICT, new AssertNotNull() ); pipe = new Each( pipe, DebugLevel.DEFAULT, new Debug() ); pipe = new Each( pipe, DebugLevel.VERBOSE, new Debug() ); pipe = new Each( pipe, new Fields( "method" ), new RegexFilter( "^POST" ) ); pipe = new Each( pipe, new Fields( "method" ), AssertionLevel.STRICT, new AssertMatches( "^POST" ) ); pipe = new GroupBy( pipe, new Fields( "method" ) ); Map<Object, Object> properties = getProperties(); assertEquals( getDebugCount( getPlatform().getFlowConnector( properties ).connect( source, sink, pipe ) ), 1 ); FlowConnectorProps.setDebugLevel( properties, DebugLevel.DEFAULT ); assertEquals( getDebugCount( getPlatform().getFlowConnector( properties ).connect( source, sink, pipe ) ), 1 ); FlowConnectorProps.setDebugLevel( properties, DebugLevel.VERBOSE ); assertEquals( getDebugCount( getPlatform().getFlowConnector( properties ).connect( source, sink, pipe ) ), 2 ); FlowConnectorProps.setDebugLevel( properties, DebugLevel.NONE ); assertEquals( getDebugCount( getPlatform().getFlowConnector( properties ).connect( source, sink, pipe ) ), 0 ); } private int getDebugCount( Flow flow ) { BaseFlowStep step = (BaseFlowStep) flow.getFlowSteps().get( 0 ); Collection<Operation> operations = step.getAllOperations(); int count = 0; for( Operation operation : operations ) { if( operation instanceof Debug ) count++; } return count; } }