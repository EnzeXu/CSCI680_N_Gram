public class SplunkSearchTap extends SplunkTap { private String search; public SplunkSearchTap( SplunkScheme scheme, String host, int port, String search ) { super( scheme, host, port ); this.search = search; } public SplunkSearchTap( SplunkScheme scheme, ServiceArgs serviceArgs, String search ) { super( scheme, serviceArgs ); this.search = search; } public SplunkSearchTap( SplunkScheme scheme, ServiceArgs serviceArgs, JobExportArgs exportArgs, String search ) { super( scheme, serviceArgs, exportArgs ); this.search = search; } public SplunkSearchTap( SplunkScheme scheme, Service service, String search ) { super( scheme, service, null ); this.search = search; } @Override protected String getSplunkQuery() { return search; } @Override protected String getSplunkPath() { return "/"; } @Override protected String getSearch() { return String.format( "search %s", search ); } @Override public Fields getSinkFields() { throw new UnsupportedOperationException( "unable to sink tuple streams via a SourceTap instance" ); } @Override public final boolean isSink() { return false; } @Override public boolean deleteResource( Properties conf ) { throw new UnsupportedOperationException( "unable to delete files via a SourceTap instance" ); } @Override public void sinkConfInit( FlowProcess<? extends Properties> flowProcess, Properties conf ) { throw new UnsupportedOperationException( "unable to source tuple streams via a SourceTap instance" ); } @Override public boolean prepareResourceForWrite( Properties conf ) { throw new UnsupportedOperationException( "unable to prepare resource for write via a SourceTap instance" ); } @Override public boolean createResource( Properties conf ) { throw new UnsupportedOperationException( "unable to make dirs via a SourceTap instance" ); } @Override public boolean commitResource( Properties conf ) { throw new UnsupportedOperationException( "unable to commit resource via a SourceTap instance" ); } @Override public boolean rollbackResource( Properties conf ) { throw new UnsupportedOperationException( "unable to rollback resource via a SourceTap instance" ); } @Override public boolean resourceExists( Properties conf ) { return true; } @Override public long getModifiedTime( Properties conf ) { return Long.MAX_VALUE; } @Override public TupleEntryCollector openForWrite( FlowProcess<? extends Properties> flowProcess, OutputStream output ) { throw new UnsupportedOperationException( "unable to open for write via a SourceTap instance" ); } }