public class DateUtil { private static final DateTime dotNetEpoch = new DateTime(1, 1, 1, 0, 0, 0, DateTimeZone.UTC); private static final DateTime javaEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeZone.UTC); private static final long epochOffset; static { Date dotNet = dotNetEpoch.toDate(); Date java = javaEpoch.toDate(); epochOffset = (javaEpoch.getMillis() - dotNetEpoch.getMillis()) / 1000L; } public static Date convertKDBX4Time(long seconds) { DateTime dt = dotNetEpoch.plus(seconds * 1000L); if (dt.isBefore(javaEpoch)) { return javaEpoch.toDate(); } return dt.toDate(); } public static long convertDateToKDBX4Time(DateTime dt) { try { Seconds secs = Seconds.secondsBetween(javaEpoch, dt); return secs.getSeconds() + epochOffset; } catch (ArithmeticException e) { Date javaDt = dt.toDate(); long seconds = javaDt.getTime() / 1000L; return seconds + epochOffset; } } }