public class TestIdentityBuffer extends BaseOperation<Integer> implements Buffer<Integer> { private Fields groupFields; private Integer numGroups; private boolean nullsAreOK; public TestIdentityBuffer( Fields groupFields, int numGroups, boolean nullsAreOK ) { super( Fields.ARGS ); this.groupFields = groupFields; this.numGroups = numGroups; this.nullsAreOK = nullsAreOK; } @Override public void prepare( FlowProcess flowProcess, OperationCall<Integer> operationCall ) { operationCall.setContext( 0 ); } @Override public void cleanup( FlowProcess flowProcess, OperationCall<Integer> operationCall ) { if( !operationCall.getContext().equals( numGroups ) ) throw new RuntimeException( "incorrect num groups, found: " + operationCall.getContext() + " expected: " + numGroups ); } public void operate( FlowProcess flowProcess, BufferCall<Integer> bufferCall ) { bufferCall.setContext( bufferCall.getContext() + 1 ); TupleEntry group = bufferCall.getGroup(); if( group.size() != groupFields.size() ) throw new RuntimeException( "group tuple size not fields size" ); if( group.size() == 0 ) throw new RuntimeException( "group tuple size is zero" ); boolean allAreNull = true; for( Object o : group.getTuple() ) { if( o != null ) allAreNull = false; } if( !nullsAreOK && allAreNull ) throw new RuntimeException( "group tuple value is null" ); Iterator<TupleEntry> iterator = bufferCall.getArgumentsIterator(); while( iterator.hasNext() ) bufferCall.getOutputCollector().add( iterator.next() ); } }