public class FailingFlowListener extends LockingFlowListener { public static enum OnFail { STARTING, STOPPING, COMPLETED, THROWABLE } private final OnFail onFail; public FailingFlowListener( OnFail onFail ) { this.onFail = onFail; } public void onStarting( Flow flow ) { super.onStarting( flow ); if( onFail == OnFail.STARTING ) throw new RuntimeException( "intentionally failed on: " + onFail ); } public void onStopping( Flow flow ) { super.onStopping( flow ); if( onFail == OnFail.STOPPING ) throw new RuntimeException( "intentionally failed on: " + onFail ); } public void onCompleted( Flow flow ) { super.onCompleted( flow ); if( onFail == OnFail.COMPLETED ) throw new RuntimeException( "intentionally failed on: " + onFail ); } public boolean onThrowable( Flow flow, Throwable throwable ) { super.onThrowable( flow, throwable ); if( onFail == OnFail.THROWABLE ) throw new RuntimeException( "intentionally failed on: " + onFail ); return false; } }