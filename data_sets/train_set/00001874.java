public class LocalStepStats extends FlowStepStats { final Map<String, Map<String, Long>> counters = synchronizedMap( new HashMap<String, Map<String, Long>>() ); public LocalStepStats( FlowStep<Properties> flowStep, ClientState clientState ) { super( flowStep, clientState ); } @Override public void recordChildStats() { } @Override public long getLastSuccessfulCounterFetchTime() { return System.currentTimeMillis(); } @Override public Collection<String> getCounterGroups() { synchronized( counters ) { return unmodifiableCollection( new LinkedHashSet<String>( counters.keySet() ) ); } } @Override public Collection<String> getCounterGroupsMatching( String regex ) { Collection<String> counterGroups = getCounterGroups(); Set<String> results = new HashSet<String>(); synchronized( counters ) { for( String group : counterGroups ) { if( group.matches( regex ) ) results.add( group ); } } return unmodifiableCollection( results ); } @Override public Collection<String> getCountersFor( String group ) { Map<String, Long> groupCollection = counters.get( group ); if( groupCollection == null ) return Collections.emptySet(); synchronized( groupCollection ) { return unmodifiableCollection( new LinkedHashSet<String>( groupCollection.keySet() ) ); } } @Override public long getCounterValue( Enum counter ) { Map<String, Long> counterMap = counters.get( counter.getDeclaringClass().getName() ); String counterString = counter.toString(); if( counterMap == null || !counterMap.containsKey( counterString ) ) return 0; return counterMap.get( counterString ); } @Override public long getCounterValue( String group, String counter ) { Map<String, Long> counterMap = counters.get( group ); if( counterMap == null || !counterMap.containsKey( counter ) ) return 0; return counterMap.get( counter ); } public void increment( Enum counter, long amount ) { increment( counter.getDeclaringClass().getName(), counter.toString(), amount ); } public void increment( String group, String counter, long amount ) { Map<String, Long> groupMap = getCreateCounter( group ); synchronized( groupMap ) { Long value = groupMap.get( counter ); if( value == null ) value = 0L; groupMap.put( counter, value + amount ); } } private Map<String, Long> getCreateCounter( String group ) { synchronized( counters ) { Map<String, Long> counterMap = counters.get( group ); if( counterMap == null ) { counterMap = synchronizedMap( new HashMap<String, Long>() ); counters.put( group, counterMap ); } return counterMap; } } @Override public void captureDetail( Type depth ) { } @Override public String getProcessStepID() { return getID(); } @Override public Collection getChildren() { return Collections.emptyList(); } }