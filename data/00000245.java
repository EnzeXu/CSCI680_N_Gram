public class RShape extends RGeomElem { public int type = RGeomElem . SHAPE ; public RPath [ ] paths = null ; protected int currentPath = 0 ; public RShape [ ] children = null ; protected int currentChild ; public RShape ( ) { type = RGeomElem . SHAPE ; } public RShape ( RPath newpath ) { this . append ( newpath ) ; type = RGeomElem . SHAPE ; } public RShape ( RPath [ ] newpaths ) { this . paths = newpaths ; type = RGeomElem . SHAPE ; } public RShape ( RPoint [ ] [ ] points ) { if ( points == null ) return ; RPath [ ] newpaths = new RPath [ points . length ] ; for ( int i=0 ; i < points . length ; i++ ) { newpaths [ i ] = new RPath ( points [ i ] ) ; } this . paths = newpaths ; type = RGeomElem . SHAPE ; } public RShape ( RShape s ) { for ( int i=0 ; i < s . countPaths ( ) ; i++ ) { this . append ( new RPath ( s . paths [ i ] ) ) ; } for ( int i=0 ; i < s . countChildren ( ) ; i++ ) { this . appendChild ( new RShape ( s . children [ i ] ) ) ; } type = RGeomElem . SHAPE ; setStyle ( s ) ; } static public RShape createLine ( float x1 , float y1 , float x2 , float y2 ) { RShape line = new RShape ( ) ; RPath path = new RPath ( ) ; RCommand lineCommand = new RCommand ( x1 , y1 , x2 , y2 ) ; path . addCommand ( lineCommand ) ; line . addPath ( path ) ; return line ; } static public RShape createRing ( float x , float y , float widthBig , float widthSmall ) { RShape ring = new RShape ( ) ; RShape outer = RShape . createCircle ( x , y , widthBig ) ; RShape inner = RShape . createCircle ( x , y , -widthSmall ) ; ring . addPath ( outer . paths [ 0 ] ) ; ring . addPath ( inner . paths [ 0 ] ) ; return ring ; } static public RShape createStar ( float x , float y , float widthBig , float widthSmall , int spikes ) { float radiusBig = widthBig/2F ; float radiusSmall = widthSmall/2F ; RShape star = new RShape ( ) ; star . addMoveTo ( x - radiusBig , y ) ; star . addLineTo ( x - ( float ) ( radiusSmall*Math . cos ( Math . PI/spikes ) ) , y - ( float ) ( radiusSmall*Math . sin ( Math . PI/spikes ) ) ) ; for ( int i=2 ; i < 2*spikes ; i+=2 ) { star . addLineTo ( x - ( float ) ( radiusBig*Math . cos ( Math . PI*i/spikes ) ) , y - ( float ) ( radiusBig*Math . sin ( Math . PI*i/spikes ) ) ) ; star . addLineTo ( x - ( float ) ( radiusSmall*Math . cos ( Math . PI* ( i+1 ) /spikes ) ) , y - ( float ) ( radiusSmall*Math . sin ( Math . PI* ( i+1 ) /spikes ) ) ) ; } star . addClose ( ) ; return star ; } static public RShape createRectangle ( float x , float y , float w , float h ) { RShape rect = new RShape ( ) ; rect . addMoveTo ( x , y ) ; rect . addLineTo ( x+w , y ) ; rect . addLineTo ( x+w , y+h ) ; rect . addLineTo ( x , y+h ) ; rect . addLineTo ( x , y ) ; return rect ; } static public RShape createEllipse ( float x , float y , float w , float h ) { float rx = w/2F ; float ry = h/2F ; RPoint center = new RPoint ( x , y ) ; RShape circle = new RShape ( ) ; float kx = ( ( ( 8F/ ( float ) Math . sqrt ( 2F ) ) -4F ) /3F ) * rx ; float ky = ( ( ( 8F/ ( float ) Math . sqrt ( 2F ) ) -4F ) /3F ) * ry ; circle . addMoveTo ( center . x , center . y - ry ) ; circle . addBezierTo ( center . x+kx , center . y-ry , center . x+rx , center . y-ky , center . x+rx , center . y ) ; circle . addBezierTo ( center . x+rx , center . y+ky , center . x+kx , center . y+ry , center . x , center . y+ry ) ; circle . addBezierTo ( center . x-kx , center . y+ry , center . x-rx , center . y+ky , center . x-rx , center . y ) ; circle . addBezierTo ( center . x-rx , center . y-ky , center . x-kx , center . y-ry , center . x , center . y-ry ) ; circle . addClose ( ) ; return circle ; } static public RShape createCircle ( float x , float y , float d ) { return createEllipse ( x , y , d , d ) ; } public RShape getChild ( String target ) { if ( this . name . equals ( target ) ) { return this ; } for ( int i = 0 ; i < countChildren ( ) ; i++ ) { RShape shp = children [ i ] . getChild ( target ) ; if ( shp != null ) return shp ; } return null ; } public RPoint getCentroid ( ) { RPoint bestCentroid = new RPoint ( ) ; float bestArea = Float . NEGATIVE_INFINITY ; if ( paths != null ) { for ( int i=0 ; i < paths . length ; i++ ) { float area = Math . abs ( paths [ i ] . getArea ( ) ) ; if ( area > bestArea ) { bestArea = area ; bestCentroid = paths [ i ] . getCentroid ( ) ; } } return bestCentroid ; } return null ; } public int countPaths ( ) { if ( this . paths==null ) { return 0 ; } return this . paths . length ; } public int countChildren ( ) { if ( this . children==null ) { return 0 ; } return this . children . length ; } public void addShape ( RShape s ) { for ( int i=0 ; i < s . countPaths ( ) ; i++ ) { this . append ( s . paths [ i ] ) ; } } public void addPath ( RPath s ) { this . append ( s ) ; } public void addPath ( ) { this . append ( new RPath ( ) ) ; } public void addChild ( ) { this . appendChild ( new RShape ( ) ) ; } public void addChild ( RShape s ) { this . appendChild ( s ) ; } public void setPath ( int indPath ) { this . currentPath = indPath ; } public void addMoveTo ( float endx , float endy ) { if ( paths == null ) { this . append ( new RPath ( endx , endy ) ) ; } else if ( paths [ currentPath ] . countCommands ( ) == 0 ) { this . paths [ currentPath ] . lastPoint = new RPoint ( endx , endy ) ; } else { this . append ( new RPath ( endx , endy ) ) ; } } public void addMoveTo ( RPoint p ) { addMoveTo ( p . x , p . y ) ; } public void addLineTo ( float endx , float endy ) { if ( paths == null ) { this . append ( new RPath ( ) ) ; } this . paths [ currentPath ] . addLineTo ( endx , endy ) ; } public void addLineTo ( RPoint p ) { addLineTo ( p . x , p . y ) ; } public void addQuadTo ( float cp1x , float cp1y , float endx , float endy ) { if ( paths == null ) { this . append ( new RPath ( ) ) ; } this . paths [ currentPath ] . addQuadTo ( cp1x , cp1y , endx , endy ) ; } public void addQuadTo ( RPoint p1 , RPoint p2 ) { addQuadTo ( p1 . x , p1 . y , p2 . x , p2 . y ) ; } public void addBezierTo ( float cp1x , float cp1y , float cp2x , float cp2y , float endx , float endy ) { if ( paths == null ) { this . append ( new RPath ( ) ) ; } this . paths [ currentPath ] . addBezierTo ( cp1x , cp1y , cp2x , cp2y , endx , endy ) ; } public void addBezierTo ( RPoint p1 , RPoint p2 , RPoint p3 ) { addBezierTo ( p1 . x , p1 . y , p2 . x , p2 . y , p3 . x , p3 . y ) ; } public void addClose ( ) { if ( paths == null ) { this . append ( new RPath ( ) ) ; } this . paths [ currentPath ] . addClose ( ) ; } public RMesh toMesh ( ) { return toPolygon ( ) . toMesh ( ) ; } public RPolygon toPolygon ( ) { int numPnts = this . countPaths ( ) ; RPolygon poly = new RPolygon ( ) ; if ( this . children != null ) { for ( int i = 0 ; i < this . children . length ; i++ ) { RPolygon childPoly = this . children [ i ] . toPolygon ( ) ; for ( int ii = 0 ; ii < childPoly . contours . length ; ii++ ) { poly . addContour ( childPoly . contours [ ii ] ) ; } } } for ( int i = 0 ; i < numPnts ; i++ ) { RPoint [ ] pnts = this . paths [ i ] . getPoints ( ) ; RContour c = new RContour ( pnts ) ; c . closed = this . paths [ i ] . closed ; c . setStyle ( this . paths [ i ] ) ; poly . addContour ( c ) ; } return poly ; } public void polygonize ( ) { int numPaths = countPaths ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { this . paths [ i ] . polygonize ( ) ; } for ( int i=0 ; i < countChildren ( ) ; i++ ) { this . children [ i ] . polygonize ( ) ; } } public RShape toShape ( ) { return this ; } public RShape intersection ( RShape p ) { int numPaths = countPaths ( ) ; RPolygon ppoly = p . toPolygon ( ) ; RShape result = new RShape ( ) ; RShape temp = new RShape ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { temp . addPath ( this . paths [ i ] ) ; } RPolygon resPolPaths = RClip . intersection ( temp . toPolygon ( ) , ppoly ) ; if ( resPolPaths != null ) { RShape resPaths = resPolPaths . toShape ( ) ; for ( int i=0 ; i < resPaths . countPaths ( ) ; i++ ) { result . addPath ( resPaths . paths [ i ] ) ; } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RShape resChildren = this . children [ i ] . intersection ( p ) ; if ( resChildren != null ) { result . addChild ( resChildren ) ; } } if ( result != null ) { result . setStyle ( this ) ; } return result ; } public RShape union ( RShape p ) { int numPaths = countPaths ( ) ; RPolygon ppoly = p . toPolygon ( ) ; RShape result = new RShape ( ) ; RShape temp = new RShape ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { temp . addPath ( this . paths [ i ] ) ; } RPolygon resPolPaths = RClip . union ( temp . toPolygon ( ) , ppoly ) ; if ( resPolPaths != null ) { RShape resPaths = resPolPaths . toShape ( ) ; for ( int i=0 ; i < resPaths . countPaths ( ) ; i++ ) { result . addPath ( resPaths . paths [ i ] ) ; } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RShape resChildren = this . children [ i ] . union ( p ) ; if ( resChildren != null ) { result . addChild ( resChildren ) ; } } if ( result != null ) { result . setStyle ( this ) ; } return result ; } public RShape xor ( RShape p ) { int numPaths = countPaths ( ) ; RPolygon ppoly = p . toPolygon ( ) ; RShape result = new RShape ( ) ; RShape temp = new RShape ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { temp . addPath ( this . paths [ i ] ) ; } RPolygon resPolPaths = RClip . xor ( temp . toPolygon ( ) , ppoly ) ; if ( resPolPaths != null ) { RShape resPaths = resPolPaths . toShape ( ) ; for ( int i=0 ; i < resPaths . countPaths ( ) ; i++ ) { result . addPath ( resPaths . paths [ i ] ) ; } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RShape resChildren = this . children [ i ] . xor ( p ) ; if ( resChildren != null ) { result . addChild ( resChildren ) ; } } if ( result != null ) { result . setStyle ( this ) ; } return result ; } public RShape diff ( RShape p ) { int numPaths = countPaths ( ) ; RPolygon ppoly = p . toPolygon ( ) ; RShape result = new RShape ( ) ; RShape temp = new RShape ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { temp . addPath ( this . paths [ i ] ) ; } RPolygon resPolPaths = RClip . diff ( temp . toPolygon ( ) , ppoly ) ; if ( resPolPaths != null ) { RShape resPaths = resPolPaths . toShape ( ) ; for ( int i=0 ; i < resPaths . countPaths ( ) ; i++ ) { result . addPath ( resPaths . paths [ i ] ) ; } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RShape resChildren = this . children [ i ] . diff ( p ) ; if ( resChildren != null ) { result . addChild ( resChildren ) ; } } if ( result != null ) { result . setStyle ( this ) ; } return result ; } public RPoint [ ] getHandles ( ) { int numPaths = countPaths ( ) ; RPoint [ ] result=null ; RPoint [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] newPoints = paths [ i ] . getHandles ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RPoint [ ] newPoints = children [ i ] . getHandles ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } public RPoint getPoint ( float t ) { float [ ] indAndAdv = indAndAdvAt ( t ) ; int indOfElement = ( int ) ( indAndAdv [ 0 ] ) ; float advOfElement = indAndAdv [ 1 ] ; if ( indOfElement < countPaths ( ) ) { return paths [ indOfElement ] . getPoint ( advOfElement ) ; } else { return children [ indOfElement - countPaths ( ) ] . getPoint ( advOfElement ) ; } } public RPoint [ ] getPoints ( ) { int numPaths = countPaths ( ) ; RCommand . segmentAccOffset = RCommand . segmentOffset ; RPoint [ ] result=null ; RPoint [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] newPoints = paths [ i ] . getPoints ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RPoint [ ] newPoints = children [ i ] . getPoints ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } public RPoint getTangent ( float t ) { float [ ] indAndAdv = indAndAdvAt ( t ) ; int indOfElement = ( int ) ( indAndAdv [ 0 ] ) ; float advOfElement = indAndAdv [ 1 ] ; if ( indOfElement < countPaths ( ) ) { return paths [ indOfElement ] . getTangent ( advOfElement ) ; } else { return children [ indOfElement - countPaths ( ) ] . getTangent ( advOfElement ) ; } } public boolean contains ( float x , float y ) { return contains ( new RPoint ( x , y ) ) ; } public boolean contains ( RPoint p ) { float testx = p . x ; float testy = p . y ; RRectangle bbox = getBounds ( ) ; float xmin = bbox . getMinX ( ) ; float xmax = bbox . getMaxX ( ) ; float ymin = bbox . getMinY ( ) ; float ymax = bbox . getMaxY ( ) ; if ( ( testx < xmin ) || ( testx > xmax ) || ( testy < ymin ) || ( testy > ymax ) ) { return false ; } RPoint [ ] [ ] pointpaths = getPointsInPaths ( ) ; if ( pointpaths == null ) { return false ; } RPoint [ ] verts = pointpaths [ 0 ] ; for ( int k=1 ; k < pointpaths . length ; k++ ) { verts = ( RPoint [ ] ) RG . parent ( ) . append ( verts , new RPoint ( 0F , 0F ) ) ; verts = ( RPoint [ ] ) RG . parent ( ) . concat ( verts , pointpaths [ k ] ) ; } verts = ( RPoint [ ] ) RG . parent ( ) . append ( verts , new RPoint ( 0F , 0F ) ) ; if ( verts == null ) { return false ; } int nvert = verts . length ; int i , j = 0 ; boolean c = false ; for ( i = 0 , j = nvert-1 ; i < nvert ; j = i++ ) { if ( ( ( verts [ i ] . y > testy ) != ( verts [ j ] . y > testy ) ) && ( testx < ( verts [ j ] . x-verts [ i ] . x ) * ( testy-verts [ i ] . y ) / ( verts [ j ] . y-verts [ i ] . y ) + verts [ i ] . x ) ) { c = !c ; } } return c ; } public RPoint [ ] getTangents ( ) { int numPaths = countPaths ( ) ; RPoint [ ] result=null ; RPoint [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] newPoints = paths [ i ] . getTangents ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RPoint [ ] newPoints = children [ i ] . getTangents ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } public RPoint [ ] [ ] getPointsInPaths ( ) { int numPaths = countPaths ( ) ; RPoint [ ] [ ] result=null ; RPoint [ ] [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] [ ] newPointPaths = paths [ i ] . getPointsInPaths ( ) ; if ( newPointPaths != null ) { if ( result == null ) { result = new RPoint [ newPointPaths . length ] [ ] ; System . arraycopy ( newPointPaths , 0 , result , 0 , newPointPaths . length ) ; } else { newresult = new RPoint [ result . length + newPointPaths . length ] [ ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPointPaths , 0 , newresult , result . length , newPointPaths . length ) ; result = newresult ; } } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RPoint [ ] [ ] newPoints = children [ i ] . getPointsInPaths ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] [ ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] [ ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } public RPoint [ ] [ ] getHandlesInPaths ( ) { int numPaths = countPaths ( ) ; RPoint [ ] [ ] result=null ; RPoint [ ] [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] [ ] newHandlePaths = paths [ i ] . getHandlesInPaths ( ) ; if ( newHandlePaths != null ) { if ( result == null ) { result = new RPoint [ newHandlePaths . length ] [ ] ; System . arraycopy ( newHandlePaths , 0 , result , 0 , newHandlePaths . length ) ; } else { newresult = new RPoint [ result . length + newHandlePaths . length ] [ ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newHandlePaths , 0 , newresult , result . length , newHandlePaths . length ) ; result = newresult ; } } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RPoint [ ] [ ] newPoints = children [ i ] . getHandlesInPaths ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] [ ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] [ ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } public RPoint [ ] [ ] getTangentsInPaths ( ) { int numPaths = countPaths ( ) ; if ( numPaths == 0 ) { return null ; } RPoint [ ] [ ] result=null ; RPoint [ ] [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] [ ] newTangentPaths = paths [ i ] . getTangentsInPaths ( ) ; if ( newTangentPaths != null ) { if ( result == null ) { result = new RPoint [ newTangentPaths . length ] [ ] ; System . arraycopy ( newTangentPaths , 0 , result , 0 , newTangentPaths . length ) ; } else { newresult = new RPoint [ result . length + newTangentPaths . length ] [ ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newTangentPaths , 0 , newresult , result . length , newTangentPaths . length ) ; result = newresult ; } } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RPoint [ ] [ ] newPoints = children [ i ] . getTangentsInPaths ( ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] [ ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] [ ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } public RShape [ ] splitPaths ( float t ) { RShape [ ] result = new RShape [ 2 ] ; result [ 0 ] = new RShape ( ) ; result [ 1 ] = new RShape ( ) ; for ( int i=0 ; i < countPaths ( ) ; i++ ) { RPath [ ] splittedPaths = paths [ i ] . split ( t ) ; if ( splittedPaths != null ) { result [ 0 ] . addPath ( splittedPaths [ 0 ] ) ; result [ 1 ] . addPath ( splittedPaths [ 1 ] ) ; } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RShape [ ] splittedPaths = children [ i ] . splitPaths ( t ) ; if ( splittedPaths != null ) { result [ 0 ] . addChild ( splittedPaths [ 0 ] ) ; result [ 1 ] . addChild ( splittedPaths [ 1 ] ) ; } } result [ 0 ] . setStyle ( this ) ; result [ 1 ] . setStyle ( this ) ; return result ; } public void insertHandle ( float t ) { if ( ( t == 0F ) || ( t == 1F ) ) { return ; } float [ ] indAndAdv = indAndAdvAt ( t ) ; int indOfElement = ( int ) ( indAndAdv [ 0 ] ) ; float advOfElement = indAndAdv [ 1 ] ; if ( indOfElement < countPaths ( ) ) { paths [ indOfElement ] . insertHandle ( advOfElement ) ; } else { children [ indOfElement - countPaths ( ) ] . insertHandle ( advOfElement ) ; } lenCurves = null ; lenCurve = -1F ; return ; } public void insertHandleInPaths ( float t ) { if ( ( t == 0F ) || ( t == 1F ) ) { return ; } int numPaths = countPaths ( ) ; if ( numPaths == 0 ) { return ; } for ( int i = 0 ; i < numPaths ; i++ ) { paths [ i ] . insertHandleInPaths ( t ) ; } lenCurves = null ; lenCurve = -1F ; return ; } public RShape [ ] split ( float t ) { RShape [ ] result = new RShape [ 2 ] ; result [ 0 ] = new RShape ( ) ; result [ 1 ] = new RShape ( ) ; if ( t == 0 . 0F ) { result [ 0 ] = new RShape ( ) ; result [ 0 ] . setStyle ( this ) ; result [ 1 ] = new RShape ( this ) ; result [ 1 ] . setStyle ( this ) ; return result ; } if ( t == 1 . 0F ) { result [ 0 ] = new RShape ( this ) ; result [ 0 ] . setStyle ( this ) ; result [ 1 ] = new RShape ( ) ; result [ 1 ] . setStyle ( this ) ; return result ; } float [ ] indAndAdv = indAndAdvAt ( t ) ; int indOfElement = ( int ) ( indAndAdv [ 0 ] ) ; float advOfElement = indAndAdv [ 1 ] ; if ( indOfElement < countPaths ( ) ) { RPath [ ] splittedShapes = paths [ indOfElement ] . split ( advOfElement ) ; result [ 0 ] = new RShape ( ) ; for ( int i = 0 ; i < indOfElement ; i++ ) { result [ 0 ] . addPath ( new RPath ( paths [ i ] ) ) ; } result [ 0 ] . addPath ( new RPath ( splittedShapes [ 0 ] ) ) ; result [ 0 ] . setStyle ( this ) ; result [ 1 ] = new RShape ( ) ; result [ 1 ] . addPath ( new RPath ( splittedShapes [ 1 ] ) ) ; for ( int i = indOfElement + 1 ; i < countPaths ( ) ; i++ ) { result [ 1 ] . addPath ( new RPath ( paths [ i ] ) ) ; } for ( int i = 0 ; i < countChildren ( ) ; i++ ) { result [ 1 ] . appendChild ( new RShape ( this . children [ i ] ) ) ; } result [ 1 ] . setStyle ( this ) ; return result ; } else { indOfElement -= countPaths ( ) ; for ( int i=0 ; i < indOfElement ; i++ ) { result [ 0 ] . addChild ( new RShape ( children [ i ] ) ) ; } RShape [ ] splittedChild = children [ indOfElement ] . split ( advOfElement ) ; result [ 0 ] . addChild ( new RShape ( splittedChild [ 0 ] ) ) ; result [ 1 ] . addChild ( new RShape ( splittedChild [ 1 ] ) ) ; for ( int i=indOfElement+1 ; i < countChildren ( ) ; i++ ) { result [ 1 ] . addChild ( new RShape ( children [ i ] ) ) ; } result [ 0 ] . setStyle ( this ) ; result [ 1 ] . setStyle ( this ) ; return result ; } } public RPoint [ ] getIntersections ( RShape other ) { RShape shp = new RShape ( this ) ; shp . polygonize ( ) ; RShape otherPol = new RShape ( other ) ; otherPol . polygonize ( ) ; return shp . polygonIntersectionPoints ( otherPol ) ; } RPoint [ ] getIntersections ( RCommand other ) { RShape shp = new RShape ( this ) ; shp . polygonize ( ) ; return shp . polygonIntersectionPoints ( other ) ; } RPoint [ ] polygonIntersectionPoints ( RCommand other ) { int numPaths = countPaths ( ) ; RPoint [ ] result=null ; RPoint [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] newPoints = paths [ i ] . intersectionPoints ( other ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RPoint [ ] newPoints = children [ i ] . polygonIntersectionPoints ( other ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } RPoint [ ] polygonIntersectionPoints ( RPath other ) { int numChildren = countChildren ( ) ; int numPaths = countPaths ( ) ; RPoint [ ] result=null ; RPoint [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] newPoints = paths [ i ] . intersectionPoints ( other ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } for ( int i=0 ; i < numChildren ; i++ ) { RPoint [ ] newPoints = children [ i ] . polygonIntersectionPoints ( other ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } RPoint [ ] polygonIntersectionPoints ( RShape other ) { int numChildren = countChildren ( ) ; int numPaths = countPaths ( ) ; RPoint [ ] result=null ; RPoint [ ] newresult=null ; for ( int i=0 ; i < numPaths ; i++ ) { RPoint [ ] newPoints = other . polygonIntersectionPoints ( paths [ i ] ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } for ( int i=0 ; i < numChildren ; i++ ) { RPoint [ ] newPoints = other . polygonIntersectionPoints ( children [ i ] ) ; if ( newPoints!=null ) { if ( result==null ) { result = new RPoint [ newPoints . length ] ; System . arraycopy ( newPoints , 0 , result , 0 , newPoints . length ) ; } else { newresult = new RPoint [ result . length + newPoints . length ] ; System . arraycopy ( result , 0 , newresult , 0 , result . length ) ; System . arraycopy ( newPoints , 0 , newresult , result . length , newPoints . length ) ; result = newresult ; } } } return result ; } public RClosest getClosest ( RShape other ) { RShape shp = new RShape ( this ) ; shp . polygonize ( ) ; RShape otherPol = new RShape ( other ) ; otherPol . polygonize ( ) ; return shp . polygonClosestPoints ( otherPol ) ; } RClosest getClosest ( RCommand other ) { RShape shp = new RShape ( this ) ; shp . polygonize ( ) ; return shp . polygonClosestPoints ( other ) ; } RClosest polygonClosestPoints ( RCommand other ) { int numPaths = countPaths ( ) ; RClosest result = new RClosest ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { RClosest currResult = paths [ i ] . closestPoints ( other ) ; result . update ( currResult ) ; } for ( int i=0 ; i < countChildren ( ) ; i++ ) { RClosest currResult = children [ i ] . polygonClosestPoints ( other ) ; result . update ( currResult ) ; } return result ; } RClosest polygonClosestPoints ( RPath other ) { int numChildren = countChildren ( ) ; int numPaths = countPaths ( ) ; RClosest result = new RClosest ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { RClosest currClosest = paths [ i ] . closestPoints ( other ) ; result . update ( currClosest ) ; } for ( int i=0 ; i < numChildren ; i++ ) { RClosest currClosest = children [ i ] . polygonClosestPoints ( other ) ; result . update ( currClosest ) ; } return result ; } RClosest polygonClosestPoints ( RShape other ) { int numChildren = countChildren ( ) ; int numPaths = countPaths ( ) ; RClosest result = new RClosest ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { RClosest currClosest = other . polygonClosestPoints ( paths [ i ] ) ; result . update ( currClosest ) ; } for ( int i=0 ; i < numChildren ; i++ ) { RClosest currClosest = other . polygonClosestPoints ( children [ i ] ) ; result . update ( currClosest ) ; } return result ; } public void adapt ( RShape shp , float wght , float lngthOffset ) throws RuntimeException { RRectangle c = this . getBounds ( ) ; float xmin = c . getMinX ( ) ; float xmax = c . getMaxX ( ) ; int numChildren = countChildren ( ) ; switch ( RG . adaptorType ) { case RG . BYPOINT : RPoint [ ] ps = this . getHandles ( ) ; if ( ps != null ) { for ( int k=0 ; k < ps . length ; k++ ) { float px = ps [ k ] . x ; float py = ps [ k ] . y ; float t = ( ( px-xmin ) / ( xmax-xmin ) + lngthOffset ) % 1 . 001F ; float amp = ( py ) ; RPoint tg = shp . getTangent ( t ) ; RPoint p = shp . getPoint ( t ) ; float angle = ( float ) Math . atan2 ( tg . y , tg . x ) - ( float ) Math . PI/2F ; ps [ k ] . x = p . x + wght*amp* ( float ) Math . cos ( angle ) ; ps [ k ] . y = p . y + wght*amp* ( float ) Math . sin ( angle ) ; } } break ; case RG . BYELEMENTINDEX : for ( int i=0 ; i < numChildren ; i++ ) { RShape elem = this . children [ i ] ; RRectangle elemc = elem . getBounds ( ) ; float px = ( elemc . bottomRight . x + elemc . topLeft . x ) / 2F ; float py = ( elemc . bottomRight . y - elemc . topLeft . y ) / 2F ; float t = ( ( float ) i/ ( float ) numChildren + lngthOffset ) % 1F ; RPoint tg = shp . getTangent ( t ) ; RPoint p = shp . getPoint ( t ) ; float angle = ( float ) Math . atan2 ( tg . y , tg . x ) ; RPoint pletter = new RPoint ( px , py ) ; p . sub ( pletter ) ; RMatrix mtx = new RMatrix ( ) ; mtx . translate ( p ) ; mtx . rotate ( angle , pletter ) ; mtx . scale ( wght , pletter ) ; elem . transform ( mtx ) ; } break ; case RG . BYELEMENTPOSITION : for ( int i=0 ; i < numChildren ; i++ ) { RShape elem = this . children [ i ] ; RRectangle elemc = elem . getBounds ( ) ; float px = ( elemc . bottomRight . x + elemc . topLeft . x ) / 2F ; float py = ( elemc . bottomRight . y - elemc . topLeft . y ) / 2F ; float t = ( ( px-xmin ) / ( xmax-xmin ) + lngthOffset ) % 1F ; RPoint tg = shp . getTangent ( t ) ; RPoint p = shp . getPoint ( t ) ; float angle = ( float ) Math . atan2 ( tg . y , tg . x ) ; RPoint pletter = new RPoint ( px , py ) ; p . sub ( pletter ) ; RMatrix mtx = new RMatrix ( ) ; mtx . translate ( p ) ; mtx . rotate ( angle , pletter ) ; mtx . scale ( wght , pletter ) ; elem . transform ( mtx ) ; } break ; default : throw new RuntimeException ( "Unknown adaptor type : "+RG . adaptorType+" . The method RG . setAdaptor ( ) only accepts RG . BYPOINT or RG . BYELEMENT as parameter values . " ) ; } } public void adapt ( RShape shp ) throws RuntimeException { adapt ( shp , RG . adaptorScale , RG . adaptorLengthOffset ) ; } public int getType ( ) { return type ; } public void print ( ) { System . out . println ( "paths [ count " + this . countPaths ( ) + " ] : " ) ; for ( int i=0 ; i < countPaths ( ) ; i++ ) { System . out . println ( "--- path "+i+" ---" ) ; paths [ i ] . print ( ) ; System . out . println ( "---------------" ) ; } System . out . println ( "children [ count " + this . countChildren ( ) + " ] : " ) ; for ( int i=0 ; i < countChildren ( ) ; i++ ) { System . out . println ( "--- child "+i+" ---" ) ; children [ i ] . print ( ) ; System . out . println ( "---------------" ) ; } } public void draw ( PGraphics g ) { if ( !RG . ignoreStyles ) { saveContext ( g ) ; setContext ( g ) ; } this . drawPaths ( g ) ; for ( int i=0 ; i < countChildren ( ) ; i++ ) { this . children [ i ] . draw ( g ) ; } if ( !RG . ignoreStyles ) { restoreContext ( g ) ; } } public void draw ( PApplet g ) { if ( !RG . ignoreStyles ) { saveContext ( g ) ; setContext ( g ) ; } this . drawPaths ( g ) ; for ( int i=0 ; i < countChildren ( ) ; i++ ) { this . children [ i ] . draw ( g ) ; } if ( !RG . ignoreStyles ) { restoreContext ( g ) ; } } private void drawPaths ( PGraphics g ) { drawUsingBreakShape ( g ) ; } private void drawPaths ( PApplet g ) { drawUsingBreakShape ( g ) ; } protected void calculateCurveLengths ( ) { lenCurves = new float [ countPaths ( ) + countChildren ( ) ] ; lenCurve = 0F ; for ( int i=0 ; i < countPaths ( ) ; i++ ) { lenCurves [ i ] = paths [ i ] . getCurveLength ( ) ; lenCurve += lenCurves [ i ] ; } for ( int i=0 ; i < countChildren ( ) ; i++ ) { lenCurves [ i + countPaths ( ) ] = children [ i ] . getCurveLength ( ) ; lenCurve += lenCurves [ i + countPaths ( ) ] ; } } private float [ ] indAndAdvAt ( float t ) { int indOfElement = 0 ; float [ ] lengthsCurves = getCurveLengths ( ) ; float lengthCurve = getCurveLength ( ) ; float accumulatedAdvancement = lengthsCurves [ indOfElement ] / lengthCurve ; float prevAccumulatedAdvancement = 0F ; while ( t > accumulatedAdvancement ) { indOfElement++ ; prevAccumulatedAdvancement = accumulatedAdvancement ; accumulatedAdvancement += ( lengthsCurves [ indOfElement ] / lengthCurve ) ; } float advOfElement = ( t-prevAccumulatedAdvancement ) / ( lengthsCurves [ indOfElement ] / lengthCurve ) ; float [ ] indAndAdv = new float [ 2 ] ; indAndAdv [ 0 ] = indOfElement ; indAndAdv [ 1 ] = RG . parent ( ) . constrain ( advOfElement , 0 . 0f , 1 . 0f ) ; return indAndAdv ; } private void appendChild ( RShape nextshape ) { RShape [ ] newshapes ; if ( children==null ) { newshapes = new RShape [ 1 ] ; newshapes [ 0 ] = nextshape ; currentChild = 0 ; } else { newshapes = new RShape [ this . children . length+1 ] ; System . arraycopy ( this . children , 0 , newshapes , 0 , this . children . length ) ; newshapes [ this . children . length ] =nextshape ; currentChild++ ; } this . children = newshapes ; } private void append ( RPath nextpath ) { RPath [ ] newpaths ; if ( paths==null ) { newpaths = new RPath [ 1 ] ; newpaths [ 0 ] = nextpath ; currentPath = 0 ; } else { newpaths = new RPath [ this . paths . length+1 ] ; System . arraycopy ( this . paths , 0 , newpaths , 0 , this . paths . length ) ; newpaths [ this . paths . length ] =nextpath ; currentPath++ ; } this . paths=newpaths ; } private void drawUsingInternalTesselator ( PGraphics g ) { int numPaths = countPaths ( ) ; if ( numPaths!=0 ) { if ( isIn ( g ) ) { boolean strokeBefore = g . stroke ; int strokeColorBefore = g . strokeColor ; float strokeWeightBefore = g . strokeWeight ; int smoothBefore = g . smooth ; boolean fillBefore = g . fill ; int fillColorBefore = g . fillColor ; int lastSegmentator = RCommand . segmentType ; RCommand . setSegmentator ( RCommand . ADAPTATIVE ) ; if ( g . fill ) { g . noStroke ( ) ; try { g . noSmooth ( ) ; } catch ( Exception e ) { } RMesh tempMesh = this . toMesh ( ) ; tempMesh . draw ( g ) ; g . stroke ( strokeColorBefore ) ; if ( !strokeBefore ) { g . noStroke ( ) ; } try { if ( smoothBefore > 0 ) { g . smooth ( ) ; } } catch ( Exception e ) { } } g . noFill ( ) ; if ( !strokeBefore ) { g . stroke ( g . fillColor ) ; g . strokeWeight ( 1F ) ; } for ( int i=0 ; i < numPaths ; i++ ) { paths [ i ] . draw ( g ) ; } if ( fillBefore ) { g . fill ( fillColorBefore ) ; } else { g . noFill ( ) ; } g . strokeWeight ( strokeWeightBefore ) ; g . stroke ( strokeColorBefore ) ; if ( !strokeBefore ) { g . noStroke ( ) ; } RCommand . setSegmentator ( lastSegmentator ) ; } } } private void drawUsingInternalTesselator ( PApplet p ) { int numPaths = countPaths ( ) ; if ( numPaths!=0 ) { if ( isIn ( p ) ) { boolean strokeBefore = p . g . stroke ; int strokeColorBefore = p . g . strokeColor ; float strokeWeightBefore = p . g . strokeWeight ; int smoothBefore = p . g . smooth ; boolean fillBefore = p . g . fill ; int fillColorBefore = p . g . fillColor ; int lastSegmentator = RCommand . segmentType ; RCommand . setSegmentator ( RCommand . ADAPTATIVE ) ; if ( p . g . fill ) { p . noStroke ( ) ; try { p . noSmooth ( ) ; } catch ( Exception e ) { } RMesh tempMesh = this . toMesh ( ) ; if ( tempMesh != null ) { tempMesh . draw ( p ) ; } p . stroke ( strokeColorBefore ) ; p . strokeWeight ( strokeWeightBefore ) ; if ( !strokeBefore ) { p . noStroke ( ) ; } try { if ( smoothBefore > 0 ) { p . smooth ( ) ; } } catch ( Exception e ) { } } p . noFill ( ) ; if ( ( smoothBefore > 0 && fillBefore ) || strokeBefore ) { if ( !strokeBefore ) { p . stroke ( fillColorBefore ) ; p . strokeWeight ( 1F ) ; } for ( int i=0 ; i < numPaths ; i++ ) { paths [ i ] . draw ( p ) ; } if ( fillBefore ) { p . fill ( fillColorBefore ) ; } p . strokeWeight ( strokeWeightBefore ) ; p . stroke ( strokeColorBefore ) ; if ( !strokeBefore ) { p . noStroke ( ) ; } } RCommand . setSegmentator ( lastSegmentator ) ; } } } private void drawUsingBreakShape ( PGraphics g ) { int numPaths = countPaths ( ) ; if ( numPaths!=0 ) { if ( isIn ( g ) ) { boolean closed = false ; boolean useContours = ( numPaths > 1 ) ; g . beginShape ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { if ( useContours && i > 0 ) { g . beginContour ( ) ; } RPath path = paths [ i ] ; closed |= path . closed ; for ( int j = 0 ; j < path . countCommands ( ) ; j++ ) { RPoint [ ] pnts = path . commands [ j ] . getHandles ( ) ; if ( j==0 ) { g . vertex ( pnts [ 0 ] . x , pnts [ 0 ] . y ) ; } switch ( path . commands [ j ] . getCommandType ( ) ) { case RCommand . LINETO : g . vertex ( pnts [ 1 ] . x , pnts [ 1 ] . y ) ; break ; case RCommand . QUADBEZIERTO : g . bezierVertex ( pnts [ 1 ] . x , pnts [ 1 ] . y , pnts [ 2 ] . x , pnts [ 2 ] . y , pnts [ 2 ] . x , pnts [ 2 ] . y ) ; break ; case RCommand . CUBICBEZIERTO : g . bezierVertex ( pnts [ 1 ] . x , pnts [ 1 ] . y , pnts [ 2 ] . x , pnts [ 2 ] . y , pnts [ 3 ] . x , pnts [ 3 ] . y ) ; break ; } } if ( useContours && i > 0 ) { g . endContour ( ) ; } } g . endShape ( closed ? PConstants . CLOSE : PConstants . OPEN ) ; } } } private void drawUsingBreakShape ( PApplet g ) { int numPaths = countPaths ( ) ; if ( numPaths!=0 ) { if ( isIn ( g ) ) { boolean closed = false ; boolean useContours = ( numPaths > 1 ) ; g . beginShape ( ) ; for ( int i=0 ; i < numPaths ; i++ ) { if ( useContours && i > 0 ) g . beginContour ( ) ; RPath path = paths [ i ] ; closed |= path . closed ; float firstx = 0 ; float firsty = 0 ; for ( int j = 0 ; j < path . countCommands ( ) ; j++ ) { RPoint [ ] pnts = path . commands [ j ] . getHandles ( ) ; if ( j==0 ) { g . vertex ( pnts [ 0 ] . x , pnts [ 0 ] . y ) ; } switch ( path . commands [ j ] . getCommandType ( ) ) { case RCommand . LINETO : g . vertex ( pnts [ 1 ] . x , pnts [ 1 ] . y ) ; break ; case RCommand . QUADBEZIERTO : g . bezierVertex ( pnts [ 1 ] . x , pnts [ 1 ] . y , pnts [ 2 ] . x , pnts [ 2 ] . y , pnts [ 2 ] . x , pnts [ 2 ] . y ) ; break ; case RCommand . CUBICBEZIERTO : g . bezierVertex ( pnts [ 1 ] . x , pnts [ 1 ] . y , pnts [ 2 ] . x , pnts [ 2 ] . y , pnts [ 3 ] . x , pnts [ 3 ] . y ) ; break ; } } if ( useContours && i > 0 ) { g . endContour ( ) ; } } g . endShape ( closed ? PConstants . CLOSE : PConstants . OPEN ) ; } } } }