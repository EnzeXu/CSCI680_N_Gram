public class DexJarMaker { public static final String DEX_FILE_NAME_IN_JAR = "classes" + PathHolder.DEX_FILE_EXTENSION; private final PathHolder pathHolder; public DexJarMaker(PathHolder pathHolder) { this.pathHolder = pathHolder; } public void create() throws DexClassLoadingException { Manifest manifest = new Manifest(); manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0"); JarOutputStream target = null; try { target = new JarOutputStream( new BufferedOutputStream(new FileOutputStream(pathHolder.getJarFilePath())), manifest); add(new File(pathHolder.getDexFilePath()), target); } catch (IOException e) { throw new DexClassLoadingException(e); } finally { try { if (target != null) { target.close(); } } catch(IOException e) { } } } private void add(File source, JarOutputStream target) throws IOException { if (!source.isFile()) { throw new IllegalArgumentException("Wrong source dex file provided"); } BufferedInputStream in = new BufferedInputStream(new FileInputStream(source)); JarEntry entry = new JarEntry(DEX_FILE_NAME_IN_JAR); entry.setTime(source.lastModified()); target.putNextEntry(entry); int curr = -1; while ((curr = in.read()) != -1) { target.write(curr); } target.closeEntry(); } }