public class IndexTupleDeserializer<T extends IndexTuple> extends BaseDeserializer<T> { protected Map<Integer, Class[]> typeMap; public IndexTupleDeserializer( TupleSerialization.SerializationElementReader elementReader ) { super( elementReader ); } public T deserialize( IndexTuple tuple ) throws IOException { if( tuple == null ) tuple = createTuple(); int ordinal = inputStream.readVInt(); tuple.setIndex( ordinal ); Class[] types = getTypesFor( ordinal ); if( types == null ) tuple.setTuple( inputStream.readUnTyped( new Tuple() ) ); else tuple.setTuple( inputStream.readTyped( types, new Tuple() ) ); return (T) tuple; } @Override protected T createTuple() { return (T) new IndexTuple(); } protected Class[] getTypesFor( int ordinal ) { return null; } }