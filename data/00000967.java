public class TestGenerator { private final Path classNamePath; public static void main(String[] args) throws IOException { assert args.length == 1; TestGenerator testGenerator = new TestGenerator(Paths.get(args[0], TestGenerator.class.getPackage().getName(), ConstTest.class.getSimpleName() + ".class")); testGenerator.generateTests(); } public TestGenerator(Path classNamePath) { this.classNamePath = classNamePath; } private void generateTests() throws IOException { ClassReader cr = new ClassReader(new FileInputStream(classNamePath.toFile())); ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES); cr.accept( new ClassVisitor(Opcodes.ASM5, cw) { @Override public void visitEnd() { generateMethodTest1(cw); generateMethodTest2(cw); generateMethodMain(cw); super.visitEnd(); } }, 0); new FileOutputStream(classNamePath.toFile()).write(cw.toByteArray()); } private void generateMethodMain(ClassVisitor cv) { MethodVisitor mv = cv.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null); String internalName = Type.getInternalName(ConstTest.class); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test1", "()Ljava/lang/invoke/MethodHandle;", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "displayMethodHandle", "(Ljava/lang/invoke/MethodHandle;)V", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test2", "()Ljava/lang/invoke/MethodType;", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "displayMethodType", "(Ljava/lang/invoke/MethodType;)V", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs(-1, -1); } private void generateMethodTest1(ClassVisitor cv) { MethodVisitor mv = cv.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "test1", "()Ljava/lang/invoke/MethodHandle;", null, null); MethodType mt = MethodType.methodType(Class.class); Handle mh = new Handle(Opcodes.H_INVOKEVIRTUAL, Type.getInternalName(Object.class), "getClass", mt.toMethodDescriptorString(), false); mv.visitLdcInsn(mh); mv.visitInsn(Opcodes.ARETURN); mv.visitMaxs(-1, -1); } private void generateMethodTest2(ClassVisitor cv) { MethodVisitor mv = cv.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "test2", "()Ljava/lang/invoke/MethodType;", null, null); Type mt = Type.getMethodType(Type.getType(boolean.class), Type.getType(char.class), Type.getType(short.class), Type.getType(int.class), Type.getType(long.class), Type.getType(float.class), Type.getType(double.class), Type.getType(Object.class)); mv.visitLdcInsn(mt); mv.visitInsn(Opcodes.ARETURN); mv.visitMaxs(-1, -1); } }