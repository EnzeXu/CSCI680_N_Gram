public class ScriptFunction extends ScriptOperation implements Function<ScriptOperation.Context> { @ConstructorProperties({"fieldDeclaration", "script"}) public ScriptFunction( Fields fieldDeclaration, String script ) { super( ANY, fieldDeclaration, script ); verify( fieldDeclaration ); } @ConstructorProperties({"fieldDeclaration", "script", "returnType"}) public ScriptFunction( Fields fieldDeclaration, String script, Class returnType ) { super( ANY, fieldDeclaration, script, returnType ); verify( fieldDeclaration ); } @ConstructorProperties({"fieldDeclaration", "script", "returnType", "expectedTypes"}) public ScriptFunction( Fields fieldDeclaration, String script, Class returnType, Class[] expectedTypes ) { super( expectedTypes.length, fieldDeclaration, script, returnType, expectedTypes ); verify( fieldDeclaration ); } @ConstructorProperties({"fieldDeclaration", "script", "returnType", "parameterNames", "parameterTypes"}) public ScriptFunction( Fields fieldDeclaration, String script, Class returnType, String[] parameterNames, Class[] parameterTypes ) { super( parameterTypes.length, fieldDeclaration, script, returnType, parameterNames, parameterTypes ); verify( fieldDeclaration ); } @ConstructorProperties({"fieldDeclaration", "script", "parameterNames", "parameterTypes"}) public ScriptFunction( Fields fieldDeclaration, String script, String[] parameterNames, Class[] parameterTypes ) { super( parameterTypes.length, fieldDeclaration, script, asClass( fieldDeclaration.getType( 0 ) ), parameterNames, parameterTypes ); verify( fieldDeclaration ); } private void verify( Fields fieldDeclaration ) { if( !fieldDeclaration.isSubstitution() && fieldDeclaration.size() != 1 ) throw new IllegalArgumentException( "fieldDeclaration may only declare one field, was " + fieldDeclaration.print() ); } public String getScript() { return getBlock(); } @Override public void operate( FlowProcess flowProcess, FunctionCall<Context> functionCall ) { functionCall.getContext().result.set( 0, evaluate( functionCall.getContext(), functionCall.getArguments() ) ); functionCall.getOutputCollector().add( functionCall.getContext().result ); } }