public class Compressors { public static final ApacheCompressor BROTLI = new ApacheCompressor( CompressorStreamFactory.BROTLI ); public static final ApacheCompressor BZIP2 = new ApacheCompressor( CompressorStreamFactory.BZIP2 ); public static final ApacheCompressor GZIP = new ApacheCompressor( CompressorStreamFactory.GZIP ); public static final ApacheCompressor PACK200 = new ApacheCompressor( CompressorStreamFactory.PACK200 ); public static final ApacheCompressor XZ = new ApacheCompressor( CompressorStreamFactory.XZ ); public static final ApacheCompressor LZMA = new ApacheCompressor( CompressorStreamFactory.LZMA ); public static final ApacheCompressor SNAPPY_FRAMED = new ApacheCompressor( CompressorStreamFactory.SNAPPY_FRAMED, "snappy" ); public static final ApacheCompressor SNAPPY_RAW = new ApacheCompressor( CompressorStreamFactory.SNAPPY_RAW ); public static final ApacheCompressor Z = new ApacheCompressor( CompressorStreamFactory.Z ); public static final ApacheCompressor DEFLATE = new ApacheCompressor( CompressorStreamFactory.DEFLATE ); public static final ApacheCompressor LZ4_BLOCK = new ApacheCompressor( CompressorStreamFactory.LZ4_BLOCK ); public static final ApacheCompressor LZ4_FRAMED = new ApacheCompressor( CompressorStreamFactory.LZ4_FRAMED, "lz4" ); private static CompressorStreamFactory factory = new CompressorStreamFactory(); static class ApacheCompressor implements CompressorScheme.Compressor { String algorithm; String defaultExtension; public ApacheCompressor( String algorithm ) { this.algorithm = algorithm; this.defaultExtension = algorithm; } public ApacheCompressor( String algorithm, String defaultExtension ) { this.algorithm = algorithm; this.defaultExtension = defaultExtension; } @Override public InputStream inputStream( InputStream inputStream ) throws IOException { try { return factory.createCompressorInputStream( algorithm, inputStream ); } catch( CompressorException exception ) { throw new TapException( exception ); } } @Override public OutputStream outputStream( OutputStream outputStream ) throws IOException { try { return factory.createCompressorOutputStream( algorithm, outputStream ); } catch( CompressorException exception ) { throw new TapException( exception ); } } @Override public String getExtension() { return defaultExtension; } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof ApacheCompressor ) ) return false; ApacheCompressor that = (ApacheCompressor) object; return Objects.equals( algorithm, that.algorithm ) && Objects.equals( defaultExtension, that.defaultExtension ); } @Override public int hashCode() { return Objects.hash( algorithm, defaultExtension ); } @Override public String toString() { final StringBuilder sb = new StringBuilder( "Compressor{" ); sb.append( "algorithm='" ).append( algorithm ).append( '\'' ); sb.append( ", defaultExtension='" ).append( defaultExtension ).append( '\'' ); sb.append( '}' ); return sb.toString(); } } }