public class DelegatingTupleElementComparator implements StreamComparator < TupleInputStream > , Comparator < Object > { final TupleSerialization tupleSerialization ; Comparator < Object > objectComparator = null ; StreamComparator < TupleInputStream > streamComparator = null ; public DelegatingTupleElementComparator ( TupleSerialization tupleSerialization ) { this . tupleSerialization = tupleSerialization ; } @ Override public int compare ( Object lhs , Object rhs ) { if ( objectComparator == null ) { if ( lhs == null && rhs == null ) return 0 ; objectComparator = getComparator ( lhs , rhs ) ; } return objectComparator . compare ( lhs , rhs ) ; } private Comparator < Object > getComparator ( Object lhs , Object rhs ) { Class type = lhs != null ? lhs . getClass ( ) : null ; type = type == null && rhs != null ? rhs . getClass ( ) : type ; Comparator comparator = tupleSerialization . getComparator ( type ) ; if ( comparator instanceof StreamComparator ) return new TupleElementStreamComparator ( ( StreamComparator ) comparator ) ; return new TupleElementComparator ( comparator ) ; } @ Override public int compare ( TupleInputStream lhsStream , TupleInputStream rhsStream ) { if ( streamComparator == null ) streamComparator = getComparator ( lhsStream ) ; return streamComparator . compare ( lhsStream , rhsStream ) ; } private StreamComparator getComparator ( TupleInputStream lhsStream ) { try { lhsStream . mark ( 4 * 1024 ) ; Comparator foundComparator = lhsStream . getComparatorFor ( lhsStream . readToken ( ) ) ; if ( foundComparator == null ) foundComparator = tupleSerialization . getDefaultComparator ( ) ; if ( foundComparator instanceof StreamComparator ) return new TupleElementStreamComparator ( ( StreamComparator ) foundComparator ) ; else return new TupleElementComparator ( foundComparator ) ; } catch ( IOException exception ) { throw new CascadingException ( exception ) ; } finally { try { lhsStream . reset ( ) ; } catch ( IOException exception ) { throw new CascadingException ( exception ) ; } } } }