public class JSONBuildAsFunctionTest extends CascadingTestCase { @Test public void testBuildAsFunction() throws Exception { Fields fields = new Fields( "result", JSONCoercibleType.TYPE ); Fields argumentFields = Fields.NONE .append( new Fields( "id", String.class ) ) .append( new Fields( "age", Integer.class ) ) .append( new Fields( "first", String.class ) ) .append( new Fields( "last", String.class ) ) .append( new Fields( "child", String.class ) ) .append( new Fields( "child-age", String.class ) ); TupleEntry arguments = new TupleEntry( argumentFields, Tuple.size( 6 ) ); arguments.setObject( 0, "123-45-6789" ); arguments.setObject( 1, 50 ); arguments.setObject( 2, "John" ); arguments.setObject( 3, "Doe" ); arguments.setObject( 4, "Jane" ); arguments.setObject( 5, 4 ); BuildSpec spec = new BuildSpec() .putInto( "id", "/ssn" ) .putInto( "age", String.class, "/age" ) .putInto( "first", "/name/first" ) .putInto( "last", "/name/last" ) .addInto( "child", "/children" ) .addInto( "child-age", Integer.class, "/childAges" ); JSONBuildAsFunction function = new JSONBuildAsFunction( fields, spec ); TupleListCollector result = invokeFunction( function, arguments, fields ); ObjectNode value = (ObjectNode) result.iterator().next().getObject( 0 ); assertNotNull( value ); assertEquals( "John", value.findPath( "name" ).findPath( "first" ).textValue() ); assertEquals( JsonNodeType.STRING, value.findPath( "age" ).getNodeType() ); assertEquals( "50", value.findPath( "age" ).textValue() ); assertEquals( "123-45-6789", value.findValue( "ssn" ).textValue() ); assertEquals( JsonNodeType.ARRAY, value.findPath( "childAges" ).getNodeType() ); assertEquals( 1, value.findPath( "childAges" ).size() ); assertEquals( JsonNodeType.NUMBER, value.findPath( "childAges" ).get( 0 ).getNodeType() ); } }