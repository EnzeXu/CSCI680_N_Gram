public class ErrorCollector extends Verifier { private List < Throwable > errors = new ArrayList < Throwable > ( ) ; @ Override protected void verify ( ) throws Throwable { MultipleFailureException . assertEmpty ( errors ) ; } public void addError ( Throwable error ) { if ( error == null ) { throw new NullPointerException ( "Error cannot be null" ) ; } if ( error instanceof AssumptionViolatedException ) { AssertionError e = new AssertionError ( error . getMessage ( ) ) ; e . initCause ( error ) ; errors . add ( e ) ; } else { errors . add ( error ) ; } } public < T > void checkThat ( final T value , final Matcher < T > matcher ) { checkThat ( "" , value , matcher ) ; } public < T > void checkThat ( final String reason , final T value , final Matcher < T > matcher ) { checkSucceeds ( new Callable < Object > ( ) { public Object call ( ) throws Exception { MatcherAssert . assertThat ( reason , value , matcher ) ; return value ; } } ) ; } public < T > T checkSucceeds ( Callable < T > callable ) { try { return callable . call ( ) ; } catch ( AssumptionViolatedException e ) { AssertionError error = new AssertionError ( "Callable threw AssumptionViolatedException" ) ; error . initCause ( e ) ; addError ( error ) ; return null ; } catch ( Throwable e ) { addError ( e ) ; return null ; } } public void checkThrows ( Class < ? extends Throwable > expectedThrowable , ThrowingRunnable runnable ) { try { assertThrows ( expectedThrowable , runnable ) ; } catch ( AssertionError e ) { addError ( e ) ; } } }