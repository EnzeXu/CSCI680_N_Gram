public class CipherFactory { private static boolean blacklistInit = false; private static boolean blacklisted; static { Security.removeProvider("BC"); Security.addProvider(new BouncyCastleProvider()); } public static Cipher getInstance(String transformation) throws NoSuchAlgorithmException, NoSuchPaddingException { return getInstance(transformation, false); } public static Cipher getInstance(String transformation, boolean androidOverride) throws NoSuchAlgorithmException, NoSuchPaddingException { if ( (!deviceBlacklisted()) && (!androidOverride) && hasNativeImplementation(transformation) && NativeLib.loaded() ) { return Cipher.getInstance(transformation, new AESProvider()); } else { return Cipher.getInstance(transformation); } } public static boolean deviceBlacklisted() { if (!blacklistInit) { blacklistInit = true; blacklisted = Build.MODEL.equals("A500"); } return blacklisted; } private static boolean hasNativeImplementation(String transformation) { return transformation.equals("AES/CBC/PKCS5Padding"); } public static CipherEngine getInstance(UUID uuid) throws NoSuchAlgorithmException { if ( uuid.equals(AesEngine.CIPHER_UUID) ) { return new AesEngine(); } else if ( uuid.equals(TwofishEngine.CIPHER_UUID) ) { return new TwofishEngine(); } else if ( uuid.equals(ChaCha20Engine.CIPHER_UUID)) { return new ChaCha20Engine(); } throw new NoSuchAlgorithmException("UUID unrecognized."); } }