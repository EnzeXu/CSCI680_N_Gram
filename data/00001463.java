public class ConfigDef implements Serializable { public enum Mode { DEFAULT, REPLACE, UPDATE } public interface Setter { String set( String key, String value ); String update( String key, String value ); String get( String key ); } public interface Getter { String update( String key, String value ); String get( String key ); } protected Map<Mode, Map<String, String>> config; public ConfigDef() { } public ConfigDef setProperty( String key, String value ) { return setProperty( Mode.REPLACE, key, value ); } public ConfigDef setProperty( Mode mode, String key, String value ) { getMode( mode ).put( key, value ); return this; } public ConfigDef setAllProperties( Mode mode, Properties... properties ) { Map<String, String> map = getMode( mode ); Properties merged = PropertyUtil.merge( properties ); for( String property : merged.stringPropertyNames() ) map.put( property, merged.getProperty( property ) ); return this; } protected Map<String, String> getMode( Mode mode ) { if( config == null ) config = new HashMap<>(); if( !config.containsKey( mode ) ) config.put( mode, new HashMap<>() ); return config.get( mode ); } protected Map<String, String> getModeSafe( Mode mode ) { if( config == null ) return Collections.emptyMap(); if( !config.containsKey( mode ) ) return Collections.emptyMap(); return config.get( mode ); } public boolean isEmpty() { return config == null || config.isEmpty(); } public String apply( String key, Getter getter ) { String defaultValue = getModeSafe( Mode.DEFAULT ).get( key ); String replaceValue = getModeSafe( Mode.REPLACE ).get( key ); String updateValue = getModeSafe( Mode.UPDATE ).get( key ); String currentValue = getter.get( key ); if( currentValue == null && replaceValue == null && updateValue == null ) return defaultValue; if( replaceValue != null ) return replaceValue; if( updateValue == null ) return currentValue; if( currentValue == null ) return updateValue; return getter.update( key, updateValue ); } public void apply( Mode mode, Setter setter ) { if( !config.containsKey( mode ) ) return; for( String key : config.get( mode ).keySet() ) { switch( mode ) { case DEFAULT: if( setter.get( key ) == null ) setter.set( key, config.get( mode ).get( key ) ); break; case REPLACE: setter.set( key, config.get( mode ).get( key ) ); break; case UPDATE: setter.update( key, config.get( mode ).get( key ) ); break; } } } public Collection<String> getAllKeys() { Set<String> keys = new HashSet<String>(); for( Map<String, String> map : config.values() ) keys.addAll( map.keySet() ); return Collections.unmodifiableSet( keys ); } }