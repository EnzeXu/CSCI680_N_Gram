public class FieldFormatter extends BaseOperation<Tuple> implements Function<Tuple> { public static final String FIELD_NAME = "formatted"; private String format = null; @ConstructorProperties({"format"}) public FieldFormatter( String format ) { super( new Fields( FIELD_NAME ) ); this.format = format; } @ConstructorProperties({"fieldDeclaration", "format"}) public FieldFormatter( Fields fieldDeclaration, String format ) { super( fieldDeclaration ); this.format = format; if( fieldDeclaration.size() != 1 ) throw new IllegalArgumentException( "fieldDeclaration may only declare one field name, got " + fieldDeclaration.print() ); } public String getFormat() { return format; } @Override public void prepare( FlowProcess flowProcess, OperationCall<Tuple> operationCall ) { operationCall.setContext( Tuple.size( 1 ) ); } @Override public void operate( FlowProcess flowProcess, FunctionCall<Tuple> functionCall ) { functionCall.getContext().set( 0, functionCall.getArguments().getTuple().format( format ) ); functionCall.getOutputCollector().add( functionCall.getContext() ); } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof FieldFormatter ) ) return false; if( !super.equals( object ) ) return false; FieldFormatter that = (FieldFormatter) object; if( format != null ? !format.equals( that.format ) : that.format != null ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( format != null ? format.hashCode() : 0 ); return result; } }