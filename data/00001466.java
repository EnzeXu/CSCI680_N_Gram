public class OpenDuct < Incoming , Outgoing > extends Duct < Grouping < Incoming , Iterator < Incoming > > , Outgoing > implements OpenWindow { public OpenDuct ( Duct < Outgoing , ? > next ) { super ( next ) ; } @ Override public void start ( Duct previous ) { next . start ( previous ) ; } @ Override public void receive ( Duct previous , int ordinal , Grouping < Incoming , Iterator < Incoming > > grouping ) { while ( grouping . joinIterator . hasNext ( ) ) next . receive ( previous , 0 , ( Outgoing ) grouping . joinIterator . next ( ) ) ; } @ Override public void complete ( Duct previous ) { next . complete ( previous ) ; } }