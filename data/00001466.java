public class ProviderLoader<Provider> { private static final Logger LOG = LoggerFactory.getLogger( ServiceLoader.class ); URL libraryURL; String[] exclusions; ClassLoader classLoader; public ProviderLoader() { } public ProviderLoader( String[] exclusions, URL libraryURL ) { this.exclusions = exclusions; this.libraryURL = libraryURL; } public Provider createProvider( String className ) { if( className == null || className.isEmpty() ) return null; if( className.startsWith( "@" ) && className.endsWith( "@" ) ) { LOG.warn( "invalid classname: {}", className ); return null; } try { Class<Provider> type = (Class<Provider>) getClassLoader().loadClass( className ); return type.newInstance(); } catch( ClassNotFoundException exception ) { LOG.error( "unable to find service class: {}, with exception: {}", className, exception ); } catch( IllegalAccessException exception ) { LOG.error( "unable to instantiate service class: {}, with exception: {}", className, exception ); } catch( InstantiationException exception ) { LOG.error( "unable to instantiate service class: {}, with exception: {}", className, exception ); } return null; } private synchronized ClassLoader getClassLoader() { if( classLoader != null ) return classLoader; if( libraryURL == null ) { classLoader = Thread.currentThread().getContextClassLoader(); } else { LOG.info( "loading services from library: {}", libraryURL ); classLoader = new ChildFirstURLClassLoader( exclusions, libraryURL ); } return classLoader; } }