public class ScalaCompileMojo extends ScalaCompilerSupport { @ Parameter ( property = "maven . main . skip" ) private boolean skipMain ; @ Parameter ( property = "outputDir" , defaultValue = "$ { project . build . outputDirectory } " ) private File outputDir ; @ Parameter ( defaultValue = "$ { project . build . sourceDirectory } / . . /scala" ) private File sourceDir ; @ Parameter ( property = "analysisCacheFile" , defaultValue = "$ { project . build . directory } /analysis/compile" ) private File analysisCacheFile ; @ Parameter ( property = "classpath" ) @ Deprecated private Classpath classpath ; @ Override protected List < File > getSourceDirectories ( ) throws Exception { List < String > sources = project . getCompileSourceRoots ( ) ; String scalaSourceDir = FileUtils . pathOf ( sourceDir , useCanonicalPath ) ; if ( !sources . contains ( scalaSourceDir ) ) { sources = new LinkedList < > ( sources ) ; sources . add ( scalaSourceDir ) ; } return normalize ( sources ) ; } @ Override protected Set < File > getClasspathElements ( ) throws Exception { final Set < File > back = FileUtils . fromStrings ( project . getCompileClasspathElements ( ) ) ; back . remove ( new File ( project . getBuild ( ) . getOutputDirectory ( ) ) ) ; addAdditionalDependencies ( back ) ; if ( classpath != null && classpath . getAdd ( ) != null ) { getLog ( ) . warn ( "using 'classpath' is deprecated , use 'additionalDependencies' instead" ) ; for ( File f : classpath . getAdd ( ) ) { back . add ( f ) ; } } back . addAll ( FileUtils . fromStrings ( TychoUtilities . addOsgiClasspathElements ( project ) ) ) ; return back ; } @ Override @ Deprecated protected List < Dependency > getDependencies ( ) { return project . getCompileDependencies ( ) ; } @ Override protected File getOutputDir ( ) { return outputDir . getAbsoluteFile ( ) ; } @ Override protected File getAnalysisCacheFile ( ) { return analysisCacheFile . getAbsoluteFile ( ) ; } @ Override public void execute ( ) throws MojoExecutionException , MojoFailureException { if ( skipMain ) { getLog ( ) . info ( "Not compiling main sources" ) ; return ; } super . execute ( ) ; } }