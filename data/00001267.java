public class DateType implements CoercibleType < Long > { protected TimeZone zone ; protected Locale locale ; protected String dateFormatString ; private transient SimpleDateFormat dateFormat ; public DateType ( String dateFormatString , TimeZone zone , Locale locale ) { this . zone = zone ; this . locale = locale ; this . dateFormatString = dateFormatString ; } public DateType ( String dateFormatString , TimeZone zone ) { this . zone = zone ; this . dateFormatString = dateFormatString ; } public DateType ( String dateFormatString ) { this . dateFormatString = dateFormatString ; } @ Override public Class getCanonicalType ( ) { return Long . TYPE ; } public SimpleDateFormat getDateFormat ( ) { if ( dateFormat != null ) return dateFormat ; dateFormat = new SimpleDateFormat ( dateFormatString , getLocale ( ) ) ; dateFormat . setTimeZone ( getZone ( ) ) ; return dateFormat ; } private Locale getLocale ( ) { if ( locale != null ) return locale ; return Locale . getDefault ( ) ; } private TimeZone getZone ( ) { if ( zone != null ) return zone ; return TimeZone . getTimeZone ( "UTC" ) ; } protected Calendar getCalendar ( ) { return Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) , getLocale ( ) ) ; } @ Override public < T > ToCanonical < T , Long > from ( Type from ) { if ( from == Long . class ) return ( v ) - > ( Long ) v ; if ( from == String . class ) return ( v ) - > v == null ? null : parse ( ( String ) v ) . getTime ( ) ; if ( from == Date . class ) return ( v ) - > v == null ? null : ( ( Date ) v ) . getTime ( ) ; return this : : canonical ; } @ Override public Long canonical ( Object value ) { if ( value == null ) return null ; Class from = value . getClass ( ) ; if ( from == Long . class ) return ( Long ) value ; if ( from == String . class ) return parse ( ( String ) value ) . getTime ( ) ; if ( from == Date . class ) return ( ( Date ) value ) . getTime ( ) ; throw new CascadingException ( "unknown type coercion requested from : " + Util . getTypeName ( from ) ) ; } @ Override public < T > CoercionFrom < Long , T > to ( Type to ) { boolean returnZero = Coercions . primitives . containsKey ( to ) ; if ( to == Long . class || to == Long . TYPE || to == Object . class || DateType . class == to . getClass ( ) ) return ( v ) - > v == null ? ( T ) nullCoercion ( returnZero ) : ( T ) v ; if ( to == String . class ) return ( v ) - > v == null ? ( T ) nullCoercion ( returnZero ) : ( T ) toString ( v ) ; return CoercibleType . super . to ( to ) ; } @ Override public Object coerce ( Object value , Type to ) { if ( value == null ) return nullCoercion ( Coercions . primitives . containsKey ( to ) ) ; Class < ? > from = value . getClass ( ) ; if ( from != Long . class ) throw new IllegalStateException ( "was not normalized" ) ; if ( to == Long . class || to == Long . TYPE || to == Object . class || DateType . class == to . getClass ( ) ) return value ; if ( to == String . class ) return toString ( ( Long ) value ) ; Coercions . Coerce < ? > coerce = Coercions . coercions . get ( to ) ; if ( coerce != null ) return coerce . coerce ( value ) ; throw new CascadingException ( "unknown type coercion requested , from : " + Util . getTypeName ( from ) + " to : " + Util . getTypeName ( to ) ) ; } private Object nullCoercion ( boolean returnZero ) { if ( returnZero ) return 0 ; return null ; } protected String toString ( Long value ) { Calendar calendar = getCalendar ( ) ; calendar . setTimeInMillis ( value ) ; return getDateFormat ( ) . format ( calendar . getTime ( ) ) ; } protected Date parse ( String value ) { try { return getDateFormat ( ) . parse ( value ) ; } catch ( ParseException exception ) { throw new CascadingException ( "unable to parse value : " + value + " with format : " + dateFormatString ) ; } } @ Override public boolean equals ( Object object ) { if ( this == object ) return true ; if ( ! ( object instanceof DateType ) ) return false ; DateType dateType = ( DateType ) object ; return Objects . equals ( zone , dateType . zone ) && Objects . equals ( locale , dateType . locale ) && Objects . equals ( dateFormatString , dateType . dateFormatString ) ; } @ Override public int hashCode ( ) { return Objects . hash ( zone , locale , dateFormatString ) ; } @ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( "DateType { " ) ; sb . append ( "dateFormatString='" ) . append ( dateFormatString ) . append ( '\'' ) ; sb . append ( " , " ) ; sb . append ( "canonicalType='" ) . append ( getCanonicalType ( ) ) . append ( '\'' ) ; sb . append ( ' } ' ) ; return sb . toString ( ) ; } }