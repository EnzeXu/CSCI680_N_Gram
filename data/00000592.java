public class ThrowableCauseMatcher < T extends Throwable > extends TypeSafeMatcher < T > { private final Matcher < ? > causeMatcher ; public ThrowableCauseMatcher ( Matcher < ? > causeMatcher ) { this . causeMatcher = causeMatcher ; } public void describeTo ( Description description ) { description . appendText ( "exception with cause " ) ; description . appendDescriptionOf ( causeMatcher ) ; } @ Override protected boolean matchesSafely ( T item ) { return causeMatcher . matches ( item . getCause ( ) ) ; } @ Override protected void describeMismatchSafely ( T item , Description description ) { description . appendText ( "cause " ) ; causeMatcher . describeMismatch ( item . getCause ( ) , description ) ; } @ Factory public static < T extends Throwable > Matcher < T > hasCause ( final Matcher < ? > matcher ) { return new ThrowableCauseMatcher < T > ( matcher ) ; } }