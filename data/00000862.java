public class UriUtil { public static Uri parseDefaultFile(String text) { if (EmptyUtils.isNullOrEmpty(text)) { return null; } Uri uri = Uri.parse(text); if (EmptyUtils.isNullOrEmpty(uri.getScheme())) { uri = uri.buildUpon().scheme("file").authority("").build(); } return uri; } public static Uri parseDefaultFile(Uri uri) { if (EmptyUtils.isNullOrEmpty(uri.getScheme())) { uri = uri.buildUpon().scheme("file").authority("").build(); } return uri; } public static boolean equalsDefaultfile(Uri left, String right) { if (left == null || right == null) { return false; } left = parseDefaultFile(left); Uri uriRight = parseDefaultFile(right); return left.equals(uriRight); } public static InputStream getUriInputStream(Context ctx, Uri uri) throws FileNotFoundException { if (uri == null) return null; String scheme = uri.getScheme(); if (EmptyUtils.isNullOrEmpty(scheme) || scheme.equals("file")) { return new FileInputStream(uri.getPath()); } else if (scheme.equals("content")) { return ctx.getContentResolver().openInputStream(uri); } else { return null; } } public static Uri translate(Context ctx, Uri uri) { if (StorageAF.useStorageFramework(ctx) || hasWritableContentUri(uri)) { return uri; } String scheme = uri.getScheme(); if (EmptyUtils.isNullOrEmpty(scheme)) { return uri; } String filepath = null; try { if (scheme.equalsIgnoreCase("content")) { Cursor cursor = ctx.getContentResolver().query(uri, new String[]{android.provider.MediaStore.Images.ImageColumns.DATA}, null, null, null); cursor.moveToFirst(); if (cursor != null) { filepath = cursor.getString(0); cursor.close(); if (!isValidFilePath(filepath)) { filepath = null; } } } if (EmptyUtils.isNullOrEmpty(filepath)) { filepath = uri.getEncodedPath(); if (!isValidFilePath(filepath)) { filepath = null; } } } catch (Exception e) { filepath = null; } if (!EmptyUtils.isNullOrEmpty(filepath)) { Uri.Builder b = new Uri.Builder(); uri = b.scheme("file").authority("").path(filepath).build(); } return uri; } private static boolean isValidFilePath(String filepath) { if (EmptyUtils.isNullOrEmpty(filepath)) { return false; } File file = new File(filepath); return file.exists() && file.canRead(); } private static boolean hasWritableContentUri(Uri uri) { String scheme = uri.getScheme(); if (EmptyUtils.isNullOrEmpty(scheme)) { return false; } if (!scheme.equalsIgnoreCase("content")) { return false; } switch (uri.getAuthority()) { case "com.google.android.apps.docs.storage": return true; } return false; } public static String getFileName(Uri uri, Context context) { String result = null; if (uri != null) { String scheme = uri.getScheme(); if (scheme != null && scheme.equals("content")) { try { Cursor cursor = context.getContentResolver().query(uri, null, null, null, null); try { if (cursor != null && cursor.moveToFirst()) { int index = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME); if (index >= 0) { result = cursor.getString(index); } } } finally { if (cursor != null) { cursor.close(); } } } catch (Exception e) { result = null; } } if (result == null) { result = uri.getPath(); if (result == null) { return null; } int cut = result.lastIndexOf('/'); if (cut != -1) { result = result.substring(cut + 1); } } } return result; } }