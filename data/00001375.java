public class RuleRegistry { private Map < String , ElementFactory > factories = new HashMap < > ( ) ; private Map < PlanPhase , LinkedList < Rule > > rules = new HashMap < > ( ) ; private String [ ] logLevels ; { for ( PlanPhase phase : PlanPhase . values ( ) ) rules . put ( phase , new LinkedList < Rule > ( ) ) ; } private boolean resolveElementsEnabled = true ; public void enableDebugLogging ( ) { logLevels = RuleLogUtil . enableDebugLogging ( ) ; } public void restoreLogging ( ) { if ( logLevels != null ) RuleLogUtil . restoreLogging ( logLevels ) ; } public boolean addDefaultElementFactory ( String name , ElementFactory elementFactory ) { if ( hasElementFactory ( name ) ) return false ; factories . put ( name , elementFactory ) ; return true ; } public ElementFactory addElementFactory ( String name , ElementFactory elementFactory ) { return factories . put ( name , elementFactory ) ; } public ElementFactory getElementFactory ( String factoryName ) { return factories . get ( factoryName ) ; } public boolean hasElementFactory ( String factoryName ) { return factories . containsKey ( factoryName ) ; } public LinkedList < Rule > getRulesFor ( PlanPhase phase ) { return rules . get ( phase ) ; } public boolean addRule ( Rule rule ) { if ( rule . getRulePhase ( ) == null ) throw new IllegalArgumentException ( "rule must have a rule phase : " + rule . getRuleName ( ) ) ; return rules . get ( rule . getRulePhase ( ) ) . add ( rule ) ; } public boolean hasRule ( String ruleName ) { for ( Map . Entry < PlanPhase , LinkedList < Rule > > entry : rules . entrySet ( ) ) { for ( Rule rule : entry . getValue ( ) ) { if ( rule . getRuleName ( ) . equals ( ruleName ) ) return true ; } } return false ; } public void setResolveElementsEnabled ( boolean resolveElementsEnabled ) { this . resolveElementsEnabled = resolveElementsEnabled ; } public boolean enabledResolveElements ( ) { return resolveElementsEnabled ; } public Set < ProcessLevel > getProcessLevels ( ) { Set < ProcessLevel > processLevels = new TreeSet < > ( ) ; for ( PlanPhase planPhase : rules . keySet ( ) ) { if ( !rules . get ( planPhase ) . isEmpty ( ) ) processLevels . add ( planPhase . getLevel ( ) ) ; } return processLevels ; } public String getName ( ) { return getClass ( ) . getSimpleName ( ) ; } @ Override public boolean equals ( Object object ) { if ( this == object ) return true ; if ( object == null || getClass ( ) != object . getClass ( ) ) return false ; RuleRegistry that = ( RuleRegistry ) object ; if ( resolveElementsEnabled != that . resolveElementsEnabled ) return false ; if ( factories != null ? !factories . equals ( that . factories ) : that . factories != null ) return false ; if ( rules != null ? !rules . equals ( that . rules ) : that . rules != null ) return false ; return true ; } @ Override public int hashCode ( ) { int result = factories != null ? factories . hashCode ( ) : 0 ; result = 31 * result + ( rules != null ? rules . hashCode ( ) : 0 ) ; result = 31 * result + ( resolveElementsEnabled ? 1 : 0 ) ; return result ; } }