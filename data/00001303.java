public class ProcessStepStats extends FlowStepStats { private final Map < String , Map < String , Long > > counters ; private final long lastFetch ; public ProcessStepStats ( ClientState clientState , Map < String , Map < String , Long > > counters , ProcessFlowStep step ) { super ( step , clientState ) ; this . counters = counters ; lastFetch = this . counters != null ? System . currentTimeMillis ( ) : -1 ; } @ Override public void recordChildStats ( ) { } @ Override public String getProcessStepID ( ) { return null ; } @ Override public long getLastSuccessfulCounterFetchTime ( ) { return lastFetch ; } @ Override public Collection < String > getCounterGroups ( ) { return counters . keySet ( ) ; } @ Override public Collection < String > getCountersFor ( String group ) { Map < String , Long > groupCollection = counters . get ( group ) ; if ( groupCollection == null ) return Collections . emptySet ( ) ; return groupCollection . keySet ( ) ; } @ Override public long getCounterValue ( Enum counter ) { Map < String , Long > counterMap = counters . get ( counter . getDeclaringClass ( ) . getName ( ) ) ; String counterString = counter . toString ( ) ; if ( counterMap == null || !counterMap . containsKey ( counterString ) ) return 0 ; return counterMap . get ( counterString ) ; } @ Override public long getCounterValue ( String group , String counter ) { Map < String , Long > counterMap = counters . get ( group ) ; if ( counterMap == null || !counterMap . containsKey ( counter ) ) return 0 ; return counterMap . get ( counter ) ; } @ Override public void captureDetail ( ) { } @ Override public void captureDetail ( Type depth ) { } @ Override public Collection < String > getCounterGroupsMatching ( String regex ) { Collection < String > counters = getCounterGroups ( ) ; Set < String > results = new HashSet < String > ( ) ; for ( String counter : counters ) { if ( counter . matches ( regex ) ) results . add ( counter ) ; } return Collections . unmodifiableCollection ( results ) ; } @ Override public Collection getChildren ( ) { return Collections . emptyList ( ) ; } }