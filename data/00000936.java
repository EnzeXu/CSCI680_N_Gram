public class GeoHashBoundingBoxQuery implements GeoHashQuery , Serializable { private static final long serialVersionUID = 9223256928940522683L ; private List < GeoHash > searchHashes = new ArrayList < > ( 8 ) ; private BoundingBox boundingBox ; public GeoHashBoundingBoxQuery ( BoundingBox bbox ) { if ( !bbox . intersects180Meridian ( ) ) { generateSearchHashes ( bbox ) ; } else { BoundingBox eastBox = new BoundingBox ( bbox . getSouthLatitude ( ) , bbox . getNorthLatitude ( ) , bbox . getWestLongitude ( ) , 180 ) ; BoundingBox westBox = new BoundingBox ( bbox . getSouthLatitude ( ) , bbox . getNorthLatitude ( ) , -180 , bbox . getEastLongitude ( ) ) ; generateSearchHashes ( eastBox ) ; generateSearchHashes ( westBox ) ; } for ( GeoHash hash : searchHashes ) { if ( boundingBox == null ) boundingBox = new BoundingBox ( hash . getBoundingBox ( ) ) ; else boundingBox . expandToInclude ( hash . getBoundingBox ( ) ) ; } for ( GeoHash hash : searchHashes ) { if ( hash . significantBits ( ) == 0 ) { searchHashes . clear ( ) ; searchHashes . add ( hash ) ; return ; } } List < GeoHash > toRemove = new ArrayList < GeoHash > ( searchHashes . size ( ) - 1 ) ; for ( GeoHash hash : searchHashes ) { for ( GeoHash hashToCompare : searchHashes ) { if ( hashToCompare . significantBits ( ) < hash . significantBits ( ) ) { long hashCopy = hash . longValue ( ) ; long hashCompareCopy = hashToCompare . longValue ( ) ; int equalBits = 0 ; while ( ( hashCompareCopy & GeoHash . FIRST_BIT_FLAGGED ) == ( hashCopy & GeoHash . FIRST_BIT_FLAGGED ) ) { hashCompareCopy < < = 1 ; hashCopy < < = 1 ; equalBits++ ; } if ( equalBits == hashToCompare . significantBits ( ) ) { toRemove . add ( hash ) ; break ; } } } } for ( GeoHash hash : toRemove ) { searchHashes . remove ( hash ) ; } } private void generateSearchHashes ( BoundingBox bbox ) { int fittingBits = GeoHashSizeTable . numberOfBitsForOverlappingGeoHash ( bbox ) ; WGS84Point center = bbox . getCenter ( ) ; GeoHash centerHash = GeoHash . withBitPrecision ( center . getLatitude ( ) , center . getLongitude ( ) , fittingBits ) ; if ( hashContainsBoundingBox ( centerHash , bbox ) ) { searchHashes . add ( centerHash ) ; } else { expandSearch ( centerHash , bbox ) ; } } private void expandSearch ( GeoHash centerHash , BoundingBox bbox ) { searchHashes . add ( centerHash ) ; for ( GeoHash adjacent : centerHash . getAdjacent ( ) ) { BoundingBox adjacentBox = adjacent . getBoundingBox ( ) ; if ( adjacentBox . intersects ( bbox ) && !searchHashes . contains ( adjacent ) ) { searchHashes . add ( adjacent ) ; } } } private boolean hashContainsBoundingBox ( GeoHash hash , BoundingBox bbox ) { return hash . contains ( bbox . getNorthWestCorner ( ) ) && hash . contains ( bbox . getSouthEastCorner ( ) ) ; } @ Override public boolean contains ( GeoHash hash ) { for ( GeoHash searchHash : searchHashes ) { if ( hash . within ( searchHash ) ) { return true ; } } return false ; } @ Override public boolean contains ( WGS84Point point ) { return contains ( GeoHash . withBitPrecision ( point . getLatitude ( ) , point . getLongitude ( ) , 64 ) ) ; } @ Override public List < GeoHash > getSearchHashes ( ) { return searchHashes ; } @ Override public String toString ( ) { StringBuilder bui = new StringBuilder ( ) ; for ( GeoHash hash : searchHashes ) { bui . append ( hash ) . append ( "\n" ) ; } return bui . toString ( ) ; } @ Override public String getWktBox ( ) { return "BOX ( " + boundingBox . getWestLongitude ( ) + " " + boundingBox . getSouthLatitude ( ) + " , " + boundingBox . getEastLongitude ( ) + " " + boundingBox . getNorthLatitude ( ) + " ) " ; } }