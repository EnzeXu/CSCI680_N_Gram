public class SetPassword extends RunnableOnFinish { private String mPassword ; private Uri mKeyfile ; private Database mDb ; private boolean mDontSave ; private Context ctx ; public SetPassword ( Context ctx , Database db , String password , Uri keyfile , OnFinish finish ) { this ( ctx , db , password , keyfile , finish , false ) ; } public SetPassword ( Context ctx , Database db , String password , Uri keyfile , OnFinish finish , boolean dontSave ) { super ( finish ) ; mDb = db ; mPassword = password ; mKeyfile = keyfile ; mDontSave = dontSave ; this . ctx = ctx ; } public boolean validatePassword ( Context ctx , DialogInterface . OnClickListener onclick ) { if ( !mDb . pm . validatePasswordEncoding ( mPassword ) ) { PasswordEncodingDialogHelper dialog = new PasswordEncodingDialogHelper ( ) ; dialog . show ( ctx , onclick , true ) ; return false ; } return true ; } @ Override public void run ( ) { PwDatabase pm = mDb . pm ; byte [ ] backupKey = new byte [ pm . masterKey . length ] ; System . arraycopy ( pm . masterKey , 0 , backupKey , 0 , backupKey . length ) ; try { InputStream is = UriUtil . getUriInputStream ( ctx , mKeyfile ) ; pm . setMasterKey ( mPassword , is ) ; } catch ( InvalidKeyFileException e ) { erase ( backupKey ) ; finish ( false , e . getMessage ( ) ) ; return ; } catch ( IOException e ) { erase ( backupKey ) ; finish ( false , e . getMessage ( ) ) ; return ; } mFinish = new AfterSave ( backupKey , mFinish ) ; SaveDB save = new SaveDB ( ctx , mDb , mFinish , mDontSave ) ; save . run ( ) ; } private class AfterSave extends OnFinish { private byte [ ] mBackup ; public AfterSave ( byte [ ] backup , OnFinish finish ) { super ( finish ) ; mBackup = backup ; } @ Override public void run ( ) { if ( ! mSuccess ) { erase ( mDb . pm . masterKey ) ; mDb . pm . masterKey = mBackup ; } super . run ( ) ; } } private void erase ( byte [ ] array ) { if ( array == null ) return ; for ( int i = 0 ; i < array . length ; i++ ) { array [ i ] = 0 ; } } }