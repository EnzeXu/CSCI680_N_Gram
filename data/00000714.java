public class Database { private static final String TAG = Database . class . getName ( ) ; public Set < PwGroup > dirty = new HashSet < PwGroup > ( ) ; public PwDatabase pm ; public Uri mUri ; public SearchDbHelper searchHelper ; public boolean readOnly = false ; public boolean passwordEncodingError = false ; public DrawableFactory drawFactory = new DrawableFactory ( ) ; private boolean loaded = false ; public boolean Loaded ( ) { return loaded ; } public void setLoaded ( ) { loaded = true ; } public void LoadData ( Context ctx , InputStream is , String password , InputStream keyInputStream ) throws IOException , InvalidDBException { LoadData ( ctx , is , password , keyInputStream , new UpdateStatus ( ) , !Importer . DEBUG ) ; } public void LoadData ( Context ctx , Uri uri , String password , Uri keyfile ) throws IOException , FileNotFoundException , InvalidDBException { LoadData ( ctx , uri , password , keyfile , new UpdateStatus ( ) , !Importer . DEBUG ) ; } public void LoadData ( Context ctx , Uri uri , String password , Uri keyfile , UpdateStatus status ) throws IOException , FileNotFoundException , InvalidDBException { LoadData ( ctx , uri , password , keyfile , status , !Importer . DEBUG ) ; } public void LoadData ( Context ctx , Uri uri , String password , Uri keyfile , UpdateStatus status , boolean debug ) throws IOException , FileNotFoundException , InvalidDBException { mUri = uri ; readOnly = false ; if ( uri . getScheme ( ) . equals ( "file" ) ) { File file = new File ( uri . getPath ( ) ) ; readOnly = !file . canWrite ( ) ; } try { passUrisAsInputStreams ( ctx , uri , password , keyfile , status , debug , 0 ) ; } catch ( InvalidPasswordException e ) { try { passUrisAsInputStreams ( ctx , uri , password , keyfile , status , debug , getFixRounds ( ctx ) ) ; } catch ( Exception e2 ) { throw e ; } } } private long getFixRounds ( Context ctx ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( ctx ) ; return prefs . getLong ( ctx . getString ( R . string . roundsFix_key ) , ctx . getResources ( ) . getInteger ( R . integer . roundsFix_default ) ) ; } private void passUrisAsInputStreams ( Context ctx , Uri uri , String password , Uri keyfile , UpdateStatus status , boolean debug , long roundsFix ) throws IOException , FileNotFoundException , InvalidDBException { InputStream is , kfIs ; try { is = UriUtil . getUriInputStream ( ctx , uri ) ; } catch ( Exception e ) { Log . e ( "KPD" , "Database : : LoadData" , e ) ; throw ContentFileNotFoundException . getInstance ( uri ) ; } try { kfIs = UriUtil . getUriInputStream ( ctx , keyfile ) ; } catch ( Exception e ) { Log . e ( "KPD" , "Database : : LoadData" , e ) ; throw ContentFileNotFoundException . getInstance ( keyfile ) ; } LoadData ( ctx , is , password , kfIs , status , debug , roundsFix ) ; } public void LoadData ( Context ctx , InputStream is , String password , InputStream kfIs , boolean debug ) throws IOException , InvalidDBException { LoadData ( ctx , is , password , kfIs , new UpdateStatus ( ) , debug ) ; } public void LoadData ( Context ctx , InputStream is , String password , InputStream kfIs , UpdateStatus status , boolean debug ) throws IOException , InvalidDBException { LoadData ( ctx , is , password , kfIs , status , debug , 0 ) ; } public void LoadData ( Context ctx , InputStream is , String password , InputStream kfIs , UpdateStatus status , boolean debug , long roundsFix ) throws IOException , InvalidDBException { BufferedInputStream bis = new BufferedInputStream ( is ) ; if ( ! bis . markSupported ( ) ) { throw new IOException ( "Input stream does not support mark . " ) ; } bis . mark ( 10 ) ; Importer imp = ImporterFactory . createImporter ( bis , ctx . getFilesDir ( ) , debug ) ; bis . reset ( ) ; pm = imp . openDatabase ( bis , password , kfIs , status , roundsFix ) ; if ( pm != null ) { PwGroup root = pm . rootGroup ; pm . populateGlobals ( root ) ; LoadData ( ctx , pm , password , kfIs , status ) ; } loaded = true ; } public void LoadData ( Context ctx , PwDatabase pm , String password , InputStream keyInputStream , UpdateStatus status ) { if ( pm != null ) { passwordEncodingError = !pm . validatePasswordEncoding ( password ) ; } searchHelper = new SearchDbHelper ( ctx ) ; loaded = true ; } public PwGroup Search ( String str ) { if ( searchHelper == null ) { return null ; } return searchHelper . search ( this , str ) ; } public void SaveData ( Context ctx ) throws IOException , FileUriException , PwDbOutputException { SaveData ( ctx , mUri ) ; } public void SaveData ( Context ctx , Uri uri ) throws IOException , FileUriException , PwDbOutputException { if ( uri . getScheme ( ) . equals ( "file" ) ) { String filename = uri . getPath ( ) ; File tempFile = new File ( filename + " . tmp" ) ; try { saveFile ( tempFile ) ; File orig = new File ( filename ) ; if ( !tempFile . renameTo ( orig ) ) { throw new IOException ( "Failed to store database . " ) ; } } catch ( IOException e ) { try { File db = new File ( filename ) ; saveFile ( db ) ; } catch ( IOException retryException ) { throw new FileUriException ( retryException ) ; } } } else { OutputStream os ; try { os = ctx . getContentResolver ( ) . openOutputStream ( uri , "rwt" ) ; } catch ( Exception e ) { throw new IOException ( "Failed to store database . " ) ; } if ( os == null ) { throw new IOException ( "Failed to store database . " ) ; } PwDbOutput pmo = PwDbOutput . getInstance ( pm , os ) ; pmo . output ( ) ; os . close ( ) ; } mUri = uri ; } private void saveFile ( File db ) throws IOException , PwDbOutputException { FileOutputStream fos = new FileOutputStream ( db ) ; PwDbOutput pmo = PwDbOutput . getInstance ( pm , fos ) ; pmo . output ( ) ; fos . close ( ) ; try { fos . getFD ( ) . sync ( ) ; } catch ( SyncFailedException e ) { } } public void clear ( Context context ) { dirty . clear ( ) ; drawFactory . clear ( ) ; if ( pm != null ) pm . clearCache ( ) ; try { FileUtils . cleanDirectory ( context . getFilesDir ( ) ) ; } catch ( IOException e ) { Log . e ( TAG , "Unable to clear the directory cache . " , e ) ; } pm = null ; mUri = null ; loaded = false ; passwordEncodingError = false ; } public void markAllGroupsAsDirty ( ) { for ( PwGroup group : pm . getGroups ( ) ) { dirty . add ( group ) ; } if ( pm instanceof PwDatabaseV3 ) { dirty . add ( pm . rootGroup ) ; } } }