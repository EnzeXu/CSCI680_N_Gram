public class Timeout { private static final int REQUEST_ID = 0 ; private static final long DEFAULT_TIMEOUT = 5 * 60 * 1000 ; private static String TAG = "KeePass Timeout" ; private static PendingIntent buildIntent ( Context ctx ) { Intent intent = new Intent ( Intents . TIMEOUT ) ; intent . setPackage ( "com . android . keepass" ) ; int flags = PendingIntent . FLAG_CANCEL_CURRENT ; if ( Build . VERSION . SDK_INT > = 23 ) { flags |= PendingIntent . FLAG_IMMUTABLE ; } PendingIntent sender = PendingIntent . getBroadcast ( ctx , REQUEST_ID , intent , flags ) ; return sender ; } public static void start ( Context ctx ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( ctx ) ; String sTimeout = prefs . getString ( ctx . getString ( R . string . app_timeout_key ) , ctx . getString ( R . string . clipboard_timeout_default ) ) ; long timeout ; try { timeout = Long . parseLong ( sTimeout ) ; } catch ( NumberFormatException e ) { timeout = DEFAULT_TIMEOUT ; } if ( timeout == -1 ) { return ; } long triggerTime = System . currentTimeMillis ( ) + timeout ; AlarmManager am = ( AlarmManager ) ctx . getSystemService ( Context . ALARM_SERVICE ) ; Log . d ( TAG , "Timeout start" ) ; am . set ( AlarmManager . RTC , triggerTime , buildIntent ( ctx ) ) ; } public static void cancel ( Context ctx ) { AlarmManager am = ( AlarmManager ) ctx . getSystemService ( Context . ALARM_SERVICE ) ; Log . d ( TAG , "Timeout cancel" ) ; am . cancel ( buildIntent ( ctx ) ) ; } }