public class SumDoubleNestedAggregate<Node> extends BaseNumberNestedAggregate<Node, Double, BaseNumberNestedAggregate.BaseContext<Double, Node>> { public static class Context<Node> extends BaseContext<Double, Node> { double sum = 0D; public Context( BaseNumberNestedAggregate<Node, Double, BaseContext<Double, Node>> aggregateFunction, CoercibleType<Node> coercibleType ) { super( aggregateFunction, coercibleType ); } @Override protected void aggregateFilteredValue( Double value ) { if( value == null ) return; sum += value; } @Override protected void completeAggregateValue( Tuple results ) { results.set( 0, sum ); } @Override public void reset() { sum = 0D; super.reset(); } } @ConstructorProperties({"declaredFields"}) public SumDoubleNestedAggregate( Fields declaredFields ) { super( declaredFields, Double.TYPE ); } @Override public Context<Node> createContext( CoercibleType<Node> nestedCoercibleType ) { return new Context<>( this, nestedCoercibleType ); } }