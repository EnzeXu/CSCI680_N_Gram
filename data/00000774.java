public class DeleteGroup extends RunnableOnFinish { private Database mDb; private PwGroup mGroup; private GroupBaseActivity mAct; private boolean mDontSave; public DeleteGroup(Database db, PwGroup group, GroupBaseActivity act, OnFinish finish) { super(finish); setMembers(db, group, act, false); } public DeleteGroup(Database db, PwGroup group, GroupBaseActivity act, OnFinish finish, boolean dontSave) { super(finish); setMembers(db, group, act, dontSave); } public DeleteGroup(Database db, PwGroup group, OnFinish finish, boolean dontSave) { super(finish); setMembers(db, group, null, dontSave); } private void setMembers(Database db, PwGroup group, GroupBaseActivity act, boolean dontSave) { mDb = db; mGroup = group; mAct = act; mDontSave = dontSave; mFinish = new AfterDelete(mFinish); } @Override public void run() { List<PwEntry> childEnt = new ArrayList<PwEntry>(mGroup.childEntries); for ( int i = 0; i < childEnt.size(); i++ ) { DeleteEntry task = new DeleteEntry(mAct, mDb, childEnt.get(i), null, true); task.run(); } List<PwGroup> childGrp = new ArrayList<PwGroup>(mGroup.childGroups); for ( int i = 0; i < childGrp.size(); i++ ) { DeleteGroup task = new DeleteGroup(mDb, childGrp.get(i), mAct, null, true); task.run(); } PwGroup parent = mGroup.getParent(); if ( parent != null ) { parent.childGroups.remove(mGroup); } mDb.pm.getGroups().remove(mGroup); SaveDB save = new SaveDB(mAct, mDb, mFinish, mDontSave); save.run(); } private class AfterDelete extends OnFinish { public AfterDelete(OnFinish finish) { super(finish); } public void run() { if ( mSuccess ) { mDb.pm.groups.remove(mGroup.getId()); mDb.dirty.remove(mGroup); PwGroup parent = mGroup.getParent(); if ( parent != null ) { mDb.dirty.add(parent); } mDb.dirty.add(mDb.pm.rootGroup); } else { App.setShutdown(); } super.run(); } } }