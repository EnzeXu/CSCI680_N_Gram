public class CheckScalaVersionVisitor implements DependencyNodeVisitor { private boolean _failed = false; private Log _log; private Context _scalaContext; private List<String> scalaDependentArtifactStrings = new ArrayList<>(); @Override public boolean endVisit(DependencyNode node) { return !_failed; } public CheckScalaVersionVisitor(Context scalaContext, Log log) { this._scalaContext = scalaContext; this._log = log; } @Override public boolean visit(DependencyNode node) { Artifact artifact = node.getArtifact(); _log.debug("checking [" + artifact + "] for scala version"); try { if (_scalaContext.hasInDistro(artifact) && artifact.getVersion() != null) { VersionNumber originalVersion = new VersionNumber(artifact.getVersion()); if (_scalaContext.versionCompat().compareTo(originalVersion) != 0) { _failed = true; } if (node.getParent() != null) { final Artifact parentArtifact = node.getParent().getArtifact(); scalaDependentArtifactStrings.add( " " + StringUtil.makeArtifactNameString(parentArtifact) + " requires scala version: " + originalVersion); } } else { } } catch (Exception exc) { _log.warn(exc); } return !_failed; } public boolean isFailed() { return _failed; } public void logScalaDependents() { _log.warn(" Expected all dependencies to require Scala version: " + _scalaContext.version()); for (String dependString : scalaDependentArtifactStrings) { _log.warn(dependString); } } }