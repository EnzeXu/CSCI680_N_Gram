public class Main { private String[] mInputFileNames; private String mOutputFormat = "xml"; private boolean mJustClasses = false; public static void main(String[] args) { Main main = new Main(); main.run(args); } void run(String[] args) { try { parseArgs(args); boolean first = true; for (String fileName : mInputFileNames) { if (first) { first = false; Output.generateFirstHeader(fileName, mOutputFormat); } else { Output.generateHeader(fileName, mOutputFormat); } List<RandomAccessFile> rafs = openInputFiles(fileName); for (RandomAccessFile raf : rafs) { DexData dexData = new DexData(raf); dexData.load(); Output.generate(dexData, mOutputFormat, mJustClasses); raf.close(); } Output.generateFooter(mOutputFormat); } } catch (UsageException ue) { usage(); System.exit(2); } catch (IOException ioe) { if (ioe.getMessage() != null) { System.err.println("Failed: " + ioe); } System.exit(1); } catch (DexDataException dde) { System.exit(1); } } List<RandomAccessFile> openInputFiles(String fileName) throws IOException { List<RandomAccessFile> rafs = openInputFileAsZip(fileName); if (rafs == null) { File inputFile = new File(fileName); RandomAccessFile raf = new RandomAccessFile(inputFile, "r"); rafs = Collections.singletonList(raf); } return rafs; } List<RandomAccessFile> openInputFileAsZip(String fileName) throws IOException { ZipFile zipFile; try { zipFile = new ZipFile(fileName); } catch (FileNotFoundException fnfe) { System.err.println("Unable to open '" + fileName + "': " + fnfe.getMessage()); throw fnfe; } catch (ZipException ze) { return null; } List<RandomAccessFile> result = new ArrayList<RandomAccessFile>(); try { int classesDexNumber = 1; while (true) { result.add(openClassesDexZipFileEntry(zipFile, classesDexNumber)); classesDexNumber++; } } catch (IOException ioe) { if (result.isEmpty()) { throw ioe; } return result; } } RandomAccessFile openClassesDexZipFileEntry(ZipFile zipFile, int classesDexNumber) throws IOException { String zipEntryName = ("classes" + (classesDexNumber == 1 ? "" : classesDexNumber) + ".dex"); ZipEntry entry = zipFile.getEntry(zipEntryName); if (entry == null) { zipFile.close(); throw new ZipException("Unable to find '" + zipEntryName + "' in '" + zipFile.getName() + "'"); } InputStream zis = zipFile.getInputStream(entry); File tempFile = File.createTempFile("dexdeps", ".dex"); RandomAccessFile raf = new RandomAccessFile(tempFile, "rw"); tempFile.delete(); byte copyBuf[] = new byte[32768]; int actual; while (true) { actual = zis.read(copyBuf); if (actual == -1) break; raf.write(copyBuf, 0, actual); } zis.close(); raf.seek(0); return raf; } void parseArgs(String[] args) { int idx; for (idx = 0; idx < args.length; idx++) { String arg = args[idx]; if (arg.equals("--") || !arg.startsWith("--")) { break; } else if (arg.startsWith("--format=")) { mOutputFormat = arg.substring(arg.indexOf('=') + 1); if (!mOutputFormat.equals("brief") && !mOutputFormat.equals("xml")) { System.err.println("Unknown format '" + mOutputFormat +"'"); throw new UsageException(); } } else if (arg.equals("--just-classes")) { mJustClasses = true; } else { System.err.println("Unknown option '" + arg + "'"); throw new UsageException(); } } int fileCount = args.length - idx; if (fileCount == 0) { throw new UsageException(); } mInputFileNames = new String[fileCount]; System.arraycopy(args, idx, mInputFileNames, 0, fileCount); } void usage() { System.err.print( "DEX dependency scanner v1.2\n" + "Copyright (C) 2009 The Android Open Source Project\n\n" + "Usage: dexdeps [options] <file.{dex,apk,jar}> ...\n" + "Options:\n" + " --format={xml,brief}\n" + " --just-classes\n"); } }