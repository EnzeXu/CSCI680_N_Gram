public class PubkeyListActivityTest { @ Rule public final ActivityTestRule < PubkeyListActivity > mActivityRule = new ActivityTestRule < > ( PubkeyListActivity . class , false , false ) ; @ Before public void makeDatabasePristine ( ) { Context testContext = getTargetContext ( ) ; PubkeyDatabase . resetInMemoryInstance ( testContext ) ; mActivityRule . launchActivity ( new Intent ( ) ) ; } @ Test public void generateRSAKey ( ) { onView ( withId ( R . id . add_new_key_icon ) ) . perform ( click ( ) ) ; KeyGenerationIdlingResource keyGenerationIdlingResource = new KeyGenerationIdlingResource ( ( ( GeneratePubkeyActivity ) getDisplayedActivityInstance ( ) ) ) ; onView ( withId ( R . id . nickname ) ) . perform ( typeText ( "test1" ) ) ; onView ( withId ( R . id . save ) ) . perform ( ScrollToAction . betterScrollTo ( ) , click ( ) ) ; onView ( withId ( R . id . entropy ) ) . perform ( fillEntropy ( ) ) ; IdlingPolicy masterPolicy = getMasterIdlingPolicy ( ) ; IdlingPolicy resourcePolicy = getDynamicIdlingResourceErrorPolicy ( ) ; try { setMasterPolicyTimeout ( 10 * 60 , TimeUnit . SECONDS ) ; setIdlingResourceTimeout ( 10 * 60 , TimeUnit . SECONDS ) ; registerIdlingResources ( keyGenerationIdlingResource ) ; Thread . sleep ( 5000 ) ; onView ( withId ( R . id . list ) ) . check ( hasHolderItem ( withPubkeyNickname ( "test1" ) ) ) ; } catch ( InterruptedException e ) { System . err . println ( "*** Error while scrolling up : " ) ; System . err . println ( "--- BEGIN STACK TRACE ---" ) ; e . printStackTrace ( ) ; System . err . println ( "--- END STACK TRACE ---" ) ; } finally { setMasterPolicyTimeout ( masterPolicy . getIdleTimeout ( ) , masterPolicy . getIdleTimeoutUnit ( ) ) ; setIdlingResourceTimeout ( resourcePolicy . getIdleTimeout ( ) , resourcePolicy . getIdleTimeoutUnit ( ) ) ; } } public Activity getDisplayedActivityInstance ( ) { final Activity [ ] currentActivity = new Activity [ 1 ] ; getInstrumentation ( ) . runOnMainSync ( new Runnable ( ) { @ Override public void run ( ) { Collection < Activity > resumedActivities = ActivityLifecycleMonitorRegistry . getInstance ( ) . getActivitiesInStage ( RESUMED ) ; if ( resumedActivities . iterator ( ) . hasNext ( ) ) { currentActivity [ 0 ] = resumedActivities . iterator ( ) . next ( ) ; } } } ) ; return currentActivity [ 0 ] ; } private ViewAction fillEntropy ( ) { return new ViewAction ( ) { @ Override public Matcher < View > getConstraints ( ) { return allOf ( isDisplayed ( ) , isAssignableFrom ( EntropyView . class ) ) ; } @ Override public String getDescription ( ) { return "Dismisses the 'Gathering entropy . . . ' dialog" ; } @ Override public void perform ( final UiController uiController , final View view ) { ( ( EntropyView ) view ) . notifyListeners ( ) ; } } ; } private static class KeyGenerationIdlingResource implements IdlingResource , OnKeyGeneratedListener { private boolean isIdle ; private ResourceCallback callback ; public KeyGenerationIdlingResource ( GeneratePubkeyActivity activity ) { isIdle = false ; activity . setListener ( this ) ; } @ Override public String getName ( ) { return "Key Generator Idling Resource" ; } @ Override public boolean isIdleNow ( ) { return isIdle ; } @ Override public void registerIdleTransitionCallback ( ResourceCallback callback ) { this . callback = callback ; } @ Override public void onGenerationError ( Exception e ) { isIdle = true ; if ( callback != null ) { callback . onTransitionToIdle ( ) ; } } @ Override public void onGenerationSuccess ( KeyPair keyPair ) { isIdle = true ; if ( callback != null ) { callback . onTransitionToIdle ( ) ; } } } }