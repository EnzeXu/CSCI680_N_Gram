public class ScalaDocMojo extends ScalaSourceMojoSupport implements MavenReport { @ Parameter ( property = "doctitle" , defaultValue = "$ { project . name } $ { project . version } API" ) private String doctitle ; @ Parameter ( defaultValue = "scaladocs" , required = true ) private String outputDirectory ; @ Parameter ( defaultValue = "$ { project . reporting . outputDirectory } /scaladocs" , required = true ) File reportOutputDirectory ; @ Parameter ( property = "name" , defaultValue = "ScalaDocs" ) private String name ; @ Parameter ( property = "description" , defaultValue = "ScalaDoc API documentation . " ) private String description ; @ Parameter ( property = "maven . scaladoc . className" ) private String scaladocClassName ; @ Parameter ( defaultValue = "$ { project . build . sourceDirectory } / . . /scala" ) private File sourceDir ; private List < File > _sourceFiles ; @ Override protected List < File > getSourceDirectories ( ) throws Exception { List < String > sources = project . getCompileSourceRoots ( ) ; String scalaSourceDir = FileUtils . pathOf ( sourceDir , useCanonicalPath ) ; if ( !sources . contains ( scalaSourceDir ) ) { sources . add ( scalaSourceDir ) ; } return normalize ( sources ) ; } @ Override public boolean canGenerateReport ( ) { return findSourceFiles ( ) . size ( ) != 0 ; } private List < File > findSourceFiles ( ) { if ( _sourceFiles == null ) { try { _sourceFiles = findSourceWithFilters ( ) ; } catch ( Exception exc ) { throw new RuntimeException ( "can't define source to process" , exc ) ; } } return _sourceFiles ; } @ Override public boolean isExternalReport ( ) { return true ; } @ Override public String getCategoryName ( ) { return CATEGORY_PROJECT_REPORTS ; } @ Override public String getDescription ( Locale locale ) { if ( StringUtils . isEmpty ( description ) ) { return "ScalaDoc API documentation" ; } return description ; } @ Override public String getName ( Locale locale ) { if ( StringUtils . isEmpty ( name ) ) { return "ScalaDocs" ; } return name ; } @ Override public String getOutputName ( ) { return outputDirectory + "/index" ; } @ Override public File getReportOutputDirectory ( ) { if ( reportOutputDirectory == null ) { reportOutputDirectory = new File ( project . getBasedir ( ) , project . getModel ( ) . getReporting ( ) . getOutputDirectory ( ) + "/" + outputDirectory ) . getAbsoluteFile ( ) ; } return reportOutputDirectory ; } @ Override public void setReportOutputDirectory ( File v ) { if ( v != null && outputDirectory != null && !v . getAbsolutePath ( ) . endsWith ( outputDirectory ) ) { this . reportOutputDirectory = new File ( v , outputDirectory ) ; } else { this . reportOutputDirectory = v ; } } @ Override public void doExecute ( ) throws Exception { generate ( null , Locale . getDefault ( ) ) ; } protected JavaMainCaller getScalaCommand ( ) throws Exception { checkScalaVersion ( ) ; Context sc = findScalaContext ( ) ; JavaMainCaller jcmd = getEmptyScalaCommand ( sc . apidocMainClassName ( scaladocClassName ) ) ; jcmd . addArgs ( args ) ; jcmd . addJvmArgs ( jvmArgs ) ; addCompilerPluginOptions ( jcmd ) ; Set < File > paths = new TreeSet < > ( ) ; for ( String s : project . getCompileClasspathElements ( ) ) { paths . add ( new File ( s ) ) ; } paths . remove ( new File ( project . getBuild ( ) . getOutputDirectory ( ) ) ) ; addAdditionalDependencies ( paths ) ; if ( !paths . isEmpty ( ) ) jcmd . addOption ( "-classpath" , FileUtils . toMultiPath ( paths ) ) ; jcmd . addArgs ( "-doc-format : html" ) ; jcmd . addOption ( "-doc-title" , doctitle ) ; return jcmd ; } @ Override public void generate ( Sink sink , Locale locale ) throws MavenReportException { try { if ( !canGenerateReport ( ) ) { getLog ( ) . info ( "No source files found" ) ; return ; } File reportOutputDir = getReportOutputDirectory ( ) ; if ( !reportOutputDir . exists ( ) ) { reportOutputDir . mkdirs ( ) ; } List < File > sources = findSourceFiles ( ) ; if ( sources . size ( ) > 0 ) { JavaMainCaller jcmd = getScalaCommand ( ) ; jcmd . addOption ( "-d" , reportOutputDir . getAbsolutePath ( ) ) ; for ( File x : sources ) { jcmd . addArgs ( FileUtils . pathOf ( x , useCanonicalPath ) ) ; } jcmd . run ( displayCmd ) ; } } catch ( MavenReportException | RuntimeException exc ) { throw exc ; } catch ( Exception exc ) { throw new MavenReportException ( "wrap : " + exc . getMessage ( ) , exc ) ; } } }