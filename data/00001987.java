public class MeasuredRecordReader implements RecordReader { private final FlowProcess flowProcess; private final Enum counter; private RecordReader recordReader; public MeasuredRecordReader( FlowProcess flowProcess, Enum counter ) { this.flowProcess = flowProcess; this.counter = counter; } public RecordReader getRecordReader() { return recordReader; } public void setRecordReader( RecordReader recordReader ) { this.recordReader = recordReader; } @Override public boolean next( Object key, Object value ) throws IOException { long start = System.currentTimeMillis(); try { return recordReader.next( key, value ); } finally { flowProcess.increment( counter, System.currentTimeMillis() - start ); } } @Override public Object createKey() { long start = System.currentTimeMillis(); try { return recordReader.createKey(); } finally { flowProcess.increment( counter, System.currentTimeMillis() - start ); } } @Override public Object createValue() { long start = System.currentTimeMillis(); try { return recordReader.createValue(); } finally { flowProcess.increment( counter, System.currentTimeMillis() - start ); } } @Override public long getPos() throws IOException { return recordReader.getPos(); } @Override public void close() throws IOException { long start = System.currentTimeMillis(); try { recordReader.close(); } finally { flowProcess.increment( counter, System.currentTimeMillis() - start ); } } @Override public float getProgress() throws IOException { long start = System.currentTimeMillis(); try { return recordReader.getProgress(); } finally { flowProcess.increment( counter, System.currentTimeMillis() - start ); } } }