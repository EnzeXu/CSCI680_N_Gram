public class DelimitedPartition implements Partition { public static final String PATH_DELIM = "/" ; final Fields partitionFields ; final String delimiter ; final String postfix ; int numSplits ; transient Pattern pattern ; public DelimitedPartition ( Fields partitionFields ) { this ( partitionFields , null , null ) ; } public DelimitedPartition ( Fields partitionFields , String delimiter ) { this ( partitionFields , delimiter , null ) ; } public DelimitedPartition ( Fields partitionFields , String delimiter , String postfix ) { if ( partitionFields == null ) throw new IllegalArgumentException ( "partitionFields must not be null" ) ; if ( !partitionFields . isDefined ( ) ) throw new IllegalArgumentException ( "partitionFields must be defined , got : " + partitionFields . printVerbose ( ) ) ; this . partitionFields = partitionFields ; this . delimiter = delimiter == null ? PATH_DELIM : delimiter ; postfix = Util . isEmpty ( postfix ) ? null : postfix . startsWith ( this . delimiter ) ? postfix . substring ( this . delimiter . length ( ) ) : postfix ; this . numSplits = partitionFields . size ( ) + ( postfix != null ? postfix . split ( this . delimiter ) . length : 0 ) ; this . postfix = postfix == null ? null : delimiter + postfix ; } @ Override public int getPathDepth ( ) { return numSplits ; } @ Override public Fields getPartitionFields ( ) { return partitionFields ; } protected Pattern getPattern ( ) { if ( pattern == null ) pattern = Pattern . compile ( delimiter ) ; return pattern ; } public String getDelimiter ( ) { return delimiter ; } public String getPostfix ( ) { return postfix ; } @ Override public void toTuple ( String partition , TupleEntry tupleEntry ) { if ( partition . startsWith ( delimiter ) ) partition = partition . substring ( 1 ) ; parsePartitionInto ( partition , partitionFields , numSplits , tupleEntry ) ; } protected void parsePartitionInto ( String partition , Fields partitionFields , int numSplits , TupleEntry tupleEntry ) { String [ ] split = getPattern ( ) . split ( partition , numSplits ) ; tupleEntry . setCanonicalValues ( split , 0 , partitionFields . size ( ) ) ; } @ Override public String toPartition ( TupleEntry tupleEntry ) { String partition = formatPartitionWith ( tupleEntry , delimiter ) ; if ( postfix != null ) partition = partition + postfix ; return partition ; } protected String formatPartitionWith ( TupleEntry tupleEntry , String delimiter ) { return Util . join ( tupleEntry . asIterableOf ( String . class ) , delimiter , true ) ; } }