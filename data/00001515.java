public class ExpressionFunction extends ExpressionOperation implements Function < ScriptOperation . Context > { @ ConstructorProperties ( { "fieldDeclaration" , "expression" } ) public ExpressionFunction ( Fields fieldDeclaration , String expression ) { super ( fieldDeclaration , expression ) ; verify ( fieldDeclaration ) ; } @ ConstructorProperties ( { "fieldDeclaration" , "expression" , "parameterType" } ) public ExpressionFunction ( Fields fieldDeclaration , String expression , Class parameterType ) { super ( fieldDeclaration , expression , parameterType ) ; verify ( fieldDeclaration ) ; } @ ConstructorProperties ( { "fieldDeclaration" , "expression" , "parameterNames" , "parameterTypes" } ) public ExpressionFunction ( Fields fieldDeclaration , String expression , String [ ] parameterNames , Class [ ] parameterTypes ) { super ( fieldDeclaration , expression , parameterNames , parameterTypes ) ; verify ( fieldDeclaration ) ; } private void verify ( Fields fieldDeclaration ) { if ( !fieldDeclaration . isSubstitution ( ) && fieldDeclaration . size ( ) != 1 ) throw new IllegalArgumentException ( "fieldDeclaration may only declare one field , was " + fieldDeclaration . print ( ) ) ; } @ Override public void operate ( FlowProcess flowProcess , FunctionCall < ExpressionOperation . Context > functionCall ) { functionCall . getContext ( ) . result . set ( 0 , evaluate ( functionCall . getContext ( ) , functionCall . getArguments ( ) ) ) ; functionCall . getOutputCollector ( ) . add ( functionCall . getContext ( ) . result ) ; } }