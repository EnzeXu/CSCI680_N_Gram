public class ShutdownUtil { public static final String SHUTDOWN_EXECUTING = "cascading.jvm.shutdown.executing"; public static final String SHUTDOWN_FORCE_NON_DAEMON = "cascading.jvm.shutdown.non-daemon"; private static final Logger LOG = LoggerFactory.getLogger( ShutdownUtil.class ); public static abstract class Hook { public enum Priority { FIRST, WORK_PARENT, WORK_CHILD, SERVICE_CONSUMER, SERVICE_PROVIDER, LAST } public abstract Priority priority(); public abstract void execute(); } private static Queue<Hook> queue = new PriorityBlockingQueue<>( 20, new Comparator<Hook>() { @Override public int compare( Hook lhs, Hook rhs ) { if( lhs == rhs ) return 0; if( lhs == null ) return -1; else if( rhs == null ) return 1; return lhs.priority().compareTo( rhs.priority() ); } } ); private static Thread shutdownHook; public static void addHook( Hook hook ) { if( hook == null ) throw new IllegalArgumentException( "hook may not be null" ); registerShutdownHook(); queue.add( hook ); } public static boolean removeHook( Hook hook ) { return queue.remove( hook ); } public static synchronized void registerShutdownHook() { if( shutdownHook != null ) return; final boolean isForceNonDaemon = Boolean.getBoolean( SHUTDOWN_FORCE_NON_DAEMON ); shutdownHook = new Thread( "cascading shutdown hooks" ) { { if( isForceNonDaemon ) this.setDaemon( false ); } @Override public void run() { System.setProperty( SHUTDOWN_EXECUTING, "true" ); try { while( !queue.isEmpty() ) { Hook hook = null; try { hook = queue.poll(); if( hook == null ) continue; hook.execute(); } catch( Exception exception ) { LOG.error( "failed executing hook: {}, with exception: {}", hook, exception.getMessage() ); LOG.debug( "with exception trace", exception ); } } } finally { System.setProperty( SHUTDOWN_EXECUTING, "false" ); } } }; Runtime.getRuntime().addShutdownHook( shutdownHook ); } public static void deregisterShutdownHook() { Runtime.getRuntime().removeShutdownHook( shutdownHook ); } }