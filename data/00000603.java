public class ExpectedException implements TestRule { @Deprecated public static ExpectedException none() { return new ExpectedException(); } private final ExpectedExceptionMatcherBuilder matcherBuilder = new ExpectedExceptionMatcherBuilder(); private String missingExceptionMessage= "Expected test to throw %s"; private ExpectedException() { } @Deprecated public ExpectedException handleAssertionErrors() { return this; } @Deprecated public ExpectedException handleAssumptionViolatedExceptions() { return this; } public ExpectedException reportMissingExceptionWithMessage(String message) { missingExceptionMessage = message; return this; } public Statement apply(Statement base, org.junit.runner.Description description) { return new ExpectedExceptionStatement(base); } public void expect(Matcher<?> matcher) { matcherBuilder.add(matcher); } public void expect(Class<? extends Throwable> type) { expect(instanceOf(type)); } public void expectMessage(String substring) { expectMessage(containsString(substring)); } public void expectMessage(Matcher<String> matcher) { expect(hasMessage(matcher)); } public void expectCause(Matcher<?> expectedCause) { expect(hasCause(expectedCause)); } public final boolean isAnyExceptionExpected() { return matcherBuilder.expectsThrowable(); } private class ExpectedExceptionStatement extends Statement { private final Statement next; public ExpectedExceptionStatement(Statement base) { next = base; } @Override public void evaluate() throws Throwable { try { next.evaluate(); } catch (Throwable e) { handleException(e); return; } if (isAnyExceptionExpected()) { failDueToMissingException(); } } } private void handleException(Throwable e) throws Throwable { if (isAnyExceptionExpected()) { MatcherAssert.assertThat(e, matcherBuilder.build()); } else { throw e; } } private void failDueToMissingException() throws AssertionError { fail(missingExceptionMessage()); } private String missingExceptionMessage() { String expectation= StringDescription.toString(matcherBuilder.build()); return format(missingExceptionMessage, expectation); } }