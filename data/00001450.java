public class SparseTupleComparator implements Comparator < Tuple > { private final static Comparator DEFAULT = new NaturalComparator ( ) ; private static class NaturalComparator implements Comparator < Object > { @ Override public int compare ( Object lhs , Object rhs ) { if ( lhs == null && rhs == null ) return 0 ; else if ( lhs == null ) return -1 ; else if ( rhs == null ) return 1 ; else return ( ( Comparable ) lhs ) . compareTo ( rhs ) ; } } final Comparator [ ] comparators ; final int [ ] posMap ; public SparseTupleComparator ( Fields valuesField , Fields sortFields ) { this ( valuesField , sortFields , null ) ; } public SparseTupleComparator ( Fields groupFields , Comparator defaultComparator ) { this ( groupFields , groupFields , defaultComparator ) ; } public SparseTupleComparator ( Fields valuesFields , Fields sortFields , Comparator defaultComparator ) { if ( defaultComparator == null ) defaultComparator = DEFAULT ; int size = valuesFields != null && !valuesFields . isUnknown ( ) ? valuesFields . size ( ) : sortFields . size ( ) ; comparators = new Comparator [ size ] ; posMap = new int [ size ] ; Comparator [ ] sortFieldComparators = sortFields . getComparators ( ) ; for ( int i = 0 ; i < sortFields . size ( ) ; i++ ) { Comparable field = sortFields . get ( i ) ; int pos = valuesFields != null ? valuesFields . getPos ( field ) : i ; comparators [ i ] = sortFieldComparators [ i ] ; posMap [ i ] = pos ; if ( comparators [ i ] == null ) comparators [ i ] = defaultComparator ; } } public Comparator [ ] getComparators ( ) { return comparators ; } @ Override public int compare ( Tuple lhs , Tuple rhs ) { for ( int i = 0 ; i < comparators . length ; i++ ) { Comparator comparator = comparators [ i ] ; if ( comparator == null ) continue ; int pos = posMap [ i ] ; int c = comparator . compare ( lhs . getObject ( pos ) , rhs . getObject ( pos ) ) ; if ( c != 0 ) return c ; } return 0 ; } }