public class Neo4jTap extends Tap < Properties , Void , Session > { public static final String NEO_4_J_USERNAME = "neo4j . username" ; public static final String NEO_4_J_PASSWORD = "neo4j . password" ; private final Properties defaultProperties ; private final URI identifier ; public Neo4jTap ( Properties defaultProperties , Neo4jScheme scheme , URI identifier ) { super ( scheme , SinkMode . UPDATE ) ; this . defaultProperties = new Properties ( defaultProperties ) ; this . identifier = identifier ; } protected Driver getDriver ( FlowProcess < ? extends Properties > flowProcess ) { AuthToken authTokens = AuthTokens . none ( ) ; String user = flowProcess . getStringProperty ( NEO_4_J_USERNAME , defaultProperties . getProperty ( NEO_4_J_USERNAME , System . getenv ( "NEO4J_USER" ) ) ) ; String password = flowProcess . getStringProperty ( NEO_4_J_PASSWORD , defaultProperties . getProperty ( NEO_4_J_PASSWORD , System . getenv ( "NEO4J_PASSWORD" ) ) ) ; if ( user != null ) authTokens = AuthTokens . basic ( user , password ) ; return GraphDatabase . driver ( getIdentifier ( ) , authTokens ) ; } @ Override public String getIdentifier ( ) { return identifier . toString ( ) ; } @ Override public TupleEntryIterator openForRead ( FlowProcess < ? extends Properties > flowProcess , Void aVoid ) throws IOException { return null ; } @ Override public TupleEntryCollector openForWrite ( FlowProcess < ? extends Properties > flowProcess , Session session ) throws IOException { if ( session == null ) session = getDriver ( flowProcess ) . session ( ) ; return new TupleEntrySchemeCollector < > ( flowProcess , this , getScheme ( ) , session , getIdentifier ( ) ) ; } @ Override public boolean createResource ( Properties conf ) throws IOException { return true ; } @ Override public boolean deleteResource ( Properties conf ) throws IOException { return true ; } @ Override public boolean resourceExists ( Properties conf ) throws IOException { return true ; } @ Override public long getModifiedTime ( Properties conf ) throws IOException { return 0 ; } }