public class SampleFilterTest extends CascadingTestCase { private ConcreteCall operationCall; public SampleFilterTest() { super(); } @Override public void setUp() throws Exception { super.setUp(); operationCall = new ConcreteCall(); } private TupleEntry getEntry( Tuple tuple ) { return new TupleEntry( Fields.size( tuple.size() ), tuple ); } @Test public void testSample() { for( double i = 0; i < 1; i = i + .01 ) performSampleTest( i, 100000 ); } private void performSampleTest( double sample, int values ) { Filter filter = new Sample( sample ); int count = 0; filter.prepare( null, operationCall ); operationCall.setArguments( getEntry( new Tuple( 1 ) ) ); for( int j = 0; j < values; j++ ) { if( !filter.isRemove( null, operationCall ) ) count++; } String message = String.format( "sample:%f values:%d", sample, values ); assertEquals( message, sample, (double) count / values, 1 ); } }