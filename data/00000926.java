public class BoundingBox implements Serializable { private static final long serialVersionUID = -7145192134410261076L ; private double southLatitude ; private double northLatitude ; private double westLongitude ; private double eastLongitude ; private boolean intersects180Meridian ; public BoundingBox ( WGS84Point southWestCorner , WGS84Point northEastCorner ) { this ( southWestCorner . getLatitude ( ) , northEastCorner . getLatitude ( ) , southWestCorner . getLongitude ( ) , northEastCorner . getLongitude ( ) ) ; } public BoundingBox ( double southLatitude , double northLatitude , double westLongitude , double eastLongitude ) { if ( southLatitude > northLatitude ) throw new IllegalArgumentException ( "The southLatitude must not be greater than the northLatitude" ) ; if ( Math . abs ( southLatitude ) > 90 || Math . abs ( northLatitude ) > 90 || Math . abs ( westLongitude ) > 180 || Math . abs ( eastLongitude ) > 180 ) { throw new IllegalArgumentException ( "The supplied coordinates are out of range . " ) ; } this . northLatitude = northLatitude ; this . westLongitude = westLongitude ; this . southLatitude = southLatitude ; this . eastLongitude = eastLongitude ; intersects180Meridian = eastLongitude < westLongitude ; } public BoundingBox ( BoundingBox that ) { this ( that . southLatitude , that . northLatitude , that . westLongitude , that . eastLongitude ) ; } public WGS84Point getNorthWestCorner ( ) { return new WGS84Point ( northLatitude , westLongitude ) ; } public WGS84Point getNorthEastCorner ( ) { return new WGS84Point ( northLatitude , eastLongitude ) ; } public WGS84Point getSouthEastCorner ( ) { return new WGS84Point ( southLatitude , eastLongitude ) ; } public WGS84Point getSouthWestCorner ( ) { return new WGS84Point ( southLatitude , westLongitude ) ; } public double getLatitudeSize ( ) { return northLatitude - southLatitude ; } public double getLongitudeSize ( ) { if ( eastLongitude == 180 . 0 && westLongitude == -180 . 0 ) return 360 . 0 ; double size = ( eastLongitude - westLongitude ) % 360 ; if ( size < 0 ) size += 360 . 0 ; return size ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj instanceof BoundingBox ) { BoundingBox that = ( BoundingBox ) obj ; return southLatitude == that . southLatitude && westLongitude == that . westLongitude && northLatitude == that . northLatitude && eastLongitude == that . eastLongitude ; } else { return false ; } } @ Override public int hashCode ( ) { int result = 17 ; result = 37 * result + hashCode ( southLatitude ) ; result = 37 * result + hashCode ( northLatitude ) ; result = 37 * result + hashCode ( westLongitude ) ; result = 37 * result + hashCode ( eastLongitude ) ; return result ; } private static int hashCode ( double x ) { long f = Double . doubleToLongBits ( x ) ; return ( int ) ( f ^ ( f > > > 32 ) ) ; } public boolean contains ( WGS84Point point ) { return containsLatitude ( point . getLatitude ( ) ) && containsLongitude ( point . getLongitude ( ) ) ; } public boolean intersects ( BoundingBox other ) { if ( other . southLatitude > northLatitude || other . northLatitude < southLatitude ) { return false ; } else { if ( !intersects180Meridian && !other . intersects180Meridian ) { return ! ( other . eastLongitude < westLongitude || other . westLongitude > eastLongitude ) ; } else if ( intersects180Meridian && !other . intersects180Meridian ) { return ! ( eastLongitude < other . westLongitude && westLongitude > other . eastLongitude ) ; } else if ( !intersects180Meridian && other . intersects180Meridian ) { return ! ( westLongitude > other . eastLongitude && eastLongitude < other . westLongitude ) ; } else return true ; } } @ Override public String toString ( ) { return getNorthWestCorner ( ) + " - > " + getSouthEastCorner ( ) ; } public WGS84Point getCenter ( ) { double centerLatitude = ( southLatitude + northLatitude ) / 2 ; double centerLongitude = ( westLongitude + eastLongitude ) / 2 ; if ( centerLongitude > 180 ) centerLongitude -= 360 ; return new WGS84Point ( centerLatitude , centerLongitude ) ; } public void expandToInclude ( WGS84Point point ) { if ( point . getLatitude ( ) < southLatitude ) southLatitude = point . getLatitude ( ) ; else if ( point . getLatitude ( ) > northLatitude ) northLatitude = point . getLatitude ( ) ; if ( containsLongitude ( point . getLongitude ( ) ) ) return ; double distanceEastToPoint = DoubleUtil . remainderWithFix ( point . getLongitude ( ) - eastLongitude , 360 ) ; double distancePointToWest = DoubleUtil . remainderWithFix ( westLongitude - point . getLongitude ( ) , 360 ) ; if ( distanceEastToPoint < = distancePointToWest ) eastLongitude = point . getLongitude ( ) ; else westLongitude = point . getLongitude ( ) ; intersects180Meridian = eastLongitude < westLongitude ; } public void expandToInclude ( BoundingBox other ) { if ( other . southLatitude < southLatitude ) { southLatitude = other . southLatitude ; } if ( other . northLatitude > northLatitude ) { northLatitude = other . northLatitude ; } boolean thisContainsOther = containsLongitude ( other . eastLongitude ) && containsLongitude ( other . westLongitude ) ; boolean otherContainsThis = other . containsLongitude ( eastLongitude ) && other . containsLongitude ( westLongitude ) ; if ( thisContainsOther && otherContainsThis ) { eastLongitude = 180 . 0 ; westLongitude = -180 . 0 ; intersects180Meridian = false ; return ; } if ( thisContainsOther ) return ; if ( otherContainsThis ) { eastLongitude = other . eastLongitude ; westLongitude = other . westLongitude ; intersects180Meridian = eastLongitude < westLongitude ; return ; } double distanceEastToOtherEast = DoubleUtil . remainderWithFix ( other . eastLongitude - eastLongitude , 360 ) ; double distanceOtherWestToWest = DoubleUtil . remainderWithFix ( westLongitude - other . westLongitude , 360 ) ; if ( distanceEastToOtherEast < = distanceOtherWestToWest ) { eastLongitude = other . eastLongitude ; } else { westLongitude = other . westLongitude ; } intersects180Meridian = eastLongitude < westLongitude ; } private boolean containsLatitude ( double latitude ) { return latitude > = southLatitude && latitude < = northLatitude ; } private boolean containsLongitude ( double longitude ) { if ( intersects180Meridian ) { return longitude < = eastLongitude || longitude > = westLongitude ; } else { return longitude > = westLongitude && longitude < = eastLongitude ; } } public double getEastLongitude ( ) { return eastLongitude ; } public double getWestLongitude ( ) { return westLongitude ; } public double getNorthLatitude ( ) { return northLatitude ; } public double getSouthLatitude ( ) { return southLatitude ; } public boolean intersects180Meridian ( ) { return intersects180Meridian ; } }