public class TupleStream { @SuppressWarnings("unchecked") public static Stream<Tuple> tupleStream( Tap tap, FlowProcess flowProcess ) { Objects.requireNonNull( tap ); return tap.tupleStream( flowProcess ); } @SuppressWarnings("unchecked") public static Stream<Tuple> tupleStreamCopy( Tap tap, FlowProcess flowProcess ) { Objects.requireNonNull( tap ); return tap.tupleStreamCopy( flowProcess ); } @SuppressWarnings("unchecked") public static Stream<Tuple> tupleStream( Tap tap, FlowProcess flowProcess, Fields selector ) { Objects.requireNonNull( tap ); Objects.requireNonNull( selector ); return tap.tupleStream( flowProcess, selector ); } @SuppressWarnings("unchecked") public static Stream<Tuple> tupleStreamCopy( Tap tap, FlowProcess flowProcess, Fields selector ) { Objects.requireNonNull( tap ); Objects.requireNonNull( selector ); return tap.tupleStreamCopy( flowProcess, selector ); } @SuppressWarnings("unchecked") public static <R> Function<Tuple, ? extends R> posToObject( int pos ) { return value -> (R) value.getObject( pos ); } public static ToIntFunction<Tuple> posToInt( int pos ) { return value -> value.getInteger( pos ); } public static ToLongFunction<Tuple> posToLong( int pos ) { return value -> value.getLong( pos ); } public static ToDoubleFunction<Tuple> posToDouble( int pos ) { return value -> value.getDouble( pos ); } public static Tap writeTuple( Stream<Tuple> stream, Supplier<Tap> into, FlowProcess flowProcess ) { return writeTuple( stream, into.get(), flowProcess ); } @SuppressWarnings("unchecked") public static Tap writeTuple( Stream<Tuple> stream, Tap into, FlowProcess flowProcess ) { Objects.requireNonNull( into ); Objects.requireNonNull( stream ); try { TupleEntryCollector collector = into.openForWrite( flowProcess ); stream.forEach( collector::add ); collector.close(); } catch( IOException exception ) { throw new UncheckedIOException( exception ); } return into; } public static Tap writeInt( IntStream stream, Supplier<Tap> into, FlowProcess flowProcess ) { return writeInt( stream, into.get(), flowProcess ); } @SuppressWarnings("unchecked") public static Tap writeInt( IntStream stream, Tap into, FlowProcess flowProcess ) { Objects.requireNonNull( into ); Objects.requireNonNull( stream ); Tuple tuple = Tuple.size( 1 ); try { TupleEntryCollector collector = into.openForWrite( flowProcess ); stream.forEach( i -> collector.add( reset( tuple, i ) ) ); collector.close(); } catch( IOException exception ) { throw new UncheckedIOException( exception ); } return into; } public static Tap writeLong( LongStream stream, Supplier<Tap> into, FlowProcess flowProcess ) { return writeLong( stream, into.get(), flowProcess ); } @SuppressWarnings("unchecked") public static Tap writeLong( LongStream stream, Tap into, FlowProcess flowProcess ) { Objects.requireNonNull( into ); Objects.requireNonNull( stream ); Tuple tuple = Tuple.size( 1 ); try { TupleEntryCollector collector = into.openForWrite( flowProcess ); stream.forEach( i -> collector.add( reset( tuple, i ) ) ); collector.close(); } catch( IOException exception ) { throw new UncheckedIOException( exception ); } return into; } public static Tap writeDouble( DoubleStream stream, Supplier<Tap> into, FlowProcess flowProcess ) { return writeDouble( stream, into.get(), flowProcess ); } @SuppressWarnings("unchecked") public static Tap writeDouble( DoubleStream stream, Tap into, FlowProcess flowProcess ) { Objects.requireNonNull( into ); Objects.requireNonNull( stream ); Tuple tuple = Tuple.size( 1 ); try { TupleEntryCollector collector = into.openForWrite( flowProcess ); stream.forEach( i -> collector.add( reset( tuple, i ) ) ); collector.close(); } catch( IOException exception ) { throw new UncheckedIOException( exception ); } return into; } private static Tuple reset( Tuple tuple, Object value ) { tuple.set( 0, value ); return tuple; } }