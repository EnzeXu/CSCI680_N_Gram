public class ContractedTransformer extends RecursiveGraphTransformer<ElementGraph> { public ContractedTransformer( ExpressionGraph expression ) { super( expression ); } @Override public Transformed<ElementGraph> transform( PlannerContext plannerContext, ElementGraph rootGraph ) { return super.transform( plannerContext, new ElementMultiGraph( rootGraph ) ); } @Override protected boolean transformGraphInPlaceUsing( Transformed<ElementGraph> transformed, ElementGraph graph, Match match ) { Set<FlowElement> remove = match.getCapturedElements( ElementCapture.Primary ); if( remove.isEmpty() ) return false; for( FlowElement flowElement : remove ) ElementGraphs.removeAndContract( graph, flowElement ); return true; } }