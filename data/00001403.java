public class LogUtil { public static String[] setLog4jLevel( String[] contexts, String level ) { String[] results = new String[ contexts.length ]; for( int i = 0; i < contexts.length; i++ ) results[ i ] = setLog4jLevel( contexts[ i ], level ); return results; } public static String[] setLog4jLevel( String[] contexts, String[] levels ) { String[] results = new String[ contexts.length ]; for( int i = 0; i < contexts.length; i++ ) results[ i ] = setLog4jLevel( contexts[ i ], levels[ i ] ); return results; } public static void setLog4jLevel( String[] logger ) { setLog4jLevel( logger[ 0 ], logger[ 1 ] ); } public static String setLog4jLevel( String logger, String level ) { Object loggerObject = Util.invokeStaticMethod( "org.apache.log4j.Logger", "getLogger", new Object[]{logger}, new Class[]{String.class} ); Object levelObject = null; if( level != null ) levelObject = Util.invokeStaticMethod( "org.apache.log4j.Level", "toLevel", new Object[]{level}, new Class[]{String.class} ); Object oldLevel = Util.invokeInstanceMethod( loggerObject, "getLevel", new Object[]{}, new Class[]{} ); Util.invokeInstanceMethod( loggerObject, "setLevel", new Object[]{levelObject}, new Class[]{Util.loadClass( "org.apache.log4j.Level" )} ); if( oldLevel == null ) return null; return oldLevel.toString(); } public static void logMemory( Logger logger, String message ) { Runtime runtime = Runtime.getRuntime(); long freeMem = runtime.freeMemory() / 1024 / 1024; long maxMem = runtime.maxMemory() / 1024 / 1024; long totalMem = runtime.totalMemory() / 1024 / 1024; logger.info( message + " (mb), free: " + freeMem + ", total: " + totalMem + ", max: " + maxMem ); } public static void logCounters( Logger logger, String message, FlowProcess flowProcess ) { String counters = flowProcess.getStringProperty( FlowRuntimeProps.LOG_COUNTERS ); if( counters == null ) return; String[] split = counters.split( "," ); for( String value : split ) { String counter[] = value.split( ":" ); logger.info( "{} {}.{}={}", message, counter[ 0 ], counter[ 1 ], flowProcess.getCounterValue( counter[ 0 ], counter[ 1 ] ) ); } } static Set<String> cache = new HashSet<>(); public static void logWarnOnce( Logger log, String message, Object arg ) { if( cache.add( log.getName() + message ) ) log.warn( message, arg ); } }