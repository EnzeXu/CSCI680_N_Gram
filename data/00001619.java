public class PartitionTapTest extends CascadingTestCase { @ Test public void testPartitionTap ( ) throws IOException { String comment = "improved" ; long ts = System . currentTimeMillis ( ) ; getDuration ( 100 ) ; int runs = 4 ; int [ ] sizes = new int [ ] { 1 , 10 , 100 , 1000 , 10000 } ; long [ ] [ ] durations = new long [ sizes . length ] [ runs ] ; for ( int run = 0 ; run < runs ; run++ ) { for ( int i = 0 ; i < sizes . length ; i++ ) durations [ i ] [ run ] = getDuration ( sizes [ i ] ) ; } for ( int i = 0 ; i < durations . length ; i++ ) { long [ ] duration = durations [ i ] ; DescriptiveStatistics stats = new DescriptiveStatistics ( ) ; for ( long value : duration ) stats . addValue ( value ) ; String string = String . format ( "%s , %d , %d , %f\n" , comment , ts , sizes [ i ] , stats . getMean ( ) ) ; System . out . print ( string ) ; } } public long getDuration ( int size ) { long start = System . currentTimeMillis ( ) ; createPartitionTap ( size ) . sourceConfInit ( new HadoopFlowProcess ( new JobConf ( ) ) , new JobConf ( ) ) ; return System . currentTimeMillis ( ) - start ; } protected PartitionTap createPartitionTap ( int size ) { final String path = "some/path/that/is/particularly/long/and/unwieldy/" ; final String [ ] values = new String [ size ] ; for ( int i = 0 ; i < values . length ; i++ ) values [ i ] = path + i ; return new PartitionTap ( new Hfs ( new TextDelimited ( new Fields ( "foo" ) , " , " ) , path ) , new DelimitedPartition ( new Fields ( "foo" ) ) ) { @ Override public String [ ] getChildPartitionIdentifiers ( FlowProcess < ? extends Configuration > flowProcess , boolean fullyQualified ) throws IOException { return values ; } } ; } }