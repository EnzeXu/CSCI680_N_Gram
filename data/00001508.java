public class FlowElements { public static String id( FlowElement flowElement ) { if( flowElement instanceof Pipe ) return Pipe.id( (Pipe) flowElement ); if( flowElement instanceof Tap ) return Tap.id( (Tap) flowElement ); String id = Util.returnInstanceFieldIfExistsSafe( flowElement, "id" ); if( id != null ) return id; throw new IllegalArgumentException( "id not supported for: " + flowElement.getClass().getCanonicalName() ); } public static int isPrevious( Pipe pipe, Pipe previous ) { if( pipe == previous ) return 0; if( pipe instanceof SubAssembly ) { Pipe[] unwind = SubAssembly.unwind( pipe ); for( Pipe unwound : unwind ) { int result = collectPipes( unwound, 0, previous ); if( result != -1 ) return result; } return -1; } return collectPipes( pipe, 0, previous ); } private static int collectPipes( Pipe pipe, int depth, Pipe... allPrevious ) { depth++; for( Pipe previous : allPrevious ) { if( pipe == previous ) return depth; int result; if( previous instanceof SubAssembly ) result = collectPipes( pipe, depth, SubAssembly.unwind( previous ) ); else result = collectPipes( pipe, depth, previous.getPrevious() ); if( result != -1 ) return result; } return -1; } public static Integer findOrdinal( Pipe pipe, Pipe previous ) { Pipe[] previousPipes = pipe.getPrevious(); TreeMap<Integer, Integer> sorted = new TreeMap<>(); for( int i = 0; i < previousPipes.length; i++ ) { int result = isPrevious( previousPipes[ i ], (Pipe) previous ); if( result == -1 ) continue; sorted.put( result, i ); } return sorted.firstEntry().getValue(); } }