public class RG implements PConstants { private static boolean initialized = false ; private static PApplet parent ; public static boolean ignoreStyles = false ; public static boolean useFastClip = true ; public final static int BYPOINT = 0 ; public final static int BYELEMENTPOSITION = 1 ; public final static int BYELEMENTINDEX = 2 ; static int adaptorType = BYELEMENTPOSITION ; static float adaptorScale = 1F ; static float adaptorLengthOffset = 0F ; public static int ADAPTATIVE = RCommand . ADAPTATIVE ; public static int UNIFORMLENGTH = RCommand . UNIFORMLENGTH ; public static int UNIFORMSTEP = RCommand . UNIFORMSTEP ; static int dpi = 72 ; public static class LibraryNotInitializedException extends NullPointerException { private static final long serialVersionUID = -3710605630786298671L ; LibraryNotInitializedException ( ) { super ( "Must call RG . init ( this ) ; before using this library . " ) ; } } public static class FontNotLoadedException extends NullPointerException { private static final long serialVersionUID = -3710605630786298672L ; FontNotLoadedException ( ) { super ( "Use RG . loadFont ( filename ) and RG . textFont ( font , size ) to load and set fonts first . " ) ; } } public static class NoPathInitializedException extends NullPointerException { private static final long serialVersionUID = -3710605630786298673L ; NoPathInitializedException ( ) { super ( "Must initialize a path by calling RG . beginShape ( ) first . " ) ; } } static RShape shape ; static RFont fntLoader = null ; public static RFont loadFont ( String fontFile ) { RFont newFntLoader = new RFont ( fontFile ) ; if ( fntLoader == null ) fntLoader = newFntLoader ; return newFntLoader ; } public static void text ( String text ) { RShape grp = getText ( text ) ; grp . draw ( ) ; } public static void textFont ( RFont font , int size ) { font . setSize ( size ) ; fntLoader = font ; } public static RShape getText ( String text , String font , int size , int align ) { RFont tempFntLoader = new RFont ( font , size , align ) ; return tempFntLoader . toShape ( text ) ; } public static RShape getText ( String text ) { if ( fntLoader == null ) { throw new FontNotLoadedException ( ) ; } return fntLoader . toShape ( text ) ; } public static void shape ( RShape shp , float x , float y , float w , float h ) { RShape tshp = new RShape ( shp ) ; RMatrix transf = new RMatrix ( ) ; transf . translate ( x , y ) ; transf . scale ( w / tshp . getOrigWidth ( ) , h/ tshp . getOrigHeight ( ) ) ; tshp . transform ( transf ) ; tshp . draw ( ) ; } public static void shape ( RShape shp , float x , float y ) { RShape tshp = new RShape ( shp ) ; RMatrix transf = new RMatrix ( ) ; transf . translate ( x , y ) ; tshp . transform ( transf ) ; tshp . draw ( ) ; } public static void shape ( RShape shp ) { shp . draw ( ) ; } public static RShape createShape ( RPoint [ ] [ ] points ) { return new RShape ( points ) ; } public static RShape loadShape ( String filename ) { RSVG svgLoader = new RSVG ( ) ; return svgLoader . toShape ( filename ) ; } public static void saveShape ( String filename , RShape shape ) { RSVG svgSaver = new RSVG ( ) ; String str = svgSaver . fromShape ( shape ) ; String [ ] strs = PApplet . split ( str , "\n" ) ; RG . parent ( ) . saveStrings ( filename , strs ) ; } public static void beginShape ( ) { shape = new RShape ( ) ; } public static void breakShape ( int endMode ) { if ( endMode == CLOSE ) { shape . addClose ( ) ; } shape . updateOrigParams ( ) ; breakShape ( ) ; } public static void breakShape ( ) { shape . addPath ( ) ; } public static void vertex ( float x , float y ) { if ( shape . countPaths ( ) == 0 ) { shape . addMoveTo ( x , y ) ; } else { shape . addLineTo ( x , y ) ; } } public static void bezierVertex ( float cx1 , float cy1 , float cx2 , float cy2 , float x , float y ) { if ( shape . countPaths ( ) == 0 ) { throw new NoPathInitializedException ( ) ; } else { shape . addBezierTo ( cx1 , cy1 , cx2 , cy2 , x , y ) ; } } public static void endShape ( PGraphics g ) { shape . draw ( g ) ; shape = null ; } public static void endShape ( ) { shape . draw ( ) ; shape = null ; } public static RShape getShape ( ) { RShape returningGroup = new RShape ( ) ; returningGroup . addChild ( shape ) ; shape = null ; returningGroup . updateOrigParams ( ) ; return returningGroup ; } public static RShape getEllipse ( float x , float y , float w , float h ) { return RShape . createEllipse ( x , y , w , h ) ; } public static RShape getEllipse ( float x , float y , float w ) { return getEllipse ( x , y , w , w ) ; } public static RShape getLine ( float x1 , float y1 , float x2 , float y2 ) { return RShape . createLine ( x1 , y1 , x2 , y2 ) ; } public static RShape getRect ( float x , float y , float w , float h ) { return RShape . createRectangle ( x , y , w , h ) ; } public static RShape getRect ( float x , float y , float w ) { return getRect ( x , y , w , w ) ; } public static RShape getStar ( float x , float y , float widthBig , float widthSmall , int spikes ) { return RShape . createStar ( x , y , widthBig , widthSmall , spikes ) ; } public static RShape getRing ( float x , float y , float widthBig , float widthSmall ) { return RShape . createRing ( x , y , widthBig , widthSmall ) ; } public static RShape centerIn ( RShape grp , PGraphics g , float margin ) { RShape ret = new RShape ( grp ) ; ret . centerIn ( g , margin ) ; return ret ; } public static RShape centerIn ( RShape grp , PGraphics g ) { return centerIn ( grp , g , 0 ) ; } public static RShape [ ] split ( RShape shp , float t ) { return shp . split ( t ) ; } public static RShape adapt ( RShape shp , RShape path ) { RShape ret = new RShape ( shp ) ; ret . adapt ( path ) ; return ret ; } public static RShape polygonize ( RShape shp ) { RShape ret = new RShape ( shp ) ; ret . polygonize ( ) ; return ret ; } public static void init ( PApplet _parent ) { parent = _parent ; initialized = true ; } public static boolean initialized ( ) { return initialized ; } protected static PApplet parent ( ) { if ( parent == null ) { throw new LibraryNotInitializedException ( ) ; } return parent ; } protected static int dpi ( ) { return dpi ; } public static void setDpi ( int _dpi ) { dpi = _dpi ; } public static RShape diff ( RShape a , RShape b ) { return a . diff ( b ) ; } public static RShape union ( RShape a , RShape b ) { return a . union ( b ) ; } public static RShape intersection ( RShape a , RShape b ) { return a . intersection ( b ) ; } public static RShape xor ( RShape a , RShape b ) { return a . xor ( b ) ; } public static void ignoreStyles ( boolean value ) { ignoreStyles = value ; } public static void ignoreStyles ( ) { ignoreStyles = true ; } public static void setAdaptor ( int adptorType ) { adaptorType = adptorType ; } public static void setAdaptorScale ( float adptorScale ) { adaptorScale = adptorScale ; } public static void setAdaptorLengthOffset ( float adptorLengthOffset ) throws RuntimeException { if ( adptorLengthOffset > =0F && adptorLengthOffset < =1F ) adaptorLengthOffset = adptorLengthOffset ; else throw new RuntimeException ( "The adaptor length offset must take a value between 0 and 1 . " ) ; } public static void setPolygonizer ( int segmenterMethod ) { RCommand . setSegmentator ( segmenterMethod ) ; } public static void setPolygonizerAngle ( float angle ) { RCommand . setSegmentAngle ( angle ) ; } public static void setPolygonizerLength ( float length ) { RCommand . setSegmentLength ( length ) ; } public static void setPolygonizerStep ( float step ) { RCommand . setSegmentStep ( step ) ; } }