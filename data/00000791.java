public class PwEntryOutputV3 { public static final byte [ ] UUID_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 1 ) ; public static final byte [ ] GROUPID_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 2 ) ; public static final byte [ ] IMAGEID_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 3 ) ; public static final byte [ ] TITLE_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 4 ) ; public static final byte [ ] URL_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 5 ) ; public static final byte [ ] USERNAME_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 6 ) ; public static final byte [ ] PASSWORD_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 7 ) ; public static final byte [ ] ADDITIONAL_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 8 ) ; public static final byte [ ] CREATE_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 9 ) ; public static final byte [ ] MOD_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 10 ) ; public static final byte [ ] ACCESS_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 11 ) ; public static final byte [ ] EXPIRE_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 12 ) ; public static final byte [ ] BINARY_DESC_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 13 ) ; public static final byte [ ] BINARY_DATA_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 14 ) ; public static final byte [ ] END_FIELD_TYPE = LEDataOutputStream . writeUShortBuf ( 0xFFFF ) ; public static final byte [ ] LONG_FOUR = LEDataOutputStream . writeIntBuf ( 4 ) ; public static final byte [ ] UUID_FIELD_SIZE = LEDataOutputStream . writeIntBuf ( 16 ) ; public static final byte [ ] DATE_FIELD_SIZE = LEDataOutputStream . writeIntBuf ( 5 ) ; public static final byte [ ] IMAGEID_FIELD_SIZE = LONG_FOUR ; public static final byte [ ] LEVEL_FIELD_SIZE = LONG_FOUR ; public static final byte [ ] FLAGS_FIELD_SIZE = LONG_FOUR ; public static final byte [ ] ZERO_FIELD_SIZE = LEDataOutputStream . writeIntBuf ( 0 ) ; public static final byte [ ] ZERO_FIVE = { 0x00 , 0x00 , 0x00 , 0x00 , 0x00 } ; public static final byte [ ] TEST = { 0x33 , 0x33 , 0x33 , 0x33 } ; private OutputStream mOS ; private PwEntryV3 mPE ; private long outputBytes = 0 ; public PwEntryOutputV3 ( PwEntryV3 pe , OutputStream os ) { mPE = pe ; mOS = os ; } public void output ( ) throws IOException { outputBytes += 134 ; mOS . write ( UUID_FIELD_TYPE ) ; mOS . write ( UUID_FIELD_SIZE ) ; mOS . write ( Types . UUIDtoBytes ( mPE . getUUID ( ) ) ) ; mOS . write ( GROUPID_FIELD_TYPE ) ; mOS . write ( LONG_FOUR ) ; mOS . write ( LEDataOutputStream . writeIntBuf ( mPE . groupId ) ) ; mOS . write ( IMAGEID_FIELD_TYPE ) ; mOS . write ( LONG_FOUR ) ; mOS . write ( LEDataOutputStream . writeIntBuf ( mPE . icon . iconId ) ) ; mOS . write ( TITLE_FIELD_TYPE ) ; int titleLen = Types . writeCString ( mPE . title , mOS ) ; outputBytes += titleLen ; mOS . write ( URL_FIELD_TYPE ) ; int urlLen = Types . writeCString ( mPE . url , mOS ) ; outputBytes += urlLen ; mOS . write ( USERNAME_FIELD_TYPE ) ; int userLen = Types . writeCString ( mPE . username , mOS ) ; outputBytes += userLen ; byte [ ] password = mPE . getPasswordBytes ( ) ; mOS . write ( PASSWORD_FIELD_TYPE ) ; mOS . write ( LEDataOutputStream . writeIntBuf ( password . length+1 ) ) ; mOS . write ( password ) ; mOS . write ( 0 ) ; outputBytes += password . length + 1 ; mOS . write ( ADDITIONAL_FIELD_TYPE ) ; int addlLen = Types . writeCString ( mPE . additional , mOS ) ; outputBytes += addlLen ; writeDate ( CREATE_FIELD_TYPE , mPE . tCreation . getCDate ( ) ) ; writeDate ( MOD_FIELD_TYPE , mPE . tLastMod . getCDate ( ) ) ; writeDate ( ACCESS_FIELD_TYPE , mPE . tLastAccess . getCDate ( ) ) ; writeDate ( EXPIRE_FIELD_TYPE , mPE . tExpire . getCDate ( ) ) ; mOS . write ( BINARY_DESC_FIELD_TYPE ) ; int descLen = Types . writeCString ( mPE . binaryDesc , mOS ) ; outputBytes += descLen ; int dataLen = writeByteArray ( mPE . getBinaryData ( ) ) ; outputBytes += dataLen ; mOS . write ( END_FIELD_TYPE ) ; mOS . write ( ZERO_FIELD_SIZE ) ; } private int writeByteArray ( byte [ ] data ) throws IOException { int dataLen ; if ( data != null ) { dataLen = data . length ; } else { dataLen = 0 ; } mOS . write ( BINARY_DATA_FIELD_TYPE ) ; mOS . write ( LEDataOutputStream . writeIntBuf ( dataLen ) ) ; if ( data != null ) { mOS . write ( data ) ; } return dataLen ; } private void writeDate ( byte [ ] type , byte [ ] date ) throws IOException { mOS . write ( type ) ; mOS . write ( DATE_FIELD_SIZE ) ; if ( date != null ) { mOS . write ( date ) ; } else { mOS . write ( ZERO_FIVE ) ; } } public long getLength ( ) { return outputBytes ; } }