public class SetValue extends BaseOperation implements Function { private final Filter filter; private Tuple[] values = new Tuple[]{new Tuple( true ), new Tuple( false )}; @ConstructorProperties({"fieldDeclaration", "filter"}) public SetValue( Fields fieldDeclaration, Filter filter ) { super( fieldDeclaration ); this.filter = filter; verify(); } @ConstructorProperties({"fieldDeclaration", "filter", "firstValue", "secondValue"}) public SetValue( Fields fieldDeclaration, Filter filter, Serializable firstValue, Serializable secondValue ) { super( fieldDeclaration ); this.filter = filter; this.values = new Tuple[]{new Tuple( firstValue ), new Tuple( secondValue )}; verify(); } @Property(name = "firstValue", visibility = Visibility.PRIVATE) public Serializable getFirstValue() { return (Serializable) values[ 0 ].getObject( 0 ); } @Property(name = "secondValue", visibility = Visibility.PRIVATE) public Serializable getSecondValue() { return (Serializable) values[ 1 ].getObject( 0 ); } private void verify() { if( fieldDeclaration.size() != 1 ) throw new IllegalArgumentException( "fieldDeclaration may only declare one field, was " + fieldDeclaration.print() ); if( filter == null ) throw new IllegalArgumentException( "filter may not be null" ); if( values == null || values.length != 2 ) throw new IllegalArgumentException( "values argument must contain two values" ); } @Override public void prepare( FlowProcess flowProcess, OperationCall operationCall ) { filter.prepare( flowProcess, operationCall ); } @Override public void operate( FlowProcess flowProcess, FunctionCall functionCall ) { boolean isRemove = !filter.isRemove( flowProcess, (FilterCall) functionCall ); int pos = isRemove ? 0 : 1; functionCall.getOutputCollector().add( values[ pos ] ); } @Override public void cleanup( FlowProcess flowProcess, OperationCall operationCall ) { filter.cleanup( flowProcess, operationCall ); } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof SetValue ) ) return false; if( !super.equals( object ) ) return false; SetValue setValue = (SetValue) object; if( filter != null ? !filter.equals( setValue.filter ) : setValue.filter != null ) return false; if( !Arrays.equals( values, setValue.values ) ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( filter != null ? filter.hashCode() : 0 ); result = 31 * result + ( values != null ? Arrays.hashCode( values ) : 0 ); return result; } }