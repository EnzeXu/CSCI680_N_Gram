public class RegexFilter extends RegexMatcher implements Filter<Matcher> { protected final boolean matchEachElement; @ConstructorProperties({"patternString"}) public RegexFilter( String patternString ) { super( patternString ); this.matchEachElement = false; } @ConstructorProperties({"patternString", "delimiter"}) public RegexFilter( String patternString, String delimiter ) { super( patternString, delimiter ); this.matchEachElement = false; } @ConstructorProperties({"patternString", "removeMatch"}) public RegexFilter( String patternString, boolean removeMatch ) { super( patternString, removeMatch ); this.matchEachElement = false; } @ConstructorProperties({"patternString", "removeMatch", "delimiter"}) public RegexFilter( String patternString, boolean removeMatch, String delimiter ) { super( patternString, removeMatch, delimiter ); this.matchEachElement = false; } @ConstructorProperties({"patternString", "removeMatch", "matchEachElement"}) public RegexFilter( String patternString, boolean removeMatch, boolean matchEachElement ) { super( patternString, removeMatch ); this.matchEachElement = matchEachElement; } @ConstructorProperties({"patternString", "removeMatch", "matchEachElement", "delimiter"}) public RegexFilter( String patternString, boolean removeMatch, boolean matchEachElement, String delimiter ) { super( patternString, removeMatch, delimiter ); this.matchEachElement = matchEachElement; } public boolean isMatchEachElement() { return matchEachElement; } @Override public boolean isRemove( FlowProcess flowProcess, FilterCall<Matcher> filterCall ) { if( matchEachElement ) return matchEachElement( filterCall.getContext(), filterCall.getArguments() ); else return matchWholeTuple( filterCall.getContext(), filterCall.getArguments() ); } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof RegexFilter ) ) return false; if( !super.equals( object ) ) return false; RegexFilter that = (RegexFilter) object; if( matchEachElement != that.matchEachElement ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( matchEachElement ? 1 : 0 ); return result; } }