public class CommittingRebalanceListener < K , V > extends ForwardingConsumerRebalanceListener { Consumer < K , V > consumer ; CommitListener commitListener ; Map < TopicPartition , OffsetAndMetadata > currentOffsets ; public CommittingRebalanceListener ( Consumer < K , V > consumer , CommitListener commitListener , Map < TopicPartition , OffsetAndMetadata > currentOffsets ) { this . consumer = consumer ; this . commitListener = commitListener ; this . currentOffsets = currentOffsets ; } public CommittingRebalanceListener ( ConsumerRebalanceListener listener , Consumer < K , V > consumer , CommitListener commitListener , Map < TopicPartition , OffsetAndMetadata > currentOffsets ) { super ( listener ) ; this . consumer = consumer ; this . commitListener = commitListener ; this . currentOffsets = currentOffsets ; } @ Override public void onPartitionsRevoked ( Collection < TopicPartition > collection ) { super . onPartitionsRevoked ( collection ) ; Map < TopicPartition , OffsetAndMetadata > revoked = new HashMap < > ( ) ; for ( TopicPartition topicPartition : collection ) { OffsetAndMetadata removed = currentOffsets . remove ( topicPartition ) ; if ( removed != null ) revoked . put ( topicPartition , removed ) ; } commitListener . onRevoke ( consumer , revoked ) ; try { consumer . commitSync ( revoked ) ; } catch ( RuntimeException exception ) { if ( commitListener . onFail ( consumer , exception , revoked ) ) throw exception ; currentOffsets . putAll ( revoked ) ; } } }