public class SumLongNestedAggregate < Node > extends BaseNumberNestedAggregate < Node , Long , BaseNumberNestedAggregate . BaseContext < Long , Node > > { public static class Context < Node > extends BaseContext < Long , Node > { long sum = 0L ; public Context ( SumLongNestedAggregate < Node > aggregateFunction , CoercibleType < Node > coercibleType ) { super ( aggregateFunction , coercibleType ) ; } @ Override protected void aggregateFilteredValue ( Long value ) { if ( value == null ) return ; sum += value ; } @ Override protected void completeAggregateValue ( Tuple results ) { results . set ( 0 , sum ) ; } @ Override public void reset ( ) { sum = 0L ; super . reset ( ) ; } } @ ConstructorProperties ( { "declaredFields" } ) public SumLongNestedAggregate ( Fields declaredFields ) { super ( declaredFields , Long . TYPE ) ; } @ Override public Context < Node > createContext ( CoercibleType < Node > nestedCoercibleType ) { return new Context < > ( this , nestedCoercibleType ) ; } }