public class ScalaContinuousTestMojo extends ScalaContinuousCompileMojo { @ Component private Invoker invoker ; @ Parameter ( property = "invoker . localRepositoryPath" , defaultValue = "$ { settings . localRepository } " ) private File localRepositoryPath ; @ Parameter ( property = "test" ) private String test ; @ Parameter ( property = "cctest . goals" , defaultValue = "surefire : test" ) private String ccTestGoals ; @ Override protected void postCompileActions ( ) throws Exception { if ( test == null ) { getLog ( ) . info ( "Now running all the unit tests . Use -Dtest=FooTest to run a single test by name" ) ; } else { getLog ( ) . info ( "Now running tests matching : " + test ) ; } final InvocationRequest request = new DefaultInvocationRequest ( ) ; request . setLocalRepositoryDirectory ( localRepositoryPath ) ; request . setBatchMode ( true ) ; request . setErrorHandler ( new SystemOutHandler ( true ) ) ; request . setOutputHandler ( new SystemOutHandler ( true ) ) ; request . setBaseDirectory ( project . getBasedir ( ) ) ; request . setPomFile ( new File ( project . getBasedir ( ) , "pom . xml" ) ) ; request . setGoals ( getMavenGoals ( ) ) ; request . setOffline ( false ) ; if ( test != null ) { Properties properties = new Properties ( ) ; properties . put ( "test" , test ) ; request . setProperties ( properties ) ; } if ( getLog ( ) . isDebugEnabled ( ) ) { try { getLog ( ) . debug ( "Executing : " + new MavenCommandLineBuilder ( ) . build ( request ) ) ; } catch ( CommandLineConfigurationException e ) { getLog ( ) . debug ( "Failed to display command line : " + e . getMessage ( ) ) ; } } try { invoker . execute ( request ) ; } catch ( final MavenInvocationException e ) { getLog ( ) . debug ( "Error invoking Maven : " + e . getMessage ( ) , e ) ; throw new BuildFailureException ( "Maven invocation failed . " + e . getMessage ( ) , e ) ; } } private List < String > getMavenGoals ( ) { getLog ( ) . debug ( "Running tests with goal ( s ) : " + ccTestGoals ) ; return Arrays . asList ( StringUtils . split ( ccTestGoals , " " ) ) ; } }