public class DateFormatter extends DateOperation implements Function<Pair<SimpleDateFormat, TupleEntry>> { public static final String FIELD_NAME = "datetime"; @ConstructorProperties({"dateFormatString"}) public DateFormatter( String dateFormatString ) { super( 1, new Fields( FIELD_NAME ), dateFormatString ); } @ConstructorProperties({"fieldDeclaration", "dateFormatString"}) public DateFormatter( Fields fieldDeclaration, String dateFormatString ) { super( 1, fieldDeclaration, dateFormatString ); } @ConstructorProperties({"fieldDeclaration", "dateFormatString", "zone"}) public DateFormatter( Fields fieldDeclaration, String dateFormatString, TimeZone zone ) { super( 1, fieldDeclaration, dateFormatString, zone, null ); } @ConstructorProperties({"fieldDeclaration", "dateFormatString", "zone", "locale"}) public DateFormatter( Fields fieldDeclaration, String dateFormatString, TimeZone zone, Locale locale ) { super( 1, fieldDeclaration, dateFormatString, zone, locale ); } @Override public void operate( FlowProcess flowProcess, FunctionCall<Pair<SimpleDateFormat, TupleEntry>> functionCall ) { long ts = functionCall.getArguments().getLong( 0 ); Calendar calendar = getCalendar(); calendar.setTimeInMillis( ts ); String formatted = functionCall.getContext().getLhs().format( calendar.getTime() ); functionCall.getContext().getRhs().setString( 0, formatted ); functionCall.getOutputCollector().add( functionCall.getContext().getRhs() ); } }