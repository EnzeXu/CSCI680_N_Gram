public class TestAggregator extends BaseOperation implements Aggregator { private static final long serialVersionUID = 1L ; private Tuple [ ] value ; private int duplicates = 1 ; private Fields groupFields ; public TestAggregator ( Fields fields , Tuple . . . value ) { super ( fields ) ; this . value = value ; } public TestAggregator ( Fields fields , Fields groupFields , Tuple . . . value ) { super ( fields ) ; this . groupFields = groupFields ; this . value = value ; } public TestAggregator ( Fields fieldDeclaration , Tuple value , int duplicates ) { super ( fieldDeclaration ) ; this . value = new Tuple [ ] { value } ; this . duplicates = duplicates ; } public TestAggregator ( Fields fieldDeclaration , Fields groupFields , Tuple value , int duplicates ) { super ( fieldDeclaration ) ; this . groupFields = groupFields ; this . value = new Tuple [ ] { value } ; this . duplicates = duplicates ; } public void start ( FlowProcess flowProcess , AggregatorCall aggregatorCall ) { if ( groupFields == null ) return ; if ( !groupFields . equals ( aggregatorCall . getGroup ( ) . getFields ( ) ) ) throw new RuntimeException ( "fields do not match : " + groupFields . print ( ) + " != " + aggregatorCall . getGroup ( ) . getFields ( ) . print ( ) ) ; } public void aggregate ( FlowProcess flowProcess , AggregatorCall aggregatorCall ) { } public void complete ( FlowProcess flowProcess , AggregatorCall aggregatorCall ) { TupleEntry result ; if ( aggregatorCall . getDeclaredFields ( ) . isUnknown ( ) ) result = new TupleEntry ( Fields . size ( value [ 0 ] . size ( ) ) , Tuple . size ( value [ 0 ] . size ( ) ) ) ; else result = new TupleEntry ( aggregatorCall . getDeclaredFields ( ) , Tuple . size ( aggregatorCall . getDeclaredFields ( ) . size ( ) ) ) ; for ( int i = 0 ; i < duplicates ; i++ ) { for ( Tuple tuple : value ) { try { result . setCanonicalTuple ( tuple ) ; } catch ( Exception exception ) { result . setCanonicalTuple ( Tuple . size ( value [ 0 ] . size ( ) , -99 ) ) ; } aggregatorCall . getOutputCollector ( ) . add ( result ) ; } } } }