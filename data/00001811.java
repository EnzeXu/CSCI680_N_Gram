public class JSONFilterTest extends CascadingTestCase { @ Test public void testRegexFilter ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nested ) ; assertTrue ( invokeFilter ( new JSONRegexFilter ( "/person/name" , Pattern . compile ( "John D Doe" ) ) , entry ) ) ; assertTrue ( invokeFilter ( new JSONRegexFilter ( "/person/name" , Pattern . compile ( "^John$" ) ) , entry ) ) ; assertFalse ( invokeFilter ( new JSONRegexFilter ( "/person/name" , Pattern . compile ( "^John Doe$" ) ) , entry ) ) ; assertFalse ( invokeFilter ( new JSONRegexFilter ( "/person/name" , Pattern . compile ( "John Doe" ) ) , entry ) ) ; assertFalse ( invokeFilter ( new JSONRegexFilter ( "/person/name" , Pattern . compile ( "John [ ] Doe$" ) ) , entry ) ) ; } @ Test public void testRegexFilterArray ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nestedArray ) ; assertFalse ( invokeFilter ( new JSONRegexFilter ( "/annotationsname" , Pattern . compile ( "end" ) ) , entry ) ) ; } @ Test ( expected = OperationException . class ) public void testRegexFilterArrayException ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nestedArray ) ; assertFalse ( invokeFilter ( new JSONRegexFilter ( "/annotations/name" , Pattern . compile ( "begin" ) ) , entry ) ) ; } @ Test public void testRegexFilterArrayNoException ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nestedArray ) ; assertFalse ( invokeFilter ( new JSONRegexFilter ( "/annotations/name" , Pattern . compile ( "^$" ) , false ) , entry ) ) ; } }