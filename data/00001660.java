public class S3FileCheckpointer implements S3Checkpointer { Map < String , String > seenKeys = new LinkedHashMap < > ( ) ; Path path = makeHidden ( homeDir ( ) ) ; Function < String , String > filename = bucket - > bucket + " . txt" ; public static Path homeDir ( ) { return Paths . get ( System . getProperty ( "user . home" ) ) ; } public static Path currentDir ( ) { return Paths . get ( System . getProperty ( "user . dir" ) ) ; } public static Path makeHidden ( Path path ) { return path . resolve ( " . cascading" ) . resolve ( "s3tap-checkpoints" ) ; } public S3FileCheckpointer ( ) { } public S3FileCheckpointer ( String path ) { this ( Paths . get ( path ) ) ; } public S3FileCheckpointer ( Path path ) { this . path = path ; } public S3FileCheckpointer ( Function < String , String > filename ) { this . filename = filename ; } public S3FileCheckpointer ( Path path , Function < String , String > filename ) { this . path = path ; this . filename = filename ; } @ Override public String getLastKey ( String bucketName ) { Path input = getPathFor ( bucketName ) ; if ( !Files . exists ( input ) ) return null ; try { return Files . lines ( input ) . findFirst ( ) . orElse ( null ) ; } catch ( IOException exception ) { throw new UncheckedIOException ( exception ) ; } } private Path getPathFor ( String bucketName ) { return path . resolve ( filename . apply ( bucketName ) ) ; } @ Override public void setLastKey ( String bucketName , String key ) { seenKeys . put ( bucketName , key ) ; } @ Override public void commit ( ) { for ( Map . Entry < String , String > entry : seenKeys . entrySet ( ) ) { try { Path bucketPath = getPathFor ( entry . getKey ( ) ) ; Files . createDirectories ( bucketPath . getParent ( ) ) ; Files . write ( bucketPath , Collections . singleton ( entry . getValue ( ) ) ) ; } catch ( IOException exception ) { throw new UncheckedIOException ( exception ) ; } } seenKeys . clear ( ) ; } }