public class LocalFlow extends BaseFlow<Properties> { private Properties config; private FlowProcess<Properties> flowProcess; public LocalFlow( PlatformInfo platformInfo, Map<Object, Object> properties, Properties config, FlowDef flowDef ) { super( platformInfo, properties, config, flowDef ); initFromProperties( properties ); } @Override protected void initConfig( Map<Object, Object> properties, Properties parentConfig ) { this.config = createConfig( properties, parentConfig ); this.flowProcess = new LocalFlowProcess( getFlowSession(), config ); } @Override protected void setConfigProperty( Properties properties, Object key, Object value ) { properties.setProperty( key.toString(), value.toString() ); } @Override protected Properties newConfig( Properties defaultConfig ) { return defaultConfig == null ? new Properties() : new Properties( defaultConfig ); } @ProcessConfiguration @Override public Properties getConfig() { return config; } @Override public Properties getConfigCopy() { return new Properties( config ); } @Override public Map<Object, Object> getConfigAsProperties() { return config; } @Override public String getProperty( String key ) { return config.getProperty( key ); } @Override public FlowProcess<Properties> getFlowProcess() { return flowProcess; } @Override protected void internalStart() { try { deleteSinksIfReplace(); deleteTrapsIfReplace(); } catch( IOException exception ) { throw new FlowException( "unable to delete sinks", exception ); } } @Override protected Thread createFlowThread( String threadName ) { Thread flowThread = super.createFlowThread( threadName ); flowThread.setContextClassLoader( createClassPathClassloader( flowThread.getContextClassLoader() ) ); return flowThread; } private ClassLoader createClassPathClassloader( ClassLoader classLoader ) { if( getClassPath() == null || getClassPath().isEmpty() ) return classLoader; URL[] urls = new URL[ getClassPath().size() ]; for( int i = 0; i < getClassPath().size(); i++ ) { String path = getClassPath().get( i ); File file = new File( path ).getAbsoluteFile(); if( !file.exists() ) throw new FlowException( "path does not exist: " + file ); try { urls[ i ] = file.toURI().toURL(); } catch( MalformedURLException exception ) { throw new FlowException( "bad path: " + file, exception ); } } return new URLClassLoader( urls, classLoader ); } @Override protected void internalClean( boolean stop ) { } @Override public boolean stepsAreLocal() { return false; } @Override protected int getMaxNumParallelSteps() { return 0; } @Override protected void internalShutdown() { } }