public class InvokePolymorphicInsn extends Insn { private static final CstString DEFAULT_DESCRIPTOR = new CstString("([Ljava/lang/Object;)Ljava/lang/Object;"); private static final CstString VARHANDLE_SET_DESCRIPTOR = new CstString("([Ljava/lang/Object;)V"); private static final CstString VARHANDLE_COMPARE_AND_SET_DESCRIPTOR = new CstString("([Ljava/lang/Object;)Z"); private final TypeList catches; private final CstMethodRef callSiteMethod; private final CstMethodRef polymorphicMethod; private final CstProtoRef callSiteProto; public InvokePolymorphicInsn(Rop opcode, SourcePosition position, RegisterSpecList sources, TypeList catches, CstMethodRef callSiteMethod) { super(opcode, position, null, sources); if (opcode.getBranchingness() != Rop.BRANCH_THROW) { throw new IllegalArgumentException("opcode with invalid branchingness: " + opcode.getBranchingness()); } if (catches == null) { throw new NullPointerException("catches == null"); } this.catches = catches; if (callSiteMethod == null) { throw new NullPointerException("callSiteMethod == null"); } else if (!callSiteMethod.isSignaturePolymorphic()) { throw new IllegalArgumentException("callSiteMethod is not signature polymorphic"); } this.callSiteMethod = callSiteMethod; this.polymorphicMethod = makePolymorphicMethod(callSiteMethod); this.callSiteProto = makeCallSiteProto(callSiteMethod); } @Override public TypeList getCatches() { return this.catches; } @Override public void accept(Visitor visitor) { visitor.visitInvokePolymorphicInsn(this); } @Override public Insn withAddedCatch(Type type) { return new InvokePolymorphicInsn(getOpcode(), getPosition(), getSources(), catches.withAddedType(type), getCallSiteMethod()); } @Override public Insn withRegisterOffset(int delta) { return new InvokePolymorphicInsn(getOpcode(), getPosition(), getSources().withOffset(delta), catches, getCallSiteMethod()); } @Override public Insn withNewRegisters(RegisterSpec result, RegisterSpecList sources) { return new InvokePolymorphicInsn(getOpcode(), getPosition(), sources, catches, getCallSiteMethod()); } public CstMethodRef getCallSiteMethod() { return callSiteMethod; } public CstMethodRef getPolymorphicMethod() { return polymorphicMethod; } public CstProtoRef getCallSiteProto() { return callSiteProto; } @Override public String getInlineString() { return getPolymorphicMethod().toString() + " " + getCallSiteProto().toString() + " " + ThrowingInsn.toCatchString(catches); } private static CstMethodRef makePolymorphicMethod(final CstMethodRef callSiteMethod) { CstType definingClass= callSiteMethod.getDefiningClass(); CstString cstMethodName = callSiteMethod.getNat().getName(); String methodName = callSiteMethod.getNat().getName().getString(); if (definingClass.equals(CstType.METHOD_HANDLE)) { if (methodName.equals("invoke") || methodName.equals("invokeExact")) { CstNat cstNat = new CstNat(cstMethodName, DEFAULT_DESCRIPTOR); return new CstMethodRef(definingClass, cstNat); } } if (definingClass.equals(CstType.VAR_HANDLE)) { switch (methodName) { case "compareAndExchange": case "compareAndExchangeAcquire": case "compareAndExchangeRelease": case "get": case "getAcquire": case "getAndAdd": case "getAndAddAcquire": case "getAndAddRelease": case "getAndBitwiseAnd": case "getAndBitwiseAndAcquire": case "getAndBitwiseAndRelease": case "getAndBitwiseOr": case "getAndBitwiseOrAcquire": case "getAndBitwiseOrRelease": case "getAndBitwiseXor": case "getAndBitwiseXorAcquire": case "getAndBitwiseXorRelease": case "getAndSet": case "getAndSetAcquire": case "getAndSetRelease": case "getOpaque": case "getVolatile": { CstNat cstNat = new CstNat(cstMethodName, DEFAULT_DESCRIPTOR); return new CstMethodRef(definingClass, cstNat); } case "set": case "setOpaque": case "setRelease": case "setVolatile": { CstNat cstNat = new CstNat(cstMethodName, VARHANDLE_SET_DESCRIPTOR); return new CstMethodRef(definingClass, cstNat); } case "compareAndSet": case "weakCompareAndSet": case "weakCompareAndSetAcquire": case "weakCompareAndSetPlain": case "weakCompareAndSetRelease": { CstNat cstNat = new CstNat(cstMethodName, VARHANDLE_COMPARE_AND_SET_DESCRIPTOR); return new CstMethodRef(definingClass, cstNat); } default: break; } } throw new IllegalArgumentException("Unknown signature polymorphic method: " + callSiteMethod.toHuman()); } private static CstProtoRef makeCallSiteProto(final CstMethodRef callSiteMethod) { return new CstProtoRef(callSiteMethod.getPrototype(true)); } }