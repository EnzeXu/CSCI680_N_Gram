public class FlowProcessPlatformTest extends PlatformTestCase { public static class IterateInsert extends BaseOperation implements Function { private Tap tap; public IterateInsert( Fields fieldDeclaration, Tap tap ) { super( fieldDeclaration ); this.tap = tap; } @Override public void prepare( FlowProcess flowProcess, OperationCall operationCall ) { } @Override public void cleanup( FlowProcess flowProcess, OperationCall operationCall ) { } @Override public void operate( FlowProcess flowProcess, FunctionCall functionCall ) { try { TupleEntryIterator iterator = flowProcess.openTapForRead( tap ); while( iterator.hasNext() ) functionCall.getOutputCollector().add( new Tuple( iterator.next().getTuple() ) ); iterator.close(); } catch( IOException exception ) { exception.printStackTrace(); } } } public FlowProcessPlatformTest() { super( true ); } @Test public void testOpenForRead() throws IOException { getPlatform().copyFromLocal( inputFileNums20 ); getPlatform().copyFromLocal( inputFileNums10 ); Tap source = getPlatform().getTextFile( new Fields( "line" ), inputFileNums20 ); Pipe pipe = new Pipe( "test" ); Tap tap = getPlatform().getTextFile( new Fields( "value" ), inputFileNums10 ); pipe = new Each( pipe, new IterateInsert( new Fields( "value" ), tap ), Fields.ALL ); Tap sink = getPlatform().getTextFile( getOutputPath( "openforread" ), SinkMode.REPLACE ); Flow flow = getPlatform().getFlowConnector().connect( source, sink, pipe ); flow.complete(); validateLength( flow, 200 ); } }