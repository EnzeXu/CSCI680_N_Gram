public class TestInvokePolymorphic { public static void testInvokeVoidReturnNoArgs(MethodHandle mh) throws Throwable { mh.invoke(); } public static void testInvokeExactVoidReturnNoArgs(MethodHandle mh) throws Throwable { mh.invokeExact(); } public static int testInvokeIntReturnNoArgs(MethodHandle mh) throws Throwable { return (int) mh.invoke(); } public static int testInvokeExactIntReturnNoArgs(MethodHandle mh) throws Throwable { return (int) mh.invokeExact(); } public static long testInvokeLongReturnNoArgs(MethodHandle mh) throws Throwable { return (long) mh.invoke(); } public static long testInvokeExactLongReturnNoArgs(MethodHandle mh) throws Throwable { return (long) mh.invokeExact(); } public static double testInvokeDoubleReturnNoArgs(MethodHandle mh) throws Throwable { return (double) mh.invoke(); } public static double testInvokeExactDoubleReturnNoArgs(MethodHandle mh) throws Throwable { return (double) mh.invokeExact(); } public static double testInvokeDoubleReturn2Arguments(MethodHandle mh, Object o, long l) throws Throwable { return (double) mh.invoke(o, l); } public static double testInvokeExactDoubleReturn2Arguments(MethodHandle mh, Object o, long l) throws Throwable { return (double) mh.invokeExact(o, l); } public static void testInvokeVoidReturn3IntArguments(MethodHandle mh, int x, int y, int z) throws Throwable { mh.invoke( x, y, z); } public static void testInvokeExactVoidReturn3IntArguments(MethodHandle mh, int x, int y, int z) throws Throwable { mh.invokeExact(x, y, z); } public static void testInvokeVoidReturn3Arguments(MethodHandle mh, Object o, long l, double d) throws Throwable { mh.invoke(o, l, d); } public static void testInvokeExactVoidReturn3Arguments(MethodHandle mh, Object o, long l, double d) throws Throwable { mh.invokeExact(o, l, d); } public static int testInvokeIntReturn5Arguments(MethodHandle mh, Object o, long l, double d, float f, String s) throws Throwable { return (int) mh.invoke(o, l, d, f, s); } public static int testInvokeExactIntReturn5Arguments(MethodHandle mh, Object o, long l, double d, float f, String s) throws Throwable { return (int) mh.invokeExact(o, l, d, f, s); } }