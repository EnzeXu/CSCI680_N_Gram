public class MapReduceFlow extends BaseMapReduceFlow { @ ConstructorProperties ( { "jobConf" } ) public MapReduceFlow ( JobConf jobConf ) { this ( jobConf . getJobName ( ) , jobConf , false ) ; } @ ConstructorProperties ( { "jobConf" , "deleteSinkOnInit" } ) public MapReduceFlow ( JobConf jobConf , boolean deleteSinkOnInit ) { this ( jobConf . getJobName ( ) , jobConf , deleteSinkOnInit ) ; } @ ConstructorProperties ( { "name" , "jobConf" } ) public MapReduceFlow ( String name , JobConf jobConf ) { this ( name , jobConf , false ) ; } @ ConstructorProperties ( { "name" , "jobConf" , "deleteSinkOnInit" } ) public MapReduceFlow ( String name , JobConf jobConf , boolean deleteSinkOnInit ) { this ( new Properties ( ) , name , jobConf , null , deleteSinkOnInit , true ) ; } @ ConstructorProperties ( { "properties" , "name" , "jobConf" , "deleteSinkOnInit" } ) public MapReduceFlow ( Properties properties , String name , JobConf jobConf , boolean deleteSinkOnInit ) { this ( properties , name , jobConf , null , deleteSinkOnInit , true ) ; } @ ConstructorProperties ( { "properties" , "name" , "jobConf" , "flowDescriptor" , "deleteSinkOnInit" } ) public MapReduceFlow ( Properties properties , String name , JobConf jobConf , Map < String , String > flowDescriptor , boolean deleteSinkOnInit ) { this ( properties , name , jobConf , flowDescriptor , deleteSinkOnInit , true ) ; } @ ConstructorProperties ( { "properties" , "name" , "jobConf" , "flowDescriptor" , "deleteSinkOnInit" , "stopJobsOnExit" } ) public MapReduceFlow ( Properties properties , String name , JobConf jobConf , Map < String , String > flowDescriptor , boolean deleteSinkOnInit , boolean stopJobsOnExit ) { super ( HadoopUtil . getPlatformInfo ( JobConf . class , "org/apache/hadoop" , "Hadoop MR" ) , properties , jobConf , name , flowDescriptor , deleteSinkOnInit ) ; this . stopJobsOnExit = stopJobsOnExit ; initializeFrom ( jobConf ) ; } protected void initializeFrom ( JobConf jobConf ) { setSources ( createSources ( jobConf ) ) ; setSinks ( createSinks ( jobConf ) ) ; setTraps ( createTraps ( jobConf ) ) ; setFlowStepGraph ( makeStepGraph ( jobConf ) ) ; initSteps ( ) ; this . flowStats = createPrepareFlowStats ( ) ; initializeNewJobsMap ( ) ; initializeChildStats ( ) ; } }