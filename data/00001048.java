public class FieldsComparatorTest extends CascadingTestCase { Comparator comparator = Collections . reverseOrder ( Collections . reverseOrder ( ) ) ; public FieldsComparatorTest ( ) { } @ Test public void testCompare ( ) { Fields fields = new Fields ( "a" ) ; fields . setComparator ( "a" , comparator ) ; Tuple aTuple = new Tuple ( "a" ) ; Tuple bTuple = new Tuple ( "b" ) ; assertTrue ( "not less than : aTuple < bTuple" , fields . compare ( aTuple , bTuple ) < 0 ) ; assertTrue ( "not less than : bTuple < aTuple" , fields . compare ( bTuple , aTuple ) > 0 ) ; aTuple . add ( "b" ) ; assertTrue ( "not greater than : aTuple > bTuple" , fields . compare ( aTuple , bTuple ) > 0 ) ; aTuple = new Tuple ( bTuple , "a" ) ; assertTrue ( "not greater than : aTuple > bTuple" , fields . compare ( aTuple , bTuple ) > 0 ) ; } @ Test public void testCompare2 ( ) { Fields fields = new Fields ( "a" ) ; fields . setComparators ( new Comparator [ ] { comparator } ) ; Tuple aTuple = new Tuple ( "a" ) ; Tuple bTuple = new Tuple ( "b" ) ; assertTrue ( "not less than : aTuple < bTuple" , fields . compare ( aTuple , bTuple ) < 0 ) ; assertTrue ( "not less than : bTuple < aTuple" , fields . compare ( bTuple , aTuple ) > 0 ) ; aTuple . add ( "b" ) ; assertTrue ( "not greater than : aTuple > bTuple" , fields . compare ( aTuple , bTuple ) > 0 ) ; aTuple = new Tuple ( bTuple , "a" ) ; assertTrue ( "not greater than : aTuple > bTuple" , fields . compare ( aTuple , bTuple ) > 0 ) ; } }