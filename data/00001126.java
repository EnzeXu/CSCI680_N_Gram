public class RegexSplitGenerator extends RegexOperation < Pair < Pattern , TupleEntry > > implements Function < Pair < Pattern , TupleEntry > > { @ ConstructorProperties ( { "patternString" } ) public RegexSplitGenerator ( String patternString ) { super ( 1 , Fields . size ( 1 ) , patternString ) ; } @ ConstructorProperties ( { "fieldDeclaration" , "patternString" } ) public RegexSplitGenerator ( Fields fieldDeclaration , String patternString ) { super ( 1 , fieldDeclaration , patternString ) ; if ( fieldDeclaration . size ( ) != 1 ) throw new IllegalArgumentException ( "fieldDeclaration may only declare one field , was " + fieldDeclaration . print ( ) ) ; } @ Override public void prepare ( FlowProcess flowProcess , OperationCall < Pair < Pattern , TupleEntry > > operationCall ) { TupleEntry tupleEntry = new TupleEntry ( operationCall . getDeclaredFields ( ) , Tuple . size ( 1 ) ) ; operationCall . setContext ( new Pair < > ( getPattern ( ) , tupleEntry ) ) ; } @ Override public void operate ( FlowProcess flowProcess , FunctionCall < Pair < Pattern , TupleEntry > > functionCall ) { String value = functionCall . getArguments ( ) . getString ( 0 ) ; if ( value == null ) value = "" ; String [ ] split = functionCall . getContext ( ) . getLhs ( ) . split ( value ) ; for ( String string : split ) { TupleEntry tupleEntry = functionCall . getContext ( ) . getRhs ( ) ; tupleEntry . setString ( 0 , string ) ; functionCall . getOutputCollector ( ) . add ( tupleEntry ) ; } } }