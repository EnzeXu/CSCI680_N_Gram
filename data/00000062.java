public class SASLConnectReconnect { private MemcachedClient mc = null ; SASLConnectReconnect ( String username , String password , String host ) { AuthDescriptor ad = new AuthDescriptor ( new String [ ] { "PLAIN" } , new PlainCallbackHandler ( username , password ) ) ; try { List < InetSocketAddress > addresses = AddrUtil . getAddresses ( host ) ; mc = new MemcachedClient ( new ConnectionFactoryBuilder ( ) . setProtocol ( Protocol . BINARY ) . setAuthDescriptor ( ad ) . build ( ) , addresses ) ; } catch ( IOException ex ) { System . err . println ( "Couldn't create a connection , bailing out : \n" + "IOException " + ex . getMessage ( ) ) ; if ( mc != null ) { mc . shutdown ( ) ; } } } public static void main ( String [ ] args ) throws InterruptedException { if ( args . length != 4 ) { System . err . println ( "Usage example : \nQuickAuthLoad user password" + " localhost : 11212 10000" ) ; System . exit ( 1 ) ; } SASLConnectReconnect m = new SASLConnectReconnect ( args [ 0 ] , args [ 1 ] , args [ 2 ] ) ; Logger . getLogger ( "net . spy . memcached" ) . setLevel ( Level . FINEST ) ; Logger topLogger = java . util . logging . Logger . getLogger ( "" ) ; Handler consoleHandler = null ; for ( Handler handler : topLogger . getHandlers ( ) ) { if ( handler instanceof ConsoleHandler ) { consoleHandler = handler ; break ; } } if ( consoleHandler == null ) { consoleHandler = new ConsoleHandler ( ) ; topLogger . addHandler ( consoleHandler ) ; } consoleHandler . setLevel ( java . util . logging . Level . FINEST ) ; m . verifySetAndGet ( ) ; System . err . println ( "Pass one done . " ) ; Thread . sleep ( 60000 ) ; m . verifySetAndGet2 ( Integer . parseInt ( args [ 3 ] ) ) ; System . err . println ( "Pass two done . " ) ; } public void verifySetAndGet ( ) { int iterations = 20 ; for ( int i = 0 ; i < iterations ; i++ ) { mc . set ( "test" + i , 0 , "test" + i ) ; } for ( int i = 0 ; i < iterations ; i++ ) { Object res = mc . get ( "test" + i ) ; assertEquals ( "test" + i , res ) ; } } public void verifySetAndGet2 ( int iterations ) { try { for ( int i = 0 ; i < = iterations ; i++ ) { mc . set ( "me" + i , 0 , "me" + i ) ; } for ( int i = 0 ; i < iterations ; i++ ) { try { Object res = mc . get ( "me" + i ) ; if ( res == null ) { System . err . println ( "me" + i + " was not in the cache . " ) ; } else { assertEquals ( "me" + i , res ) ; } } catch ( OperationTimeoutException ex ) { System . err . println ( "Operation timeed out , continuing . " ) ; } } mc . shutdown ( 1 , TimeUnit . SECONDS ) ; } catch ( Exception ex ) { System . err . println ( "Bailing out " + ex . toString ( ) + "\n" ) ; ex . printStackTrace ( ) ; } } }