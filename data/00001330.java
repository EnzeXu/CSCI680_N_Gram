public class AssertEqualsAll extends BaseAssertion implements ValueAssertion { private Object value; @ConstructorProperties({"value"}) public AssertEqualsAll( Object value ) { super( "argument '%s' value was: %s, not: %s, in tuple: %s" ); if( value == null ) throw new IllegalArgumentException( "value may not be null" ); this.value = value; } @Property(name = "value", visibility = Visibility.PRIVATE) @PropertyDescription("The expected value.") public Object getValue() { return value; } @Override public void doAssert( FlowProcess flowProcess, ValueAssertionCall assertionCall ) { TupleEntry input = assertionCall.getArguments(); int pos = 0; for( Object element : input.getTuple() ) { if( !value.equals( element ) ) fail( input.getFields().get( pos ), element, value, input.getTuple().print() ); pos++; } } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof AssertEqualsAll ) ) return false; if( !super.equals( object ) ) return false; AssertEqualsAll that = (AssertEqualsAll) object; if( value != null ? !value.equals( that.value ) : that.value != null ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( value != null ? value.hashCode() : 0 ); return result; } }