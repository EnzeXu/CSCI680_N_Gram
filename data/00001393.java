public class OuterJoin extends BaseJoiner { public OuterJoin() { } @ConstructorProperties({"fieldDeclaration"}) public OuterJoin( Fields fieldDeclaration ) { super( fieldDeclaration ); } public Iterator<Tuple> getIterator( JoinerClosure closure ) { return new JoinIterator( closure ); } public int numJoins() { return -1; } public static class JoinIterator extends InnerJoin.JoinIterator { List[] singletons; public JoinIterator( JoinerClosure closure ) { super( closure ); } @Override protected void init() { singletons = new List[ closure.size() ]; for( int i = 0; i < singletons.length; i++ ) { if( isOuter( i ) ) singletons[ i ] = Collections.singletonList( Tuple.size( closure.getValueFields()[ i ].size() ) ); } super.init(); } protected boolean isOuter( int i ) { return closure.isEmpty( i ); } @Override protected Iterator getIterator( int i ) { if( singletons[ i ] == null ) return super.getIterator( i ); return singletons[ i ].iterator(); } } }