public class JSONGetFunctionTest extends CascadingTestCase { @ Test public void testGet ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nested ) ; JSONGetFunction function = new JSONGetFunction ( new Fields ( "result" ) , "/person/name" ) ; TupleListCollector result = invokeFunction ( function , entry , new Fields ( "result" ) ) ; Object value = result . iterator ( ) . next ( ) . getObject ( 0 ) ; assertNotNull ( value ) ; assertEquals ( "John Doe" , ( ( TextNode ) value ) . textValue ( ) ) ; } @ Test public void testGetCoerced ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nested ) ; JSONGetFunction function = new JSONGetFunction ( new Fields ( "result" , String . class ) , "/person/name" ) ; TupleListCollector result = invokeFunction ( function , entry , new Fields ( "result" ) ) ; Object value = result . iterator ( ) . next ( ) . getObject ( 0 ) ; assertNotNull ( value ) ; assertEquals ( "John Doe" , value ) ; } @ Test public void testGetMissing ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nested ) ; JSONGetFunction function = new JSONGetFunction ( new Fields ( "result" ) , "/person/foobar" ) ; TupleListCollector result = invokeFunction ( function , entry , new Fields ( "result" ) ) ; Object value = result . iterator ( ) . next ( ) . getObject ( 0 ) ; assertNull ( value ) ; } @ Test ( expected = OperationException . class ) public void testGetMissingFail ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nested ) ; JSONGetFunction function = new JSONGetFunction ( new Fields ( "result" ) , true , "/person/foobar" ) ; invokeFunction ( function , entry , new Fields ( "result" ) ) ; } @ Test public void testGetMap ( ) { TupleEntry entry = new TupleEntry ( new Fields ( "json" , JSONCoercibleType . TYPE ) , Tuple . size ( 1 ) ) ; entry . setObject ( 0 , JSONData . nested ) ; JSONGetFunction function = new JSONGetFunction ( singletonMap ( new Fields ( "result" ) , "/person/name" ) ) ; TupleListCollector result = invokeFunction ( function , entry , new Fields ( "result" ) ) ; Object value = result . iterator ( ) . next ( ) . getObject ( 0 ) ; assertNotNull ( value ) ; assertEquals ( "John Doe" , ( ( TextNode ) value ) . textValue ( ) ) ; } }