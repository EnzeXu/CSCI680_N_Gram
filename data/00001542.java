public class HasherPartitioner extends TupleHasher implements Configurable { public final static String HASHER_PARTITIONER_USE_LEGACY_HASH = "cascading . tuple . hadoop . util . hasherpartitioner . uselegacyhash" ; private static Comparator defaultComparator ; private Comparator [ ] comparators ; private Configuration conf ; @ Override public void setConf ( Configuration conf ) { if ( this . conf != null ) return ; this . conf = conf ; defaultComparator = TupleSerialization . getDefaultComparator ( defaultComparator , conf ) ; comparators = DeserializerComparator . getFieldComparatorsFrom ( conf , "cascading . group . comparator" ) ; if ( conf . getBoolean ( HASHER_PARTITIONER_USE_LEGACY_HASH , false ) ) this . hashFunction = new LegacyHashFunction ( ) ; initialize ( defaultComparator , comparators ) ; } @ Override public Configuration getConf ( ) { return conf ; } static class LegacyHashFunction extends TupleHasher . HashFunction { @ Override public int hash ( Tuple tuple , Hasher [ ] hashers ) { int hash = 1 ; List < Object > elements = Tuple . elements ( tuple ) ; for ( int i = 0 ; i < elements . size ( ) ; i++ ) { Object element = elements . get ( i ) ; hash = 31 * hash + ( element != null ? hashers [ i % hashers . length ] . hashCode ( element ) : 0 ) ; } return hash ; } } }