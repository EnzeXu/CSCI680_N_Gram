public class ParquetTupleScheme extends Scheme < JobConf , RecordReader , OutputCollector , Object [ ] , Object [ ] > { private static final long serialVersionUID = 0L ; private String parquetSchema ; private final FilterPredicate filterPredicate ; public ParquetTupleScheme ( ) { super ( ) ; this . filterPredicate = null ; } public ParquetTupleScheme ( Fields sourceFields ) { super ( sourceFields ) ; this . filterPredicate = null ; } public ParquetTupleScheme ( FilterPredicate filterPredicate ) { this . filterPredicate = checkNotNull ( filterPredicate , "filterPredicate" ) ; } public ParquetTupleScheme ( FilterPredicate filterPredicate , Fields sourceFields ) { super ( sourceFields ) ; this . filterPredicate = checkNotNull ( filterPredicate , "filterPredicate" ) ; } public ParquetTupleScheme ( Fields sourceFields , Fields sinkFields , final String schema ) { super ( sourceFields , sinkFields ) ; parquetSchema = schema ; this . filterPredicate = null ; } @ SuppressWarnings ( "rawtypes" ) @ Override public void sourceConfInit ( FlowProcess < ? extends JobConf > fp , Tap < JobConf , RecordReader , OutputCollector > tap , JobConf jobConf ) { if ( filterPredicate != null ) { ParquetInputFormat . setFilterPredicate ( jobConf , filterPredicate ) ; } jobConf . setInputFormat ( DeprecatedParquetInputFormat . class ) ; ParquetInputFormat . setReadSupportClass ( jobConf , TupleReadSupport . class ) ; TupleReadSupport . setRequestedFields ( jobConf , getSourceFields ( ) ) ; } @ Override public Fields retrieveSourceFields ( FlowProcess < ? extends JobConf > flowProcess , Tap tap ) { MessageType schema = readSchema ( flowProcess , tap ) ; SchemaIntersection intersection = new SchemaIntersection ( schema , getSourceFields ( ) ) ; setSourceFields ( intersection . getSourceFields ( ) ) ; return getSourceFields ( ) ; } private MessageType readSchema ( FlowProcess < ? extends JobConf > flowProcess , Tap tap ) { try { Hfs hfs ; if ( tap instanceof CompositeTap ) hfs = ( Hfs ) ( ( CompositeTap ) tap ) . getChildTaps ( ) . next ( ) ; else hfs = ( Hfs ) tap ; List < Footer > footers = getFooters ( flowProcess , hfs ) ; if ( footers . isEmpty ( ) ) { throw new TapException ( "Could not read Parquet metadata at " + hfs . getPath ( ) ) ; } else { return footers . get ( 0 ) . getParquetMetadata ( ) . getFileMetaData ( ) . getSchema ( ) ; } } catch ( IOException e ) { throw new TapException ( e ) ; } } private List < Footer > getFooters ( FlowProcess < ? extends JobConf > flowProcess , Hfs hfs ) throws IOException { JobConf jobConf = flowProcess . getConfigCopy ( ) ; DeprecatedParquetInputFormat format = new DeprecatedParquetInputFormat ( ) ; format . addInputPath ( jobConf , hfs . getPath ( ) ) ; return format . getFooters ( jobConf ) ; } @ SuppressWarnings ( "unchecked" ) @ Override public boolean source ( FlowProcess < ? extends JobConf > fp , SourceCall < Object [ ] , RecordReader > sc ) throws IOException { Container < Tuple > value = ( Container < Tuple > ) sc . getInput ( ) . createValue ( ) ; boolean hasNext = sc . getInput ( ) . next ( null , value ) ; if ( !hasNext ) { return false ; } if ( value == null ) { return true ; } sc . getIncomingEntry ( ) . setTuple ( value . get ( ) ) ; return true ; } @ SuppressWarnings ( "rawtypes" ) @ Override public void sinkConfInit ( FlowProcess < ? extends JobConf > fp , Tap < JobConf , RecordReader , OutputCollector > tap , JobConf jobConf ) { DeprecatedParquetOutputFormat . setAsOutputFormat ( jobConf ) ; jobConf . set ( TupleWriteSupport . PARQUET_CASCADING_SCHEMA , parquetSchema ) ; ParquetOutputFormat . setWriteSupportClass ( jobConf , TupleWriteSupport . class ) ; } @ Override public boolean isSink ( ) { return parquetSchema != null ; } @ Override public void sink ( FlowProcess < ? extends JobConf > fp , SinkCall < Object [ ] , OutputCollector > sink ) throws IOException { TupleEntry tuple = sink . getOutgoingEntry ( ) ; OutputCollector outputCollector = sink . getOutput ( ) ; outputCollector . collect ( null , tuple ) ; } }