public class Insert extends BaseOperation implements Function { private final Tuple values ; @ ConstructorProperties ( { "fieldDeclaration" , "values" } ) public Insert ( Fields fieldDeclaration , Object . . . values ) { super ( 0 , fieldDeclaration ) ; this . values = new Tuple ( values ) ; if ( !fieldDeclaration . isSubstitution ( ) && fieldDeclaration . size ( ) != values . length ) throw new IllegalArgumentException ( "fieldDeclaration must be the same size as the given values" ) ; } @ Property ( name = "values" , visibility = Visibility . PRIVATE ) @ PropertyDescription ( "The values to insert . " ) public Tuple getValues ( ) { return new Tuple ( values ) ; } public void operate ( FlowProcess flowProcess , FunctionCall functionCall ) { functionCall . getOutputCollector ( ) . add ( values ) ; } @ Override public boolean equals ( Object object ) { if ( this == object ) return true ; if ( ! ( object instanceof Insert ) ) return false ; if ( !super . equals ( object ) ) return false ; Insert insert = ( Insert ) object ; if ( values != null ? !values . equals ( insert . values ) : insert . values != null ) return false ; return true ; } @ Override public int hashCode ( ) { int result = super . hashCode ( ) ; result = 31 * result + ( values != null ? values . hashCode ( ) : 0 ) ; return result ; } }