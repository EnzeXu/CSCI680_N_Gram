public class Counter extends BaseOperation implements Filter { private final Enum counterEnum ; private final String groupString ; private final String counterString ; private final int increment ; @ ConstructorProperties ( { "counter" } ) public Counter ( Enum counter ) { this ( counter , 1 ) ; } @ ConstructorProperties ( { "counter" , "increment" } ) public Counter ( Enum counter , int increment ) { this . counterEnum = counter ; this . groupString = null ; this . counterString = null ; this . increment = increment ; } @ ConstructorProperties ( { "group" , "counter" } ) public Counter ( String group , String counter ) { this ( group , counter , 1 ) ; } @ ConstructorProperties ( { "group" , "counter" , "increment" } ) public Counter ( String group , String counter , int increment ) { this . counterEnum = null ; this . groupString = group ; this . counterString = counter ; this . increment = increment ; } public Enum getCounterEnum ( ) { return counterEnum ; } public String getGroupString ( ) { return groupString ; } public String getCounterString ( ) { return counterString ; } public int getIncrement ( ) { return increment ; } @ Override public boolean isRemove ( FlowProcess flowProcess , FilterCall filterCall ) { if ( counterEnum != null ) flowProcess . increment ( counterEnum , increment ) ; else flowProcess . increment ( groupString , counterString , increment ) ; return false ; } @ Override public boolean equals ( Object object ) { if ( this == object ) return true ; if ( ! ( object instanceof Counter ) ) return false ; if ( !super . equals ( object ) ) return false ; Counter counter = ( Counter ) object ; if ( increment != counter . increment ) return false ; if ( counterEnum != null ? !counterEnum . equals ( counter . counterEnum ) : counter . counterEnum != null ) return false ; if ( counterString != null ? !counterString . equals ( counter . counterString ) : counter . counterString != null ) return false ; if ( groupString != null ? !groupString . equals ( counter . groupString ) : counter . groupString != null ) return false ; return true ; } @ Override public int hashCode ( ) { int result = super . hashCode ( ) ; result = 31 * result + ( counterEnum != null ? counterEnum . hashCode ( ) : 0 ) ; result = 31 * result + ( groupString != null ? groupString . hashCode ( ) : 0 ) ; result = 31 * result + ( counterString != null ? counterString . hashCode ( ) : 0 ) ; result = 31 * result + increment ; return result ; } }