public class HadoopSerializationPlatformTest extends PlatformTestCase { public HadoopSerializationPlatformTest ( ) { } @ Test public void testInputOutputSerialization ( ) throws IOException { long time = System . currentTimeMillis ( ) ; Configuration jobConf = new Configuration ( ) ; jobConf . set ( "io . serializations" , TestSerialization . class . getName ( ) + " , " + WritableSerialization . class . getName ( ) ) ; jobConf . set ( "cascading . serialization . tokens" , "1000=" + BooleanWritable . class . getName ( ) + " , 10001=" + Text . class . getName ( ) ) ; TupleSerialization tupleSerialization = new TupleSerialization ( jobConf ) ; File file = new File ( getOutputPath ( "serialization" ) ) ; file . mkdirs ( ) ; file = new File ( file , "/test . bytes" ) ; TupleOutputStream output = new HadoopTupleOutputStream ( new FileOutputStream ( file , false ) , tupleSerialization . getElementWriter ( ) ) ; for ( int i = 0 ; i < 501 ; i++ ) { String aString = "string number " + i ; double random = Math . random ( ) ; output . writeTuple ( new Tuple ( i , aString , random , new TestText ( aString ) , new Tuple ( "inner tuple" , new BytesWritable ( "some string" . getBytes ( ) ) ) , new BytesWritable ( Integer . toString ( i ) . getBytes ( "UTF-8" ) ) , new BooleanWritable ( false ) ) ) ; } output . close ( ) ; assertEquals ( "wrong size" , 89967L , file . length ( ) ) ; TupleInputStream input = new HadoopTupleInputStream ( new FileInputStream ( file ) , tupleSerialization . getElementReader ( ) ) ; int k = -1 ; for ( int i = 0 ; i < 501 ; i++ ) { Tuple tuple = input . readTuple ( ) ; int value = tuple . getInteger ( 0 ) ; assertTrue ( "wrong diff" , value - k == 1 ) ; assertTrue ( "wrong type" , tuple . getObject ( 3 ) instanceof TestText ) ; assertTrue ( "wrong type" , tuple . getObject ( 4 ) instanceof Tuple ) ; assertTrue ( "wrong type" , tuple . getObject ( 5 ) instanceof BytesWritable ) ; byte [ ] bytes = ( ( BytesWritable ) tuple . getObject ( 5 ) ) . getBytes ( ) ; String string = new String ( bytes , 0 , bytes . length > 1 ? bytes . length - 1 : bytes . length , "UTF-8" ) ; assertEquals ( "wrong value" , Integer . parseInt ( string ) , i ) ; assertTrue ( "wrong type" , tuple . getObject ( 6 ) instanceof BooleanWritable ) ; k = value ; } input . close ( ) ; System . out . println ( "time = " + ( System . currentTimeMillis ( ) - time ) ) ; } }