public class SortElements extends BaseOperation implements Function { private final Fields [ ] fields ; public SortElements ( Fields . . . fields ) { super ( Fields . ARGS ) ; this . fields = fields ; } public void operate ( FlowProcess flowProcess , FunctionCall functionCall ) { Set < Tuple > set = new TreeSet < Tuple > ( ) ; TupleEntry input = functionCall . getArguments ( ) ; for ( Fields field : fields ) set . add ( input . selectTuple ( field ) ) ; int i = 0 ; Tuple inputCopy = new Tuple ( input . getTuple ( ) ) ; for ( Tuple tuple : set ) inputCopy . put ( input . getFields ( ) , fields [ i++ ] , tuple ) ; functionCall . getOutputCollector ( ) . add ( inputCopy ) ; } @ Override public boolean equals ( Object object ) { if ( this == object ) return true ; if ( ! ( object instanceof SortElements ) ) return false ; if ( !super . equals ( object ) ) return false ; SortElements that = ( SortElements ) object ; if ( !Arrays . equals ( fields , that . fields ) ) return false ; return true ; } @ Override public int hashCode ( ) { int result = super . hashCode ( ) ; result = 31 * result + ( fields != null ? Arrays . hashCode ( fields ) : 0 ) ; return result ; } }