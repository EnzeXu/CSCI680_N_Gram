public class ScalaScriptMojo extends ScalaMojoSupport { @Parameter(property = "project.build.directory") protected File outputDir; @Parameter(property = "scriptFile") protected File scriptFile; @Parameter(property = "scriptEncoding", defaultValue = "UTF-8") protected String scriptEncoding; @Parameter(property = "script") protected String script; @Parameter(property = "maven.scala.keepGeneratedScript", defaultValue = "false") protected boolean keepGeneratedScript; @Parameter(property = "maven.scala.includeScopes") protected String includeScopes; @Parameter(property = "maven.scala.excludeScopes") protected String excludeScopes; @Parameter(property = "addToClasspath") protected String addToClasspath; @Parameter(property = "removeFromClasspath") protected String removeFromClasspath; private static AtomicInteger _lastScriptIndex = new AtomicInteger(0); private static String scriptBaseNameOf(File scriptFile, int idx) { if (scriptFile == null) { return "embeddedScript_" + idx; } int dot = scriptFile.getName().lastIndexOf('.'); if (dot == -1) { return scriptFile.getName() + "_" + idx; } return scriptFile.getName().substring(0, dot) + "_" + idx; } @Override protected void doExecute() throws Exception { if (script == null && scriptFile == null) { throw new MojoFailureException("Either script or scriptFile must be defined"); } if (script != null && scriptFile != null) { throw new MojoFailureException("Only one of script or scriptFile can be defined"); } if (StringUtils.isEmpty(includeScopes)) { if (scriptFile != null) { includeScopes = "compile, test, runtime"; } else { includeScopes = "plugin"; } } if (excludeScopes == null) { excludeScopes = ""; } File scriptDir = new File(outputDir, ".scalaScriptGen"); scriptDir.mkdirs(); String baseName = scriptBaseNameOf(scriptFile, _lastScriptIndex.incrementAndGet()); File destFile = new File(scriptDir, baseName + ".scala"); Set<File> classpath = new TreeSet<>(); configureClasspath(classpath); boolean mavenProjectDependency = includeScopes.contains("plugin"); wrapScript(destFile, mavenProjectDependency); try { URLClassLoader loader = createScriptClassloader(scriptDir, classpath); getLog().debug(("classpath : " + Arrays.asList(loader.getURLs()))); compileScript(scriptDir, destFile, loader); runScript(mavenProjectDependency, loader, baseName); } finally { if (!keepGeneratedScript) { delete(scriptDir); } } } private void runScript(boolean mavenProjectDependency, URLClassLoader loader, String baseName) throws Exception { Class<?> compiledScript = loader.loadClass(baseName); ClassLoader currentCL = Thread.currentThread().getContextClassLoader(); Thread.currentThread().setContextClassLoader(loader); try { try { Object instance; if (mavenProjectDependency) { Constructor<?> constructor = compiledScript.getConstructor(MavenProject.class, MavenSession.class, Log.class); instance = constructor.newInstance(project, session, getLog()); } else { instance = compiledScript.newInstance(); } try { compiledScript.getMethod("run").invoke(instance); } catch (NoSuchMethodException e) { } } catch (InvocationTargetException e) { if (e.getTargetException() != null) { throw e.getTargetException(); } else if (e.getCause() != null) { throw e.getCause(); } else { throw e; } } catch (ExceptionInInitializerError e) { if (e.getException() != null) { throw e.getException(); } else if (e.getCause() != null) { throw e.getCause(); } else { throw e; } } } catch (Throwable e) { if (e instanceof Exception) { throw (Exception) e; } throw new Exception("A " + e.getClass().getSimpleName() + " exception was thrown", e); } finally { Thread.currentThread().setContextClassLoader(currentCL); } } private URLClassLoader createScriptClassloader(File scriptDir, Set<File> classpath) throws Exception { ClassWorld w = new ClassWorld("zero", null); w.newRealm("mojo", getClass().getClassLoader()); Strategy s = new SelfFirstStrategy(w.newRealm("scalaScript", null)); ClassRealm rScript = s.getRealm(); rScript.setParentClassLoader(getClass().getClassLoader()); rScript.importFrom("mojo", "org.apache.maven"); rScript.addURL(scriptDir.toURI().toURL()); for (File f : classpath) { rScript.addURL(f.toURI().toURL()); } return rScript; } protected JavaMainCaller getScalaCommand() throws Exception { Context sc = findScalaContext(); return getScalaCommand(fork, sc.compilerMainClassName(scalaClassName, false)); } private void compileScript(File scriptDir, File destFile, URLClassLoader loader) throws Exception { JavaMainCaller jcmd = getScalaCommand(); jcmd.addArgs("-classpath", MainHelper.toClasspathString(loader)); jcmd.addArgs("-d", scriptDir.getAbsolutePath()); jcmd.addArgs("-sourcepath", scriptDir.getAbsolutePath()); jcmd.addArgs(destFile.getAbsolutePath()); jcmd.run(displayCmd); } private void configureClasspath(Set<File> classpath) throws Exception { Set<String> includes = new TreeSet<>(Arrays.asList(StringUtils.split(includeScopes.toLowerCase(), ","))); Set<String> excludes = new TreeSet<>(Arrays.asList(StringUtils.split(excludeScopes.toLowerCase(), ","))); for (Artifact a : project.getArtifacts()) { if (includes.contains(a.getScope().toLowerCase()) && !excludes.contains(a.getScope())) { addToClasspath( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getClassifier(), classpath, true); } } if (includes.contains("plugin") && !excludes.contains("plugin")) { for (Plugin p : project.getBuildPlugins()) { if ("scala-maven-plugin".equals(p.getArtifactId())) { for (Dependency d : p.getDependencies()) { addToClasspath( d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getClassifier(), classpath, true); } } } for (Artifact a : project.getPluginArtifacts()) { if ("scala-maven-plugin".equals(a.getArtifactId())) { addToClasspath( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getClassifier(), classpath, true); } } } if (addToClasspath != null) { for (String s : StringUtils.split(addToClasspath, ",")) { classpath.add(new File(s)); } } if (removeFromClasspath != null) { ArrayList<File> toRemove = new ArrayList<File>(); String[] jars = StringUtils.split(removeFromClasspath.trim(), ","); for (File f : classpath) { for (String jar : jars) { if (f.getPath().contains(jar.trim())) { toRemove.add(f); } } } classpath.removeAll(toRemove); } addCompilerToClasspath(classpath); addLibraryToClasspath(classpath); boolean ok = true; for (File f : classpath) { getLog().debug("classpath entry for running and compiling scripts: " + f); if (!f.exists()) { getLog().error("classpath entry for script not found : " + f); ok = false; } } if (!ok) { throw new MojoFailureException("some script dependencies not found (see log)"); } getLog().debug("Using the following classpath for running and compiling scripts: " + classpath); } private void wrapScript(File destFile, boolean mavenProjectDependency) throws IOException { destFile.delete(); FileOutputStream fileOutputStream = new FileOutputStream(destFile); PrintStream out = new PrintStream(fileOutputStream, false, encoding); BufferedReader reader = null; try { if (scriptFile != null) { reader = new BufferedReader( new InputStreamReader( new FileInputStream(scriptFile), Charset.forName(scriptEncoding))); } else { reader = new BufferedReader(new StringReader(script)); } String baseName = org.codehaus.plexus.util.FileUtils.basename(destFile.getName(), ".scala"); if (mavenProjectDependency) { out.println( "class " + baseName + "(project :" + MavenProject.class.getCanonicalName() + ",session :" + MavenSession.class.getCanonicalName() + ",log :" + Log.class.getCanonicalName() + ") {"); } else { out.println("class " + baseName + " {"); } String line = reader.readLine(); while (line != null) { out.print(" "); out.println(line); line = reader.readLine(); } out.println("}"); } finally { IOUtil.close(out); IOUtil.close(fileOutputStream); IOUtil.close(reader); } } private void delete(File scriptDir) { if (scriptDir.isDirectory()) { for (File file : scriptDir.listFiles()) { delete(file); } } scriptDir.deleteOnExit(); scriptDir.delete(); } }