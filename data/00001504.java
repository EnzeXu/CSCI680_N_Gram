public class SimpleNestedAggregate < Node > implements NestedAggregate < Node , SimpleNestedAggregate . AggregateContext < Node > > { public interface AggregateContext < Node > extends Serializable { void aggregate ( Node node ) ; Tuple complete ( ) ; void reset ( ) ; } protected Fields fieldDeclaration ; protected SerFunction < CoercibleType < Node > , AggregateContext < Node > > factory ; @ ConstructorProperties ( { "fieldDeclaration" , "factory" } ) public SimpleNestedAggregate ( Fields fieldDeclaration , SerFunction < CoercibleType < Node > , SimpleNestedAggregate . AggregateContext < Node > > factory ) { this . fieldDeclaration = fieldDeclaration ; this . factory = factory ; } @ ConstructorProperties ( { "fieldDeclaration" } ) protected SimpleNestedAggregate ( Fields fieldDeclaration ) { this . fieldDeclaration = fieldDeclaration ; } protected SimpleNestedAggregate ( ) { } protected void setFactory ( SerFunction < CoercibleType < Node > , AggregateContext < Node > > factory ) { this . factory = factory ; } @ Override public Fields getFieldDeclaration ( ) { return fieldDeclaration ; } protected SimpleNestedAggregate < Node > setFieldDeclaration ( Fields fieldDeclaration ) { this . fieldDeclaration = fieldDeclaration ; return this ; } @ Override public AggregateContext < Node > createContext ( CoercibleType < Node > nestedCoercibleType ) { if ( factory == null ) throw new IllegalStateException ( "factory is required" ) ; return factory . apply ( nestedCoercibleType ) ; } @ Override public void aggregate ( AggregateContext < Node > context , Node node ) { context . aggregate ( node ) ; } @ Override public Tuple complete ( AggregateContext < Node > context ) { return context . complete ( ) ; } @ Override public AggregateContext < Node > resetContext ( AggregateContext < Node > context ) { context . reset ( ) ; return context ; } }