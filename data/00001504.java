public class FlowConnectorProps extends Props { public static final String ASSERTION_LEVEL = "cascading.flowconnector.assertionlevel"; public static final String DEBUG_LEVEL = "cascading.flowconnector.debuglevel"; public static final String INTERMEDIATE_SCHEME_CLASS = "cascading.flowconnector.intermediateschemeclass"; public static final String TEMPORARY_TAP_DECORATOR_CLASS = "cascading.flowconnector.temporary_tap.decorator.classname"; public static final String CHECKPOINT_TAP_DECORATOR_CLASS = "cascading.flowconnector.checkpoint_tap.decorator.classname"; public static final String ENABLE_DECORATE_ACCUMULATED_TAP = "cascading.flowconnector.accumulated_tap.decorator.enable"; AssertionLevel assertionLevel; DebugLevel debugLevel; String intermediateSchemeClassName; String temporaryTapDecoratorClassName; String checkpointTapDecoratorClassName; Boolean enableDecorateAccumulatedTap; public static void setAssertionLevel( Map<Object, Object> properties, AssertionLevel assertionLevel ) { if( assertionLevel != null ) properties.put( ASSERTION_LEVEL, assertionLevel.toString() ); } public static void setDebugLevel( Map<Object, Object> properties, DebugLevel debugLevel ) { if( debugLevel != null ) properties.put( DEBUG_LEVEL, debugLevel.toString() ); } public static void setIntermediateSchemeClass( Map<Object, Object> properties, Class<? extends Scheme> intermediateSchemeClass ) { if( intermediateSchemeClass != null ) properties.put( INTERMEDIATE_SCHEME_CLASS, intermediateSchemeClass.getName() ); } public static void setIntermediateSchemeClass( Map<Object, Object> properties, String intermediateSchemeClassName ) { if( intermediateSchemeClassName != null ) properties.put( INTERMEDIATE_SCHEME_CLASS, intermediateSchemeClassName ); } public static void setTemporaryTapDecoratorClass( Map<Object, Object> properties, String temporaryTapDecoratorClassName ) { if( temporaryTapDecoratorClassName != null ) properties.put( TEMPORARY_TAP_DECORATOR_CLASS, temporaryTapDecoratorClassName ); } public static void setCheckpointTapDecoratorClass( Map<Object, Object> properties, String checkpointTapDecoratorClassName ) { if( checkpointTapDecoratorClassName != null ) properties.put( CHECKPOINT_TAP_DECORATOR_CLASS, checkpointTapDecoratorClassName ); } public static FlowConnectorProps flowConnectorProps() { return new FlowConnectorProps(); } public FlowConnectorProps() { } public AssertionLevel getAssertionLevel() { return assertionLevel; } public FlowConnectorProps setAssertionLevel( AssertionLevel assertionLevel ) { this.assertionLevel = assertionLevel; return this; } public DebugLevel getDebugLevel() { return debugLevel; } public FlowConnectorProps setDebugLevel( DebugLevel debugLevel ) { this.debugLevel = debugLevel; return this; } public String getIntermediateSchemeClassName() { return intermediateSchemeClassName; } public FlowConnectorProps setIntermediateSchemeClassName( String intermediateSchemeClassName ) { this.intermediateSchemeClassName = intermediateSchemeClassName; return this; } public FlowConnectorProps setIntermediateSchemeClassName( Class<Scheme> intermediateSchemeClass ) { if( intermediateSchemeClass != null ) this.intermediateSchemeClassName = intermediateSchemeClass.getName(); return this; } public String getTemporaryTapDecoratorClassName() { return temporaryTapDecoratorClassName; } public FlowConnectorProps setTemporaryTapDecoratorClassName( String temporaryTapDecoratorClassName ) { this.temporaryTapDecoratorClassName = temporaryTapDecoratorClassName; return this; } public FlowConnectorProps setTemporaryTapDecoratorClassName( Class<DecoratorTap> temporaryTapDecoratorClass ) { if( temporaryTapDecoratorClass != null ) this.temporaryTapDecoratorClassName = temporaryTapDecoratorClass.getName(); return this; } public String getCheckpointTapDecoratorClassName() { return checkpointTapDecoratorClassName; } public FlowConnectorProps setCheckpointTapDecoratorClassName( String checkpointTapDecoratorClassName ) { this.checkpointTapDecoratorClassName = checkpointTapDecoratorClassName; return this; } public FlowConnectorProps setCheckpointTapDecoratorClassName( Class<DecoratorTap> checkpointTapDecoratorClass ) { if( checkpointTapDecoratorClass != null ) this.checkpointTapDecoratorClassName = checkpointTapDecoratorClass.getName(); return this; } public Boolean getEnableDecorateAccumulatedTap() { return enableDecorateAccumulatedTap; } public FlowConnectorProps setEnableDecorateAccumulatedTap( boolean enableDecorateAccumulatedTap ) { this.enableDecorateAccumulatedTap = enableDecorateAccumulatedTap; return this; } @Override protected void addPropertiesTo( Properties properties ) { setAssertionLevel( properties, assertionLevel ); setDebugLevel( properties, debugLevel ); setIntermediateSchemeClass( properties, intermediateSchemeClassName ); setTemporaryTapDecoratorClass( properties, temporaryTapDecoratorClassName ); setCheckpointTapDecoratorClass( properties, checkpointTapDecoratorClassName ); if( enableDecorateAccumulatedTap != null ) properties.setProperty( ENABLE_DECORATE_ACCUMULATED_TAP, enableDecorateAccumulatedTap.toString() ); } }