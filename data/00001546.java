public class TupleElementComparator implements StreamComparator < TupleInputStream > , Comparator < Object > { Comparator comparator = new Comparator < Comparable > ( ) { @ Override public int compare ( Comparable lhs , Comparable rhs ) { if ( lhs == null && rhs == null ) return 0 ; if ( lhs == null ) return -1 ; if ( rhs == null ) return 1 ; return lhs . compareTo ( rhs ) ; } } ; public TupleElementComparator ( ) { } public TupleElementComparator ( Comparator comparator ) { if ( comparator != null ) this . comparator = comparator ; } @ Override public int compare ( Object lhs , Object rhs ) { return comparator . compare ( lhs , rhs ) ; } @ Override public int compare ( TupleInputStream lhsStream , TupleInputStream rhsStream ) { Object lhs ; Object rhs ; try { lhs = lhsStream . getNextElement ( ) ; rhs = rhsStream . getNextElement ( ) ; } catch ( IOException exception ) { throw new CascadingException ( "unable to read element from underlying stream" , exception ) ; } try { return comparator . compare ( lhs , rhs ) ; } catch ( Exception exception ) { throw new CascadingException ( "unable to compare Tuples , likely a CoGroup is being attempted on fields of " + "different types or custom comparators are incorrectly set on Fields , lhs : '" + lhs + "' rhs : '" + rhs + "'" , exception ) ; } } }