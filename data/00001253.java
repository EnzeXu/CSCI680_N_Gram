public class URISanitizerTest { @After public void tearDown() { System.setProperty( URISanitizer.PARAMETER_FILTER_PROPERTY, "" ); System.setProperty( URISanitizer.FAILURE_MODE_PASS_THROUGH, "false" ); } @Test public void testNull() { URISanitizer sanitizer = new URISanitizer(); assertNull( sanitizer.apply( Visibility.PUBLIC, null ) ); } @Test public void testSyntaxException() { URISanitizer sanitizer = new URISanitizer(); String malformed = " http: assertEquals( "", sanitizer.apply( Visibility.PUBLIC, malformed ) ); } @Test public void testSyntaxExceptionPassThrough() { System.setProperty( URISanitizer.FAILURE_MODE_PASS_THROUGH, "true" ); URISanitizer sanitizer = new URISanitizer(); String malformed = " http: assertEquals( malformed, sanitizer.apply( Visibility.PUBLIC, malformed ) ); } @Test public void testURIPublicSanitizationWithString() { String uri = "http: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PUBLIC, uri ); assertEquals( "/docs/resource1.html", result ); } @Test public void testURIProtectedSanitizationWithMixedCaseString() { System.setProperty( URISanitizer.PARAMETER_FILTER_PROPERTY, "user,paSSword" ); String uri = "http: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PROTECTED, uri ); assertEquals( "/docs/resource1.html?action=do&", result ); } @Test public void testURIProtectedSanitizationWithString() { System.setProperty( URISanitizer.PARAMETER_FILTER_PROPERTY, "user,password" ); String uri = "http: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PROTECTED, uri ); assertEquals( "/docs/resource1.html?action=do&", result ); } @Test public void testURIPrivateSanitizationWithString() { System.setProperty( URISanitizer.PARAMETER_FILTER_PROPERTY, "user,password" ); String uri = "http: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PRIVATE, uri ); assertEquals( "http: } @Test public void testURIPrivateSanitizationNoScheme() { String uri = "data/stuff"; URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PRIVATE, uri ); assertEquals( uri, result ); } @Test public void testURIPublicSanitizationWithURI() throws IllegalArgumentException { URI uri = URI.create( "http: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PUBLIC, uri ); assertEquals( "/docs/resource1.html", result ); } @Test public void testURIProtectedSanitizationWithURI() throws URISyntaxException { System.setProperty( URISanitizer.PARAMETER_FILTER_PROPERTY, "user,password" ); URI uri = URI.create( "http: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PROTECTED, uri ); assertEquals( "/docs/resource1.html?action=do&", result ); } @Test public void testURIPrivateSanitizationWithURI() throws URISyntaxException { System.setProperty( URISanitizer.PARAMETER_FILTER_PROPERTY, "user,password" ); URI uri = URI.create( "http: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PRIVATE, uri ); assertEquals( "http: } @Test public void testHDFSPublic() { String uri = "hdfs: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PUBLIC, uri ); assertEquals( "/some/dataset", result ); } @Test public void testHDFSProtected() { String uri = "hdfs: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PROTECTED, uri ); assertEquals( "/some/dataset", result ); } @Test public void testHDFSPrivate() { String uri = "hdfs: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PRIVATE, uri ); assertEquals( uri, result ); } @Test public void testS3NGlob() { String uri = "s3n: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PROTECTED, uri ); assertEquals( "/2014/12/2[5-9]/*", result ); } @Test public void testOpaqueURI() { String uri = "memory:driven.agent.driven.spark.SkewExampleTest.testSubmit(SkewExampleTest.scala:36)"; URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PRIVATE, uri ); assertEquals( "memory:driven.agent.driven.spark.SkewExampleTest.testSubmit(SkewExampleTest.scala:36)", result ); result = sanitizer.apply( Visibility.PROTECTED, uri ); assertEquals( "memory:", result ); result = sanitizer.apply( Visibility.PUBLIC, uri ); assertEquals( "memory:", result ); } @Test public void testS3NGlob2() { String uri = "s3n: URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PROTECTED, uri ); assertEquals( "/path/conversion_date={2015-12-23,2015-12-22}", result ); } @Test public void testRelativePathWindows() { String path = "..\\some\\directory"; URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PRIVATE, path ); assertEquals( "../some/directory", result ); } @Test public void testAbsolutePathWindows() { String path = "c:\\some\\directory"; URISanitizer sanitizer = new URISanitizer(); String result = sanitizer.apply( Visibility.PRIVATE, path ); assertEquals( "c: } }