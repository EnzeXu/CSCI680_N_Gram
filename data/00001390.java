public class MixedJoin extends BaseJoiner { public static boolean INNER = true; public static boolean OUTER = false; final boolean[] asInner; @ConstructorProperties({"asInner"}) public MixedJoin( boolean[] asInner ) { this.asInner = Arrays.copyOf( asInner, asInner.length ); } @ConstructorProperties({"fieldDeclaration", "asInner"}) public MixedJoin( Fields fieldDeclaration, boolean[] asInner ) { super( fieldDeclaration ); this.asInner = asInner; } public int numJoins() { return asInner.length - 1; } public Iterator<Tuple> getIterator( JoinerClosure closure ) { return new JoinIterator( closure ); } public class JoinIterator extends OuterJoin.JoinIterator { public JoinIterator( JoinerClosure closure ) { super( closure ); } @Override protected boolean isOuter( int i ) { return !asInner[ i ] && super.isOuter( i ); } } }