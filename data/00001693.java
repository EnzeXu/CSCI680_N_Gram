public class KafkaTapIntegrationTest extends CascadingTestCase { @ ClassRule public static KafkaContainer kafka = new KafkaContainer ( "5 . 1 . 0" ) ; @ Test public void writeRead ( ) throws Exception { handle ( new TextKafkaScheme ( ) , tupleEntry - > tupleEntry . getObject ( 3 ) instanceof String , "my-test-default" ) ; } @ Test public void writeReadTyped ( ) throws Exception { Fields sourceFields = new Fields ( "topic" , String . class ) . append ( new Fields ( "partition" , Integer . class ) ) . append ( new Fields ( "offset" , Long . class ) ) . append ( new Fields ( "key" , Integer . class ) . append ( new Fields ( "value" , Integer . class ) ) . append ( new Fields ( "timestamp" , Long . class ) ) . append ( new Fields ( "tsType" , String . class ) ) ) ; handle ( new TextKafkaScheme ( sourceFields ) , tupleEntry - > tupleEntry . getObject ( 3 ) instanceof Integer , "my-test-typed" ) ; } private void handle ( TextKafkaScheme text , Predicate < TupleEntry > predicate , String topic ) throws IOException { String hostname = kafka . getBootstrapServers ( ) ; KafkaTap < String , String > tap = new KafkaTap < > ( text , hostname , "test-client" , topic + "-topic" ) ; try ( TupleEntryCollector collector = tap . openForWrite ( FlowProcess . nullFlowProcess ( ) ) ) { for ( int i = 0 ; i < 100 ; i++ ) collector . add ( new Tuple ( i , i ) ) ; } { int count = 0 ; try ( TupleEntryIterator iterator = tap . openForRead ( FlowProcess . nullFlowProcess ( ) ) ) { while ( iterator . hasNext ( ) && predicate . test ( iterator . next ( ) ) ) count++ ; } assertEquals ( 100 , count ) ; } { int count = 0 ; try ( TupleEntryIterator iterator = tap . openForRead ( FlowProcess . nullFlowProcess ( ) ) ) { while ( iterator . hasNext ( ) && iterator . next ( ) != null ) count++ ; } assertEquals ( 0 , count ) ; } tap = new KafkaTap < > ( text , hostname , "test-client-2" , "/" + topic + "- . */" ) ; { int count = 0 ; try ( TupleEntryIterator iterator = tap . openForRead ( FlowProcess . nullFlowProcess ( ) ) ) { while ( iterator . hasNext ( ) && iterator . next ( ) != null ) count++ ; } assertEquals ( 100 , count ) ; } } }