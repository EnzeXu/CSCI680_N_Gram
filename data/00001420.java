public class TupleEntryIterableChainIterator extends TupleEntryIterator { Iterator<Iterator<Tuple>> iterators; Iterator<Tuple> currentIterator = null; public TupleEntryIterableChainIterator( Fields fields ) { super( fields ); } public TupleEntryIterableChainIterator( Fields fields, Iterable<Iterator<Tuple>> iterable ) { super( fields ); this.iterators = iterable.iterator(); } public boolean hasNext() { if( currentIterator == null && !iterators.hasNext() ) return false; if( currentIterator != null && currentIterator.hasNext() ) return true; closeCurrent(); currentIterator = null; if( iterators.hasNext() ) currentIterator = iterators.next(); return hasNext(); } public void reset( Iterable<Iterator<Tuple>> iterable ) { this.currentIterator = null; this.iterators = iterable.iterator(); } public TupleEntry next() { hasNext(); entry.setTuple( currentIterator.next() ); return entry; } public void remove() { currentIterator.remove(); } public void close() { if( currentIterator != null ) closeCurrent(); } protected void closeCurrent() { close( currentIterator ); } private void close( Iterator iterator ) { if( iterator instanceof Closeable ) { try { ( (Closeable) iterator ).close(); } catch( IOException exception ) { } } } }