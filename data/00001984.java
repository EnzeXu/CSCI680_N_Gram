public class Dfs extends Hfs { @ConstructorProperties({"scheme", "uri"}) public Dfs( Scheme scheme, URI uri ) { super( scheme, uri.getPath() ); init( uri ); } @ConstructorProperties({"scheme", "uri", "sinkMode"}) public Dfs( Scheme scheme, URI uri, SinkMode sinkMode ) { super( scheme, uri.getPath(), sinkMode ); init( uri ); } @ConstructorProperties({"scheme", "stringPath"}) public Dfs( Scheme scheme, String stringPath ) { super( scheme, stringPath ); } @ConstructorProperties({"scheme", "stringPath", "sinkMode"}) public Dfs( Scheme scheme, String stringPath, SinkMode sinkMode ) { super( scheme, stringPath, sinkMode ); } private void init( URI uri ) { if( !uri.getScheme().equalsIgnoreCase( "hdfs" ) ) throw new IllegalArgumentException( "uri must use the hdfs scheme" ); setUriScheme( URI.create( uri.getScheme() + ": } protected void setStringPath( String stringPath ) { if( stringPath.matches( ".*: throw new IllegalArgumentException( "uri must use the hdfs scheme" ); super.setStringPath( stringPath ); } @Override protected FileSystem getDefaultFileSystem( Configuration configuration ) { String name = configuration.get( "fs.default.name", "hdfs: if( name.equals( "local" ) || name.matches( ".*: name = "hdfs: else if( name.indexOf( '/' ) == -1 ) name = "hdfs: try { return FileSystem.get( URI.create( name ), configuration ); } catch( IOException exception ) { throw new TapException( "unable to get handle to get filesystem for: " + name, exception ); } } }