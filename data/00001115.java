public class Count extends BaseOperation < Pair < Long [ ] , Tuple > > implements Aggregator < Pair < Long [ ] , Tuple > > { public static final String FIELD_NAME = "count" ; public Count ( ) { super ( new Fields ( FIELD_NAME , Long . class ) ) ; } @ ConstructorProperties ( { "fieldDeclaration" } ) public Count ( Fields fieldDeclaration ) { super ( fieldDeclaration ) ; } @ Override public void prepare ( FlowProcess flowProcess , OperationCall < Pair < Long [ ] , Tuple > > operationCall ) { operationCall . setContext ( new Pair < Long [ ] , Tuple > ( new Long [ ] { 0L } , Tuple . size ( 1 ) ) ) ; } @ Override public void start ( FlowProcess flowProcess , AggregatorCall < Pair < Long [ ] , Tuple > > aggregatorCall ) { aggregatorCall . getContext ( ) . getLhs ( ) [ 0 ] = 0L ; } @ Override public void aggregate ( FlowProcess flowProcess , AggregatorCall < Pair < Long [ ] , Tuple > > aggregatorCall ) { aggregatorCall . getContext ( ) . getLhs ( ) [ 0 ] += 1L ; } @ Override public void complete ( FlowProcess flowProcess , AggregatorCall < Pair < Long [ ] , Tuple > > aggregatorCall ) { aggregatorCall . getOutputCollector ( ) . add ( getResult ( aggregatorCall ) ) ; } protected Tuple getResult ( AggregatorCall < Pair < Long [ ] , Tuple > > aggregatorCall ) { aggregatorCall . getContext ( ) . getRhs ( ) . set ( 0 , aggregatorCall . getContext ( ) . getLhs ( ) [ 0 ] ) ; return aggregatorCall . getContext ( ) . getRhs ( ) ; } }