public class Coerce extends SubAssembly { @ ConstructorProperties ( { "previous" , "types" } ) public Coerce ( Pipe previous , Class . . . types ) { super ( previous ) ; if ( types . length == 0 ) throw new IllegalArgumentException ( "given types array may not be zero length" ) ; setTails ( new Each ( previous , new Identity ( types ) ) ) ; } @ ConstructorProperties ( { "previous" , "coerceFields" , "types" } ) public Coerce ( Pipe previous , Fields coerceFields , Class . . . types ) { super ( previous ) ; if ( coerceFields == null ) throw new IllegalArgumentException ( "coerceFields may not be null" ) ; if ( types . length == 0 ) throw new IllegalArgumentException ( "given types array may not be zero length" ) ; setTails ( new Each ( previous , coerceFields , new Identity ( types ) , Fields . REPLACE ) ) ; } @ ConstructorProperties ( { "previous" , "coerceFields" } ) public Coerce ( Pipe previous , Fields coerceFields ) { super ( previous ) ; if ( coerceFields == null ) throw new IllegalArgumentException ( "coerceFields may not be null" ) ; if ( !coerceFields . hasTypes ( ) ) throw new IllegalArgumentException ( "coerceFields must have field types declared" ) ; setTails ( new Each ( previous , coerceFields , new Identity ( coerceFields ) , Fields . REPLACE ) ) ; if ( coerceFields . getTypes ( ) . length == 0 ) throw new IllegalArgumentException ( "number of types must not be zero" ) ; } }