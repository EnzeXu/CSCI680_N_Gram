public class LongClientTest extends ClientBaseCase { public void testParallelGet() throws Throwable { client.shutdown(); initClient(new DefaultConnectionFactory() { @Override public MemcachedConnection createConnection(List<InetSocketAddress> addrs) throws IOException { MemcachedConnection rv = super.createConnection(addrs); return rv; } @Override public long getOperationTimeout() { return 15000; } @Override public boolean shouldOptimize() { return false; } }); byte[] data = new byte[2048]; Random r = new Random(); r.nextBytes(data); final int hashcode = Arrays.hashCode(data); final Collection<String> keys = new ArrayList<String>(); for (int i = 0; i < 50; i++) { client.set("k" + i, 60, data); keys.add("k" + i); } client.waitForQueues(Long.MAX_VALUE, TimeUnit.MILLISECONDS); int cnt = SyncThread.getDistinctResultCount(25, new Callable<Integer>() { public Integer call() throws Exception { for (int i = 0; i < 25; i++) { Map<String, Object> m = client.getBulk(keys); for (String s : keys) { byte[] b = (byte[]) m.get(s); assert Arrays.hashCode(b) == hashcode : "Expected " + hashcode + " was " + Arrays.hashCode(b); } } return hashcode; } }); assertEquals(cnt, 25); } }