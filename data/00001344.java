public class Stop extends BaseOperation implements Filter { private final Filter filter; @ConstructorProperties({"filter"}) public Stop( Filter filter ) { this.filter = filter; if( filter == null ) throw new IllegalArgumentException( "filter may not be null" ); } public Filter getFilter() { return filter; } @Override public void prepare( FlowProcess flowProcess, OperationCall operationCall ) { filter.prepare( flowProcess, operationCall ); } @Override public boolean isRemove( FlowProcess flowProcess, FilterCall filterCall ) { if( filter.isRemove( flowProcess, filterCall ) ) throw new StopDataNotificationException( "data stopped on filter: " + getFilterString() ); return false; } protected String getFilterString() { String string = filter.toString(); if( filter instanceof Traceable ) string += " @ " + ( (Traceable) filter ).getTrace(); return string; } @Override public void cleanup( FlowProcess flowProcess, OperationCall operationCall ) { filter.cleanup( flowProcess, operationCall ); } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof Stop ) ) return false; if( !super.equals( object ) ) return false; Stop not = (Stop) object; if( filter != null ? !filter.equals( not.filter ) : not.filter != null ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( filter != null ? filter.hashCode() : 0 ); return result; } }