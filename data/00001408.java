public class Version { private static final Logger LOG = LoggerFactory.getLogger( Version.class ); private static boolean printedVersion = false; public static final String CASCADING_RELEASE_MAJOR = "cascading.release.major"; public static final String CASCADING_RELEASE_MINOR = "cascading.release.minor"; public static final String CASCADING_BUILD_NUMBER = "cascading.build.number"; public static final String CASCADING = "Cascading"; public static Properties versionProperties; private static synchronized Properties getVersionProperties() { try { if( versionProperties == null ) { versionProperties = loadVersionProperties(); if( versionProperties.isEmpty() ) LOG.warn( "unable to load version information" ); } } catch( IOException exception ) { LOG.warn( "unable to load version information", exception ); versionProperties = new Properties(); } return versionProperties; } public static synchronized void printBanner() { if( printedVersion ) return; printedVersion = true; String version = getVersionString(); if( version != null ) LOG.info( version ); } public static String getVersionString() { if( getVersionProperties().isEmpty() ) return null; String releaseVersion; if( getReleaseBuild() == null || getReleaseBuild().isEmpty() ) releaseVersion = String.format( "%s %s", CASCADING, getReleaseFull() ); else releaseVersion = String.format( "%s %s-%s", CASCADING, getReleaseFull(), getReleaseBuild() ); return releaseVersion; } public static String getRelease() { if( getVersionProperties().isEmpty() ) return null; if( getReleaseBuild() == null || getReleaseBuild().isEmpty() ) return String.format( "%s", getReleaseFull() ); else return String.format( "%s-%s", getReleaseFull(), getReleaseBuild() ); } public static String getReleaseFull() { String releaseFull; if( getReleaseMinor() == null || getReleaseMinor().isEmpty() ) releaseFull = getReleaseMajor(); else releaseFull = String.format( "%s.%s", getReleaseMajor(), getReleaseMinor() ); return releaseFull; } public static boolean hasMajorMinorVersionInfo() { return !Util.isEmpty( getReleaseMinor() ) && !Util.isEmpty( getReleaseMajor() ); } public static boolean hasAllVersionInfo() { return !Util.isEmpty( getReleaseBuild() ) && hasMajorMinorVersionInfo(); } public static String getReleaseBuild() { return getVersionProperties().getProperty( CASCADING_BUILD_NUMBER ); } public static String getReleaseMinor() { return getVersionProperties().getProperty( CASCADING_RELEASE_MINOR ); } public static String getReleaseMajor() { return getVersionProperties().getProperty( CASCADING_RELEASE_MAJOR ); } public static Properties loadVersionProperties() throws IOException { Properties properties = new Properties(); List<URL> resources = Collections.list( Version.class.getClassLoader().getResources( "cascading/version.properties" ) ); if( resources.isEmpty() ) return properties; warnOnDuplicate( resources ); InputStream stream = resources.get( 0 ).openStream(); if( stream == null ) return properties; try { properties.load( stream ); } finally { stream.close(); } stream = Version.class.getClassLoader().getResourceAsStream( "cascading/build.number.properties" ); if( stream != null ) { try { properties.load( stream ); } finally { stream.close(); } } return properties; } private static void warnOnDuplicate( List<URL> resources ) { if( resources.size() == 1 ) return; SetMultiMap<String, String> map = new SetMultiMap<>(); for( URL resource : resources ) map.put( resource.getProtocol(), resource.toString() ); for( String key : map.getKeys() ) { Set<String> values = map.getValues( key ); if( values.size() > 1 ) LOG.warn( "found multiple 'cascading/version.properties' files on the CLASSPATH. Please check your dependencies: {}, using first returned", Util.join( values, "," ) ); } } }