public class ReplaceGraphFactoryBasedTransformer extends MutateGraphTransformer { private final String factoryName; public ReplaceGraphFactoryBasedTransformer( ExpressionGraph filter, String factoryName ) { super( null, filter ); this.factoryName = factoryName; if( factoryName == null ) throw new IllegalArgumentException( "factoryName may not be null" ); } public ReplaceGraphFactoryBasedTransformer( GraphTransformer graphTransformer, ExpressionGraph filter, String factoryName ) { super( graphTransformer, filter ); this.factoryName = factoryName; if( factoryName == null ) throw new IllegalArgumentException( "factoryName may not be null" ); } @Override protected boolean transformGraphInPlaceUsing( Transformed<ElementGraph> transformed, ElementGraph graph, Match match ) { ElementFactory elementFactory = transformed.getPlannerContext().getElementFactoryFor( factoryName ); if( elementFactory == null ) return false; Set<FlowElement> captured = match.getCapturedElements( ElementCapture.Primary ); if( captured.isEmpty() ) return false; else if( captured.size() != 1 ) throw new IllegalStateException( "expected one, but found multiple flow elements in the match expression: " + captured ); FlowElement replace = captured.iterator().next(); FlowElement replaceWith = elementFactory.create( graph, replace ); ElementGraphs.replaceElementWith( graph, replace, replaceWith ); return true; } }