public class Neo4jTapIntegrationTest extends Neo4jIntegrationTestCase { public static String[] values = new String[] { "{\"trace_id\":\"e2366267f86db8f4\", \"parent_id\": 1, \"id\": 2, \"description\":\"Perform needs analysis\", \"tag\":{\"duration\":10}}", "{\"trace_id\":\"e2366267f86db8f4\", \"parent_id\": 2, \"id\": 3, \"description\":\"Perform dependency analysis\", \"annotations\":[{\"timestamp\":1548968531962000,\"value\":\"ws\"},{\"timestamp\":1548968531963000,\"value\":\"wr\"}], \"tag\":{\"duration\":10}}", "{\"trace_id\":\"e2366267f86db8f4\", \"id\": 1, \"description\":\"Start\", \"tag\":{\"duration\":0, \"earliest_start\":0, \"earliest_finish\":0, \"latest_start\":0, \"latest_finish\":0}}", "{\"trace_id\":\"e2366267f86db8f4\", \"parent_id\": 3, \"id\": 4, \"description\":\"More analysis\", \"tag\":{\"role/version\": \"1.1.0\"}}" }; @Test public void write() throws Exception { URI uri = URI.create( "bolt: Properties properties = new Properties(); JSONGraphSpec graphSpec = new JSONGraphSpec( "Span" ); graphSpec .addProperty( "id", "/id", null ); graphSpec .addEdge( "TRACE" ) .addTargetLabel( "Trace" ) .addTargetProperty( "trace_id", "/trace_id", null ); graphSpec .addEdge( "PARENT" ) .addTargetLabel( "Span" ) .addTargetProperty( "id", "/parent_id", null ); Fields json = new Fields( "json", JSONCoercibleType.TYPE ); Neo4jScheme scheme = new Neo4jJSONScheme( json, graphSpec ); Neo4jTap output = new Neo4jTap( properties, scheme, uri ); try( TupleEntryCollector collector = output.openForWrite( FlowProcess.nullFlowProcess() ) ) { for( String value : values ) { collector.add( new Tuple( JSONCoercibleType.TYPE.canonical( value ) ) ); } } Driver driver = GraphDatabase.driver( uri ); Integer result; try( Session session = driver.session() ) { result = session.writeTransaction( tx -> tx.run( "match (n:Span) return count(n)" ) .single() .get( 0 ) .asInt() ); } assertEquals( 4, result.intValue() ); try( Session session = driver.session() ) { result = session.writeTransaction( tx -> tx.run( "match (n:Trace) return count(n)" ) .single() .get( 0 ) .asInt() ); } assertEquals( 1, result.intValue() ); } }