public class Sample extends BaseOperation<Random> implements Filter<Random> { private long seed = 0; private double fraction = 1.0d; @ConstructorProperties({"fraction"}) public Sample( double fraction ) { this.seed = makeSeed(); this.fraction = fraction; } @ConstructorProperties({"seed", "fraction"}) public Sample( long seed, double fraction ) { this.seed = seed; this.fraction = fraction; } @Property(name = "seed", visibility = Visibility.PUBLIC) @PropertyDescription("The randomization seed.") public long getSeed() { return seed; } @Property(name = "fraction", visibility = Visibility.PUBLIC) @PropertyDescription("The fraction of tuples to be returned.") public double getFraction() { return fraction; } protected long makeSeed() { return System.identityHashCode( this ) * 2654435761L ^ System.currentTimeMillis(); } @Override public void prepare( FlowProcess flowProcess, OperationCall<Random> operationCall ) { super.prepare( flowProcess, operationCall ); operationCall.setContext( new Random( seed ) ); } @Override public boolean isRemove( FlowProcess flowProcess, FilterCall<Random> filterCall ) { return !( filterCall.getContext().nextDouble() < fraction ); } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof Sample ) ) return false; if( !super.equals( object ) ) return false; Sample sample = (Sample) object; if( Double.compare( sample.fraction, fraction ) != 0 ) return false; if( seed != sample.seed ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); long temp; result = 31 * result + (int) ( seed ^ seed >>> 32 ); temp = fraction != +0.0d ? Double.doubleToLongBits( fraction ) : 0L; result = 31 * result + (int) ( temp ^ temp >>> 32 ); return result; } }