public class CacheLoaderTest extends BaseMockCase { private ExecutorService es = null ; @ Override protected void setUp ( ) throws Exception { super . setUp ( ) ; BlockingQueue < Runnable > wq = new LinkedBlockingQueue < Runnable > ( ) ; es = new ThreadPoolExecutor ( 10 , 10 , 5 * 60 , TimeUnit . SECONDS , wq ) ; } @ Override protected void tearDown ( ) throws Exception { es . shutdownNow ( ) ; super . tearDown ( ) ; } public void testSimpleLoading ( ) throws Exception { Mock m = mock ( MemcachedClientIF . class ) ; LoadCounter sl = new LoadCounter ( ) ; CacheLoader cl = new CacheLoader ( ( MemcachedClientIF ) m . proxy ( ) , es , sl , 0 ) ; m . expects ( once ( ) ) . method ( "set" ) . with ( eq ( "a" ) , eq ( 0 ) , eq ( 1 ) ) . will ( returnValue ( new ImmediateFuture ( true ) ) ) ; m . expects ( once ( ) ) . method ( "set" ) . with ( eq ( "a" ) , eq ( 0 ) , eq ( 1 ) ) . will ( throwException ( new IllegalStateException ( "Full up" ) ) ) ; m . expects ( once ( ) ) . method ( "set" ) . with ( eq ( "b" ) , eq ( 0 ) , eq ( 2 ) ) . will ( returnValue ( new ImmediateFuture ( new RuntimeException ( "blah" ) ) ) ) ; m . expects ( once ( ) ) . method ( "set" ) . with ( eq ( "c" ) , eq ( 0 ) , eq ( 3 ) ) . will ( returnValue ( new ImmediateFuture ( false ) ) ) ; Map < String , Object > map = new HashMap < String , Object > ( ) ; map . put ( "a" , 1 ) ; map . put ( "b" , 2 ) ; map . put ( "c" , 3 ) ; cl . loadData ( map ) . get ( ) ; es . shutdown ( ) ; es . awaitTermination ( 1 , TimeUnit . SECONDS ) ; assertEquals ( 1 , sl . success . get ( ) ) ; assertEquals ( 1 , sl . exceptions . get ( ) ) ; assertEquals ( 1 , sl . failure . get ( ) ) ; } static class LoadCounter implements CacheLoader . StorageListener { private AtomicInteger exceptions = new AtomicInteger ( 0 ) ; private AtomicInteger success = new AtomicInteger ( 0 ) ; private AtomicInteger failure = new AtomicInteger ( 0 ) ; public void errorStoring ( String k , Exception e ) { exceptions . incrementAndGet ( ) ; } public void storeResult ( String k , boolean result ) { if ( result ) { success . incrementAndGet ( ) ; } else { failure . incrementAndGet ( ) ; } } } }