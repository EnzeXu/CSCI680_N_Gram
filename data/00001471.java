public class Fork < Incoming , Outgoing > extends Duct < Incoming , Outgoing > { protected final Duct [ ] allNext ; public Fork ( Duct [ ] allNext ) { this . allNext = allNext ; } public Duct [ ] getAllNext ( ) { return allNext ; } @ Override public Duct getNext ( ) { return allNext [ 0 ] ; } @ Override public void start ( Duct previous ) { for ( int i = 0 ; i < allNext . length ; i++ ) allNext [ i ] . start ( previous ) ; } @ Override public void receive ( Duct previous , int ordinal , Incoming incoming ) { for ( int i = 0 ; i < allNext . length ; i++ ) allNext [ i ] . receive ( previous , i , incoming ) ; } @ Override public void complete ( Duct previous ) { for ( int i = 0 ; i < allNext . length ; i++ ) allNext [ i ] . complete ( previous ) ; } }