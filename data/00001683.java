public class LocalFlowStep extends BaseFlowStep < Properties > { private final Map < Tap , Properties > tapProperties = new HashMap < Tap , Properties > ( ) ; public LocalFlowStep ( ElementGraph elementGraph , FlowNodeGraph flowNodeGraph ) { super ( elementGraph , flowNodeGraph ) ; } @ Override public Map < Object , Object > getConfigAsProperties ( ) { return getConfig ( ) ; } @ Override public Properties createInitializedConfig ( FlowProcess < Properties > flowProcess , Properties parentConfig ) { Properties currentProperties = parentConfig == null ? new Properties ( ) : new Properties ( parentConfig ) ; initTaps ( flowProcess , currentProperties , getSourceTaps ( ) , false ) ; initTaps ( flowProcess , currentProperties , getSinkTaps ( ) , true ) ; initTaps ( flowProcess , currentProperties , getTraps ( ) , true ) ; initFromStepConfigDef ( currentProperties ) ; initFromNodeConfigDef ( currentProperties ) ; return currentProperties ; } protected void initTaps ( FlowProcess < Properties > flowProcess , Properties conf , Set < Tap > taps , boolean isSink ) { if ( !taps . isEmpty ( ) ) { for ( Tap tap : taps ) { Properties confCopy = flowProcess . copyConfig ( conf ) ; tapProperties . put ( tap , confCopy ) ; if ( isSink ) tap . sinkConfInit ( flowProcess , confCopy ) ; else tap . sourceConfInit ( flowProcess , confCopy ) ; } } } private void initFromNodeConfigDef ( final Properties properties ) { initConfFromNodeConfigDef ( Util . getFirst ( getFlowNodeGraph ( ) . vertexSet ( ) ) . getElementGraph ( ) , getSetterFor ( properties ) ) ; } private void initFromStepConfigDef ( final Properties properties ) { initConfFromStepConfigDef ( getSetterFor ( properties ) ) ; } private ConfigDef . Setter getSetterFor ( final Properties properties ) { return new ConfigDef . Setter ( ) { @ Override public String set ( String key , String value ) { String oldValue = get ( key ) ; properties . setProperty ( key , value ) ; return oldValue ; } @ Override public String update ( String key , String value ) { String oldValue = get ( key ) ; if ( oldValue == null ) properties . setProperty ( key , value ) ; else if ( !oldValue . contains ( value ) ) properties . setProperty ( key , oldValue + " , " + value ) ; return oldValue ; } @ Override public String get ( String key ) { String value = properties . getProperty ( key ) ; if ( value == null || value . isEmpty ( ) ) return null ; return value ; } } ; } @ Override public void clean ( Properties config ) { } @ Override protected FlowStepJob < Properties > createFlowStepJob ( ClientState clientState , FlowProcess < Properties > flowProcess , Properties initializedStepConfig ) { flowProcess = flowProcess . copyWith ( initializedStepConfig ) ; return new LocalFlowStepJob ( clientState , ( LocalFlowProcess ) flowProcess , this ) ; } public Map < Tap , Properties > getPropertiesMap ( ) { return tapProperties ; } }