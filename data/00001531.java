public class HadoopConfigDefScheme extends cascading . scheme . hadoop . TextLine { private final boolean supportsNodeConfig ; public HadoopConfigDefScheme ( Fields sourceFields , boolean supportsNodeConfig ) { super ( sourceFields ) ; this . supportsNodeConfig = supportsNodeConfig ; } @ Override public void sourceConfInit ( FlowProcess < ? extends Configuration > flowProcess , Tap < Configuration , RecordReader , OutputCollector > tap , Configuration conf ) { if ( flowProcess . getProperty ( "default" ) != null ) throw new RuntimeException ( "default should be null" ) ; super . sourceConfInit ( flowProcess , tap , conf ) ; } @ Override public void sinkConfInit ( FlowProcess < ? extends Configuration > flowProcess , Tap < Configuration , RecordReader , OutputCollector > tap , Configuration conf ) { if ( flowProcess . getProperty ( "default" ) != null ) throw new RuntimeException ( "default should be null" ) ; super . sinkConfInit ( flowProcess , tap , conf ) ; } @ Override public void sourcePrepare ( FlowProcess < ? extends Configuration > flowProcess , SourceCall < Object [ ] , RecordReader > sourceCall ) { if ( ! ( flowProcess instanceof FlowProcessWrapper ) ) throw new RuntimeException ( "not a flow process wrapper" ) ; if ( !"process-default" . equals ( flowProcess . getProperty ( "default" ) ) ) throw new RuntimeException ( "not default value" ) ; if ( !"source-replace" . equals ( flowProcess . getProperty ( "replace" ) ) ) throw new RuntimeException ( "not replaced value" ) ; if ( supportsNodeConfig && !"node-replace" . equals ( flowProcess . getProperty ( "default-node" ) ) ) throw new RuntimeException ( "not replaced value" ) ; flowProcess = ( ( FlowProcessWrapper ) flowProcess ) . getDelegate ( ) ; if ( !"process-default" . equals ( flowProcess . getProperty ( "default" ) ) ) throw new RuntimeException ( "not default value" ) ; if ( !"process-replace" . equals ( flowProcess . getProperty ( "replace" ) ) ) throw new RuntimeException ( "not replaced value" ) ; super . sourcePrepare ( flowProcess , sourceCall ) ; } @ Override public void sinkPrepare ( FlowProcess < ? extends Configuration > flowProcess , SinkCall < Object [ ] , OutputCollector > sinkCall ) throws IOException { if ( ! ( flowProcess instanceof FlowProcessWrapper ) ) throw new RuntimeException ( "not a flow process wrapper" ) ; if ( !"process-default" . equals ( flowProcess . getProperty ( "default" ) ) ) throw new RuntimeException ( "not default value" ) ; if ( !"sink-replace" . equals ( flowProcess . getProperty ( "replace" ) ) ) throw new RuntimeException ( "not replaced value" ) ; flowProcess = ( ( FlowProcessWrapper ) flowProcess ) . getDelegate ( ) ; if ( !"process-default" . equals ( flowProcess . getProperty ( "default" ) ) ) throw new RuntimeException ( "not default value" ) ; if ( !"process-replace" . equals ( flowProcess . getProperty ( "replace" ) ) ) throw new RuntimeException ( "not replaced value" ) ; super . sinkPrepare ( flowProcess , sinkCall ) ; } }