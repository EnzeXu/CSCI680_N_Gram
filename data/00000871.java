public class DrawableFactory { private static Drawable blank = null ; private static int blankWidth = -1 ; private static int blankHeight = -1 ; private ReferenceMap customIconMap = new ReferenceMap ( AbstractReferenceMap . HARD , AbstractReferenceMap . WEAK ) ; private ReferenceMap standardIconMap = new ReferenceMap ( AbstractReferenceMap . HARD , AbstractReferenceMap . WEAK ) ; public void assignDrawableTo ( ImageView iv , Resources res , PwIcon icon ) { Drawable draw = getIconDrawable ( res , icon ) ; iv . setImageDrawable ( draw ) ; } private Drawable getIconDrawable ( Resources res , PwIcon icon ) { if ( icon instanceof PwIconStandard ) { return getIconDrawable ( res , ( PwIconStandard ) icon ) ; } else { return getIconDrawable ( res , ( PwIconCustom ) icon ) ; } } private static void initBlank ( Resources res ) { if ( blank==null ) { blank = res . getDrawable ( R . drawable . ic99_blank ) ; blankWidth = blank . getIntrinsicWidth ( ) ; blankHeight = blank . getIntrinsicHeight ( ) ; } } public Drawable getIconDrawable ( Resources res , PwIconStandard icon ) { int resId = Icons . iconToResId ( icon . iconId ) ; Drawable draw = ( Drawable ) standardIconMap . get ( resId ) ; if ( draw == null ) { draw = res . getDrawable ( resId ) ; standardIconMap . put ( resId , draw ) ; } return draw ; } public Drawable getIconDrawable ( Resources res , PwIconCustom icon ) { initBlank ( res ) ; if ( icon == null ) { return blank ; } Drawable draw = ( Drawable ) customIconMap . get ( icon . uuid ) ; if ( draw == null ) { if ( icon . imageData == null ) { return blank ; } Bitmap bitmap = BitmapFactory . decodeByteArray ( icon . imageData , 0 , icon . imageData . length ) ; if ( bitmap == null ) { return blank ; } bitmap = resize ( bitmap ) ; draw = new BitmapDrawable ( res , bitmap ) ; customIconMap . put ( icon . uuid , draw ) ; } return draw ; } private Bitmap resize ( Bitmap bitmap ) { int width = bitmap . getWidth ( ) ; int height = bitmap . getHeight ( ) ; if ( width == blankWidth && height == blankHeight ) { return bitmap ; } return Bitmap . createScaledBitmap ( bitmap , blankWidth , blankHeight , true ) ; } public void clear ( ) { standardIconMap . clear ( ) ; customIconMap . clear ( ) ; } }