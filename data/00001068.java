public class GraphFinderTest extends CascadingTestCase { @ Test public void testFind ( ) { ElementGraph graph = new HashJoinSameSourceGraph ( ) ; graph = new ContractedTransformer ( new SyncPipeExpressionGraph ( ) ) . transform ( graph ) . getEndGraph ( ) ; FlowElementExpression SHARED_TAP = new FlowElementExpression ( Tap . class , TypeExpression . Topo . SplitOnly ) ; FlowElementExpression SHARED_HASHJOIN = new FlowElementExpression ( HashJoin . class ) ; ExpressionGraph expressionGraph = new ExpressionGraph ( ) . arcs ( SHARED_TAP , SHARED_HASHJOIN ) . arcs ( SHARED_TAP , SHARED_HASHJOIN ) ; GraphFinder graphFinder = new GraphFinder ( expressionGraph ) ; Match match = graphFinder . findFirstMatch ( graph ) ; match . getMatchedGraph ( ) . writeDOT ( getPlanPath ( ) + "/match . dot" ) ; } @ Test public void testFind2 ( ) { ElementGraph graph = new HashJoinSameSourceGraph ( ) ; graph = new ContractedTransformer ( new SyncPipeExpressionGraph ( ) ) . transform ( graph ) . getEndGraph ( ) ; FlowElementExpression sharedTap = new FlowElementExpression ( Tap . class , TypeExpression . Topo . SplitOnly ) ; FlowElementExpression sharedHashJoin = new FlowElementExpression ( HashJoin . class ) ; ExpressionGraph expressionGraph = new ExpressionGraph ( ) . arc ( sharedTap , ScopeExpression . ALL , sharedHashJoin ) ; GraphFinder graphFinder = new GraphFinder ( expressionGraph ) ; Match match = graphFinder . findFirstMatch ( graph ) ; match . getMatchedGraph ( ) . writeDOT ( getPlanPath ( ) + "/match . dot" ) ; } @ Test public void testFindAllOnPrimary ( ) { ElementGraph graph = new JoinAroundJoinRightMostGraph ( ) ; graph . writeDOT ( getPlanPath ( ) + "/full . dot" ) ; graph = new ContractedTransformer ( new NoGroupTapExpressionGraph ( ) ) . transform ( graph ) . getEndGraph ( ) ; graph . writeDOT ( getPlanPath ( ) + "/contracted . dot" ) ; ExpressionGraph expressionGraph = new ExpressionGraph ( ) . arc ( new FlowElementExpression ( Tap . class ) , ScopeExpression . ALL , new FlowElementExpression ( ElementCapture . Primary , HashJoin . class ) ) ; GraphFinder graphFinder = new GraphFinder ( expressionGraph ) ; Match match = graphFinder . findAllMatchesOnPrimary ( graph ) ; match . getMatchedGraph ( ) . writeDOT ( getPlanPath ( ) + "/match . dot" ) ; } @ Test public void testFindAllMatched ( ) { ElementGraph graph = new JoinAroundJoinRightMostGraph ( ) ; graph . writeDOT ( getPlanPath ( ) + "/full . dot" ) ; graph = new ContractedTransformer ( new NoGroupTapExpressionGraph ( ) ) . transform ( graph ) . getEndGraph ( ) ; graph . writeDOT ( getPlanPath ( ) + "/contracted . dot" ) ; ExpressionGraph expressionGraph = new ExpressionGraph ( new FlowElementExpression ( ElementCapture . Primary , Tap . class ) ) ; GraphFinder graphFinder = new GraphFinder ( expressionGraph ) ; Match match = graphFinder . findAllMatches ( graph ) ; match . getMatchedGraph ( ) . writeDOT ( getPlanPath ( ) + "/match . dot" ) ; } }