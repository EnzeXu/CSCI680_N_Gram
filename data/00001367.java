public class MaxBy extends AggregateBy { @Deprecated public static final int DEFAULT_THRESHOLD = 10000; public static class MaxPartials implements Functor { private final Fields declaredFields; public MaxPartials( Fields declaredFields ) { this.declaredFields = declaredFields; if( declaredFields.size() != 1 ) throw new IllegalArgumentException( "declared fields may only have one field, got: " + declaredFields ); } @Override public Fields getDeclaredFields() { return declaredFields; } @Override public Tuple aggregate( FlowProcess flowProcess, TupleEntry args, Tuple context ) { if( context == null ) return args.getTupleCopy(); else if( args.getObject( 0 ) == null ) return context; Comparable lhs = (Comparable) context.getObject( 0 ); Comparable rhs = (Comparable) args.getObject( 0 ); if( ( lhs == null ) || ( lhs.compareTo( rhs ) < 0 ) ) context.set( 0, rhs ); return context; } @Override public Tuple complete( FlowProcess flowProcess, Tuple context ) { return context; } } @ConstructorProperties({"valueField", "maxField"}) public MaxBy( Fields valueField, Fields maxField ) { super( valueField, new MaxPartials( maxField ), new MaxValue( maxField ) ); } @ConstructorProperties({"pipe", "groupingFields", "valueField", "maxField"}) public MaxBy( Pipe pipe, Fields groupingFields, Fields valueField, Fields maxField ) { this( null, pipe, groupingFields, valueField, maxField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipe", "groupingFields", "valueField", "maxField", "threshold"}) public MaxBy( Pipe pipe, Fields groupingFields, Fields valueField, Fields maxField, int threshold ) { this( null, pipe, groupingFields, valueField, maxField, threshold ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueField", "maxField"}) public MaxBy( String name, Pipe pipe, Fields groupingFields, Fields valueField, Fields maxField ) { this( name, pipe, groupingFields, valueField, maxField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueField", "maxField", "threshold"}) public MaxBy( String name, Pipe pipe, Fields groupingFields, Fields valueField, Fields maxField, int threshold ) { this( name, Pipe.pipes( pipe ), groupingFields, valueField, maxField, threshold ); } @ConstructorProperties({"pipes", "groupingFields", "valueField", "maxField"}) public MaxBy( Pipe[] pipes, Fields groupingFields, Fields valueField, Fields maxField ) { this( null, pipes, groupingFields, valueField, maxField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipes", "groupingFields", "valueField", "maxField", "threshold"}) public MaxBy( Pipe[] pipes, Fields groupingFields, Fields valueField, Fields maxField, int threshold ) { this( null, pipes, groupingFields, valueField, maxField, threshold ); } @ConstructorProperties({"name", "pipes", "groupingFields", "valueField", "maxField"}) public MaxBy( String name, Pipe[] pipes, Fields groupingFields, Fields valueField, Fields maxField ) { this( name, pipes, groupingFields, valueField, maxField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipes", "groupingFields", "valueField", "maxField", "threshold"}) public MaxBy( String name, Pipe[] pipes, Fields groupingFields, Fields valueField, Fields maxField, int threshold ) { super( name, pipes, groupingFields, valueField, new MaxPartials( maxField ), new MaxValue( maxField ), threshold ); } }