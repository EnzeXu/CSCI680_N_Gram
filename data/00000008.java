public class AsciiClientTest extends ProtocolBaseCase { public void testBadOperation ( ) throws Exception { client . mconn . enqueueOperation ( "x" , new ExtensibleOperationImpl ( new OperationCallback ( ) { public void complete ( ) { System . err . println ( "Complete . " ) ; } public void receivedStatus ( OperationStatus s ) { System . err . println ( "Received a line . " ) ; } } ) { @ Override public void handleLine ( String line ) { System . out . println ( "Woo! A line!" ) ; } @ Override public void initialize ( ) { setBuffer ( ByteBuffer . wrap ( "garbage\r\n" . getBytes ( ) ) ) ; } } ) ; } @ Override @ Test ( expected=UnsupportedOperationException . class ) public void testSetReturnsCAS ( ) { } @ Override protected String getExpectedVersionSource ( ) { return String . valueOf ( new InetSocketAddress ( TestConfig . IPV4_ADDR , TestConfig . PORT_NUMBER ) ) ; } public void testAsyncCASResponse ( ) throws InterruptedException , ExecutionException { String key = "testAsyncCASResponse" ; client . set ( key , 300 , key + "0" ) ; CASValue < Object > getsRes = client . gets ( key ) ; OperationFuture < CASResponse > casRes = client . asyncCAS ( key , getsRes . getCas ( ) , key + "1" ) ; try { casRes . getCas ( ) ; fail ( "Expected an UnsupportedOperationException" ) ; } catch ( UnsupportedOperationException ex ) { } } public void testAddGetSetStatusCodes ( ) throws Exception { OperationFuture < Boolean > set = client . set ( "statusCode1" , 0 , "value" ) ; set . get ( ) ; assertEquals ( StatusCode . SUCCESS , set . getStatus ( ) . getStatusCode ( ) ) ; GetFuture < Object > get = client . asyncGet ( "statusCode1" ) ; get . get ( ) ; assertEquals ( StatusCode . SUCCESS , get . getStatus ( ) . getStatusCode ( ) ) ; OperationFuture < Boolean > add = client . add ( "statusCode1" , 0 , "value2" ) ; add . get ( ) ; assertEquals ( StatusCode . ERR_NOT_STORED , add . getStatus ( ) . getStatusCode ( ) ) ; } public void testAsyncIncrementWithDefault ( ) throws Exception { String k = "async-incr-with-default" ; try { client . asyncIncr ( k , 1 , 5 ) ; assertTrue ( false ) ; } catch ( UnsupportedOperationException e ) { assertTrue ( true ) ; } } public void testAsyncDecrementWithDefault ( ) throws Exception { String k = "async-decr-with-default" ; try { client . asyncDecr ( k , 1 , 5 ) ; assertTrue ( false ) ; } catch ( UnsupportedOperationException e ) { assertTrue ( true ) ; } } }