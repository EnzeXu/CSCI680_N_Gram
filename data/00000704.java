public class SearchTest { private Database mDb; @Before public void setUp() throws Exception { Context ctx = InstrumentationRegistry.getInstrumentation().getTargetContext(); mDb = TestData.GetDb1(ctx, true); } @Test public void testSearch() { PwGroup results = mDb.Search("Amazon"); assertTrue("Search result not found.", results.childEntries.size() > 0); } @Test public void testBackupIncluded() { updateOmitSetting(false); PwGroup results = mDb.Search("BackupOnly"); assertTrue("Search result not found.", results.childEntries.size() > 0); } @Test public void testBackupExcluded() { updateOmitSetting(true); PwGroup results = mDb.Search("BackupOnly"); assertFalse("Search result found, but should not have been.", results.childEntries.size() > 0); } private void updateOmitSetting(boolean setting) { Context ctx = InstrumentationRegistry.getInstrumentation().getTargetContext(); SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx); SharedPreferences.Editor editor = prefs.edit(); editor.putBoolean(ctx.getString(R.string.omitbackup_key), setting); editor.commit(); } }