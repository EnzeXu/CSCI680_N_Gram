public class ExpressionOperation extends ScriptOperation { @ ConstructorProperties ( { "expression" } ) protected ExpressionOperation ( String expression ) { super ( ANY , expression , Boolean . class ) ; } @ ConstructorProperties ( { "fieldDeclaration" , "expression" } ) protected ExpressionOperation ( Fields fieldDeclaration , String expression ) { super ( ANY , fieldDeclaration , expression , asClass ( fieldDeclaration . getType ( 0 ) ) ) ; } @ ConstructorProperties ( { "fieldDeclaration" , "expression" , "parameterType" } ) protected ExpressionOperation ( Fields fieldDeclaration , String expression , Class parameterType ) { super ( 1 , fieldDeclaration , expression , asClass ( fieldDeclaration . getType ( 0 ) ) , null , new Class [ ] { parameterType } ) ; } @ ConstructorProperties ( { "fieldDeclaration" , "expression" , "parameterNames" , "parameterTypes" } ) protected ExpressionOperation ( Fields fieldDeclaration , String expression , String [ ] parameterNames , Class [ ] parameterTypes ) { super ( parameterTypes . length , fieldDeclaration , expression , asClass ( fieldDeclaration . getType ( 0 ) ) , parameterNames , parameterTypes ) ; } @ ConstructorProperties ( { "expression" , "parameterType" } ) protected ExpressionOperation ( String expression , Class parameterType ) { super ( 1 , expression , Object . class , null , new Class [ ] { parameterType } ) ; } @ ConstructorProperties ( { "expression" , "parameterNames" , "parameterTypes" } ) protected ExpressionOperation ( String expression , String [ ] parameterNames , Class [ ] parameterTypes ) { super ( parameterTypes . length , expression , Object . class , parameterNames , parameterTypes ) ; } public String getExpression ( ) { return getBlock ( ) ; } protected String [ ] guessParameterNames ( ) throws CompileException , IOException { return ExpressionEvaluator . guessParameterNames ( new Scanner ( "expressionEval" , new StringReader ( block ) ) ) ; } @ Override protected Evaluator getEvaluator ( Class returnType , String [ ] parameterNames , Class [ ] parameterTypes ) { try { ExpressionEvaluator evaluator = new ExpressionEvaluator ( ) ; evaluator . setReturnType ( returnType ) ; evaluator . setParameters ( parameterNames , parameterTypes ) ; evaluator . setExtendedClass ( getExtendedClass ( ) ) ; evaluator . cook ( block ) ; return evaluator : : evaluate ; } catch ( CompileException exception ) { throw new OperationException ( "could not compile expression : " + block , exception ) ; } } }