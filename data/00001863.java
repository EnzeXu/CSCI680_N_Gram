public class FlowPlatformTest extends PlatformTestCase { @Test public void testStop() throws Exception { getPlatform().copyFromLocal( inputFileApache200 ); Tap source = getPlatform().getTextFile( new Fields( "offset", "line" ), inputFileApache200 ); Pipe pipe = new Pipe( "test" ); int limit = 10; Semaphore start = new Semaphore( 0 ); AtomicInteger count = new AtomicInteger( 0 ); pipe = new Each( pipe, new Fields( "line" ), new Identity( Fields.ARGS ) { @Override public void operate( FlowProcess flowProcess, FunctionCall<Identity.Functor> functionCall ) { int i = count.getAndAdd( 1 ); if( i >= limit ) { start.release(); return; } super.operate( flowProcess, functionCall ); } } ); Tap sink = getPlatform().getTextFile( getOutputPath( "simple" ), SinkMode.REPLACE ); Flow flow = getPlatform().getFlowConnector().connect( source, sink, pipe ); flow.start(); start.acquire(); flow.stop(); long sourceSize = entryStream( source, flow.getFlowProcess() ).count(); long sinkSize = entryStream( sink, flow.getFlowProcess() ).count(); assertNotSame( sourceSize, sinkSize ); assertEquals( limit, sinkSize ); } }