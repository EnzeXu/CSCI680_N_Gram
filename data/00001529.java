public class AnnotateGraphTransformer extends RecursiveGraphTransformer<ElementGraph> { private final ElementAnnotation annotation; protected final GraphTransformer graphTransformer; public AnnotateGraphTransformer( ExpressionGraph match, ElementAnnotation annotation ) { super( match ); this.annotation = annotation; this.graphTransformer = null; } public AnnotateGraphTransformer( GraphTransformer graphTransformer, ExpressionGraph match, ElementAnnotation annotation ) { super( match ); this.annotation = annotation; this.graphTransformer = graphTransformer; } @Override protected boolean requiresRecursiveSearch() { return graphTransformer != null || super.requiresRecursiveSearch(); } @Override protected ElementGraph prepareForMatch( ProcessLogger processLogger, Transformed<ElementGraph> transformed, ElementGraph graph ) { if( graphTransformer == null ) return makeAnnotated( graph ); Transformed child = graphTransformer.transform( transformed.getPlannerContext(), graph ); transformed.addChildTransform( child ); ElementGraph endGraph = child.getEndGraph(); return makeAnnotated( endGraph ); } private ElementGraph makeAnnotated( ElementGraph endGraph ) { if( endGraph == null ) return null; if( endGraph instanceof AnnotatedGraph ) return endGraph; return new ElementMultiGraph( endGraph ); } @Override protected Set<FlowElement> addExclusions( ElementGraph graph ) { return ( (AnnotatedGraph) graph ).getAnnotations().getValues( annotation.getAnnotation() ); } @Override protected boolean transformGraphInPlaceUsing( Transformed<ElementGraph> transformed, ElementGraph graph, Match match ) { Set<FlowElement> captured = match.getCapturedElements( annotation.getCapture() ); if( captured.isEmpty() ) return false; ( (AnnotatedGraph) graph ).getAnnotations().addAll( annotation.getAnnotation(), captured ); return true; } }