public class JSONGetAllAggregateFunctionTest extends CascadingTestCase { @Test public void testGetAggregateSumLong() { TupleEntry entry = new TupleEntry( new Fields( "json", JSONCoercibleType.TYPE ), Tuple.size( 1 ) ); entry.setObject( 0, JSONData.peopleWithNulls ); Map<String, NestedAggregate<JsonNode, ?>> pointerMap = new LinkedHashMap<>(); pointerMap.put( "/person/age", new SumLongNestedAggregate<>( new Fields( "sum", Long.TYPE ) ) ); JSONGetAllAggregateFunction function = new JSONGetAllAggregateFunction( "/people/*", pointerMap ); TupleListCollector result = invokeFunction( function, entry, new Fields( "result" ) ); assertEquals( 1, result.size() ); assertEquals( 99L, result.iterator().next().getObject( 0 ) ); } @Test public void testGetAggregateSumDouble() { TupleEntry entry = new TupleEntry( new Fields( "json", JSONCoercibleType.TYPE ), Tuple.size( 1 ) ); entry.setObject( 0, JSONData.peopleWithNulls ); Map<String, NestedAggregate<JsonNode, ?>> pointerMap = new LinkedHashMap<>(); pointerMap.put( "/person/age", new SumDoubleNestedAggregate<>( new Fields( "sum", Double.class ) ) ); JSONGetAllAggregateFunction function = new JSONGetAllAggregateFunction( "/people/*", pointerMap ); TupleListCollector result = invokeFunction( function, entry, new Fields( "result" ) ); assertEquals( 1, result.size() ); assertEquals( 99D, result.iterator().next().getObject( 0 ) ); } @Test public void testGetAggregateAverageDoubleAll() { runAverage( new AverageDoubleNestedAggregate<>( new Fields( "avg", Double.class ) ), 33.0 ); } @Test public void testGetAggregateAverageDoubleAllPrimitive() { runAverage( new AverageDoubleNestedAggregate<>( new Fields( "avg", Double.TYPE ) ), 33.0 ); } @Test public void testGetAggregateAverageDoubleNonNull() { runAverage( new AverageDoubleNestedAggregate<>( new Fields( "avg", Double.class ), AverageDoubleNestedAggregate.Include.NO_NULLS ), 49.5 ); } @Test public void testGetAggregateAverageDoubleNonNullPrimitive() { runAverage( new AverageDoubleNestedAggregate<>( new Fields( "avg", Double.TYPE ), AverageDoubleNestedAggregate.Include.NO_NULLS ), 49.5 ); } private void runAverage( AverageDoubleNestedAggregate<JsonNode> avg, double expected ) { TupleEntry entry = new TupleEntry( new Fields( "json", JSONCoercibleType.TYPE ), Tuple.size( 1 ) ); entry.setObject( 0, JSONData.peopleWithNulls ); Map<String, NestedAggregate<JsonNode, ?>> pointerMap = new LinkedHashMap<>(); pointerMap.put( "/person/age", avg ); JSONGetAllAggregateFunction function = new JSONGetAllAggregateFunction( "/people/*", pointerMap ); TupleListCollector result = invokeFunction( function, entry, new Fields( "result" ) ); assertEquals( 1, result.size() ); assertEquals( expected, result.iterator().next().getObject( 0 ) ); } @Test public void testGetAggregateFunction() { TupleEntry entry = new TupleEntry( new Fields( "json", JSONCoercibleType.TYPE ), Tuple.size( 1 ) ); entry.setObject( 0, JSONData.peopleWithNulls ); Map<String, NestedAggregate<JsonNode, ?>> pointerMap = new LinkedHashMap<>(); SerFunction<CoercibleType<JsonNode>, SimpleNestedAggregate.AggregateContext<JsonNode>> factory = ( c ) -> new SimpleNestedAggregate.AggregateContext<JsonNode>() { final Pointer<JsonNode> weightPointer = ( (JSONCoercibleType) c ).getNestedPointerCompiler().compile( "/weight" ); final Pointer<JsonNode> heightPointer = ( (JSONCoercibleType) c ).getNestedPointerCompiler().compile( "/height" ); final Tuple result = Tuple.size( 1 ); int count = 0; double sum = 0; @Override public void aggregate( JsonNode jsonNode ) { long weight = weightPointer.at( jsonNode ).asLong( -1 ); long height = heightPointer.at( jsonNode ).asLong( -1 ); if( weight == -1 || height == -1 ) return; count++; sum += (double) height / (double) weight; } @Override public Tuple complete() { result.set( 0, sum / count ); return result; } @Override public void reset() { count = 0; sum = 0; } }; pointerMap.put( "/person/measures", new SimpleNestedAggregate<>( new Fields( "ratio", Long.TYPE ), factory ) ); JSONGetAllAggregateFunction function = new JSONGetAllAggregateFunction( "/people/*", pointerMap ); TupleListCollector result = invokeFunction( function, entry, new Fields( "result" ) ); assertEquals( 1, result.size() ); assertEquals( 0.55d, result.iterator().next().getObject( 0 ) ); } }