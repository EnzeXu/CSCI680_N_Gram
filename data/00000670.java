public class PromptHelper { private final Object tag ; private Handler handler = null ; private Semaphore promptToken ; private Semaphore promptResponse ; public String promptInstructions = null ; public String promptHint = null ; public Object promptRequested = null ; private Object response = null ; public PromptHelper ( Object tag ) { this . tag = tag ; promptToken = new Semaphore ( 1 ) ; promptResponse = new Semaphore ( 0 ) ; } public void setHandler ( Handler handler ) { this . handler = handler ; } public void setResponse ( Object value ) { response = value ; promptRequested = null ; promptInstructions = null ; promptHint = null ; promptResponse . release ( ) ; } protected Object popResponse ( ) { Object value = response ; response = null ; return value ; } private Object requestPrompt ( String instructions , String hint , Object type ) throws InterruptedException { Object response = null ; promptToken . acquire ( ) ; try { promptInstructions = instructions ; promptHint = hint ; promptRequested = type ; if ( handler != null ) Message . obtain ( handler , -1 , tag ) . sendToTarget ( ) ; promptResponse . acquire ( ) ; response = popResponse ( ) ; } finally { promptToken . release ( ) ; } return response ; } public String requestStringPrompt ( String instructions , String hint ) { String value = null ; try { value = ( String ) requestPrompt ( instructions , hint , String . class ) ; } catch ( Exception ignored ) { } return value ; } public Boolean requestBooleanPrompt ( String instructions , String hint ) { Boolean value = null ; try { value = ( Boolean ) requestPrompt ( instructions , hint , Boolean . class ) ; } catch ( Exception ignored ) { } return value ; } public void cancelPrompt ( ) { if ( !promptToken . tryAcquire ( ) ) { response = null ; promptResponse . release ( ) ; } else { promptToken . release ( ) ; } } }