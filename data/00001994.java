public class FSDigestInputStream extends FSInputStream { private static final Logger LOG = LoggerFactory.getLogger( FSDigestInputStream.class ); int count = 0; final InputStream inputStream; final String digestHex; public FSDigestInputStream( InputStream inputStream, String digestHex ) throws IOException { this( inputStream, getMD5Digest(), digestHex ); } public FSDigestInputStream( InputStream inputStream, MessageDigest messageDigest, String digestHex ) { this.inputStream = digestHex == null ? inputStream : new DigestInputStream( inputStream, messageDigest ); this.digestHex = digestHex; } private static MessageDigest getMD5Digest() throws IOException { try { return MessageDigest.getInstance( "MD5" ); } catch( NoSuchAlgorithmException exception ) { throw new IOException( "digest not found: " + exception.getMessage() ); } } @Override public int read() throws IOException { count++; return inputStream.read(); } @Override public int read( byte[] b, int off, int len ) throws IOException { int result = inputStream.read( b, off, len ); count += result; return result; } @Override public void close() throws IOException { inputStream.close(); LOG.info( "closing stream, testing digest: [{}]", digestHex == null ? "none" : digestHex ); if( digestHex == null ) return; String digestHex = new String( Hex.encodeHex( ( (DigestInputStream) inputStream ).getMessageDigest().digest() ) ); if( !digestHex.equals( this.digestHex ) ) { String message = "given digest: [" + this.digestHex + "], does not match input stream digest: [" + digestHex + "]"; LOG.error( message ); throw new IOException( message ); } } @Override public void seek( long pos ) throws IOException { if( getPos() == pos ) return; if( getPos() > pos ) throw new IOException( "cannot seek to " + pos + ", currently at" + getPos() ); int len = (int) ( pos - getPos() ); byte[] bytes = new byte[ 50 * 1024 ]; while( len > 0 ) len -= read( bytes, 0, Math.min( len, bytes.length ) ); } @Override public long getPos() throws IOException { return count; } @Override public boolean seekToNewSource( long targetPos ) throws IOException { return false; } }