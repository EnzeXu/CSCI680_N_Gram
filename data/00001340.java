public class DateOperation extends BaseOperation<Pair<SimpleDateFormat, TupleEntry>> { protected TimeZone zone; protected Locale locale; final String dateFormatString; @ConstructorProperties({"numArgs", "fieldDeclaration", "dateFormatString"}) public DateOperation( int numArgs, Fields fieldDeclaration, String dateFormatString ) { super( numArgs, fieldDeclaration ); this.dateFormatString = dateFormatString; if( !fieldDeclaration.isSubstitution() && fieldDeclaration.size() != 1 ) throw new IllegalArgumentException( "fieldDeclaration may only declare one field name, got " + fieldDeclaration.print() ); } @ConstructorProperties({"numArgs", "fieldDeclaration", "dateFormatString", "zone", "locale"}) public DateOperation( int numArgs, Fields fieldDeclaration, String dateFormatString, TimeZone zone, Locale locale ) { super( numArgs, fieldDeclaration ); this.dateFormatString = dateFormatString; this.zone = zone; this.locale = locale; } public String getDateFormatString() { return dateFormatString; } public SimpleDateFormat getDateFormat() { SimpleDateFormat dateFormat = new SimpleDateFormat( dateFormatString, getLocale() ); dateFormat.setTimeZone( getZone() ); return dateFormat; } private Locale getLocale() { if( locale != null ) return locale; return Locale.getDefault(); } private TimeZone getZone() { if( zone != null ) return zone; return TimeZone.getTimeZone( "UTC" ); } protected Calendar getCalendar() { return Calendar.getInstance( TimeZone.getTimeZone( "UTC" ), getLocale() ); } @Override public void prepare( FlowProcess flowProcess, OperationCall<Pair<SimpleDateFormat, TupleEntry>> operationCall ) { operationCall.setContext( new Pair<>( getDateFormat(), new TupleEntry( operationCall.getDeclaredFields(), Tuple.size( getDeclaredSize() ) ) ) ); } protected int getDeclaredSize() { return 1; } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof DateOperation ) ) return false; if( !super.equals( object ) ) return false; DateOperation that = (DateOperation) object; if( dateFormatString != null ? !dateFormatString.equals( that.dateFormatString ) : that.dateFormatString != null ) return false; if( locale != null ? !locale.equals( that.locale ) : that.locale != null ) return false; if( zone != null ? !zone.equals( that.zone ) : that.zone != null ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( zone != null ? zone.hashCode() : 0 ); result = 31 * result + ( locale != null ? locale.hashCode() : 0 ); result = 31 * result + ( dateFormatString != null ? dateFormatString.hashCode() : 0 ); return result; } }