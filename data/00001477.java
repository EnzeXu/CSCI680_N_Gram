public class CanonicalBench { public enum Canonical { String , Short , Short_TYPE , Integer , Integer_TYPE , Long , Long_TYPE , Float , Float_TYPE , Double , Double_TYPE } @ Param Canonical to = Canonical . String ; Type [ ] canonicalTypes = new Type [ ] { String . class , Short . class , Short . TYPE , Integer . class , Integer . TYPE , Long . class , Long . TYPE , Float . class , Float . TYPE , Double . class , Double . TYPE } ; @ Param ( { "0" , "1" , "2" , "3" , "4" , "5" , "6" , "7" , "8" , "9" , "10" , "11" } ) int from = 0 ; Object [ ] fromValues = new Object [ ] { null , "1000" , ( short ) 1000 , ( short ) 1000 , 1000 , 1000 , 1000L , 1000L , 1000 . 000F , 1000 . 000F , 1000 . 000D , 1000 . 000D } ; Class [ ] fromTypes = new Class [ ] { String . class , String . class , Short . class , Short . TYPE , Integer . class , Integer . TYPE , Long . class , Long . TYPE , Float . class , Float . TYPE , Double . class , Double . TYPE } ; CoercibleType coercibleType ; ToCanonical canonical ; Object fromValue ; Class fromType ; @ Setup public void setup ( ) { coercibleType = Coercions . coercibleTypeFor ( canonicalTypes [ to . ordinal ( ) ] ) ; fromType = fromTypes [ from ] ; canonical = coercibleType . from ( fromType ) ; fromValue = fromValues [ from ] ; } @ Benchmark public void baseline ( Blackhole bh ) { bh . consume ( coercibleType . canonical ( fromValue ) ) ; } @ Benchmark public void toCanonical ( Blackhole bh ) { bh . consume ( coercibleType . from ( fromType ) . canonical ( fromValue ) ) ; } @ Benchmark public void toCanonicalFixed ( Blackhole bh ) { bh . consume ( canonical . canonical ( fromValue ) ) ; } }