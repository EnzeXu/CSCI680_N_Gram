public class CheckedOperationTimeoutExceptionTest extends TestCase { public void testSingleOperation() { Operation op = buildOp(TestConfig.PORT_NUMBER); assertEquals(CheckedOperationTimeoutException.class.getName() + ": test - failing node: " + TestConfig.IPV4_ADDR + ":" + TestConfig.PORT_NUMBER, new CheckedOperationTimeoutException("test", op).toString()); } public void testNullNode() { Operation op = new TestOperation(); assertEquals(CheckedOperationTimeoutException.class.getName() + ": test - failing node: <unknown>", new CheckedOperationTimeoutException("test", op).toString()); } public void testNullOperation() { assertEquals(CheckedOperationTimeoutException.class.getName() + ": test - failing node: <unknown>", new CheckedOperationTimeoutException("test", (Operation) null) .toString()); } public void testMultipleOperation() { Collection<Operation> ops = new ArrayList<Operation>(); ops.add(buildOp(TestConfig.PORT_NUMBER)); ops.add(buildOp(64212)); assertEquals(CheckedOperationTimeoutException.class.getName() + ": test - failing nodes: " + TestConfig.IPV4_ADDR + ":" + TestConfig.PORT_NUMBER + ", " + TestConfig.IPV4_ADDR + ":64212", new CheckedOperationTimeoutException("test", ops).toString()); } private TestOperation buildOp(int portNum) { TestOperation op = new TestOperation(); MockMemcachedNode node = new MockMemcachedNode(InetSocketAddress.createUnresolved( TestConfig.IPV4_ADDR, portNum)); op.setHandlingNode(node); return op; } static class TestOperation extends BaseOperationImpl implements Operation { @Override public void initialize() { throw new RuntimeException("Not implemented."); } @Override public void readFromBuffer(ByteBuffer data) throws IOException { throw new RuntimeException("Not implemented"); } @Override public byte[] getErrorMsg() { return new byte[] {}; } } }