public class NestedBaseOperation<Node, Result, Context> extends BaseOperation<Context> { protected final NestedCoercibleType<Node, Result> nestedCoercibleType; public NestedBaseOperation( NestedCoercibleType<Node, Result> nestedCoercibleType ) { this.nestedCoercibleType = nestedCoercibleType; } public NestedBaseOperation( NestedCoercibleType<Node, Result> nestedCoercibleType, Fields fieldDeclaration ) { super( fieldDeclaration.hasTypes() ? fieldDeclaration : fieldDeclaration.applyTypeToAll( nestedCoercibleType ) ); this.nestedCoercibleType = nestedCoercibleType; } public NestedBaseOperation( NestedCoercibleType<Node, Result> nestedCoercibleType, int numArgs, Fields fieldDeclaration ) { super( numArgs, fieldDeclaration.hasTypes() ? fieldDeclaration : fieldDeclaration.applyTypeToAll( nestedCoercibleType ) ); this.nestedCoercibleType = nestedCoercibleType; } protected NestedPointerCompiler<Node, Result> getNestedPointerCompiler() { return nestedCoercibleType.getNestedPointerCompiler(); } protected CoercibleType<Node> getCoercibleType() { return nestedCoercibleType; } protected Node deepCopy( Node node ) { return nestedCoercibleType.deepCopy( node ); } protected Node getRootNode() { return nestedCoercibleType.newRoot(); } protected Node getLiteralNode( Object value ) { return nestedCoercibleType.node( value ); } protected Iterable<Node> iterable( Result node ) { return nestedCoercibleType.getNestedPointerCompiler().iterable( node ); } protected int size( Result node ) { return nestedCoercibleType.getNestedPointerCompiler().size( node ); } }