public class JSONTextLine extends TextLine { public static final Fields DEFAULT_FIELDS = new Fields ( "json" ) . applyTypes ( JSONCoercibleType . TYPE ) ; private ObjectMapper mapper = new ObjectMapper ( ) ; { mapper . setConfig ( mapper . getDeserializationConfig ( ) . with ( DeserializationFeature . FAIL_ON_READING_DUP_TREE_KEY ) ) ; } public JSONTextLine ( ) { this ( DEFAULT_FIELDS ) ; } public JSONTextLine ( Fields fields ) { this ( fields , DEFAULT_CHARSET ) ; } public JSONTextLine ( Fields fields , String charsetName ) { this ( fields , null , charsetName ) ; } public JSONTextLine ( Compressor compressor ) { this ( DEFAULT_FIELDS , compressor ) ; } public JSONTextLine ( Fields fields , Compressor compressor ) { this ( fields , compressor , DEFAULT_CHARSET ) ; } public JSONTextLine ( Fields fields , Compressor compressor , String charsetName ) { this ( null , fields , compressor , charsetName ) ; } public JSONTextLine ( ObjectMapper mapper , Fields fields ) { this ( mapper , fields , DEFAULT_CHARSET ) ; } public JSONTextLine ( ObjectMapper mapper , Fields fields , String charsetName ) { this ( mapper , fields , null , charsetName ) ; } public JSONTextLine ( ObjectMapper mapper , Compressor compressor ) { this ( mapper , DEFAULT_FIELDS , compressor ) ; } public JSONTextLine ( ObjectMapper mapper , Fields fields , Compressor compressor ) { this ( mapper , fields , compressor , DEFAULT_CHARSET ) ; } public JSONTextLine ( ObjectMapper mapper , Fields fields , Compressor compressor , String charsetName ) { if ( mapper != null ) this . mapper = mapper ; if ( fields == null ) throw new IllegalArgumentException ( "fields may not be null" ) ; if ( !fields . isDefined ( ) ) throw new IllegalArgumentException ( "fields argument must declare a single field" ) ; if ( fields . size ( ) != 1 ) throw new IllegalArgumentException ( "may only declare a single source/sink field in the fields argument" ) ; fields = fields . hasTypes ( ) ? fields : fields . applyTypes ( new JSONCoercibleType ( this . mapper ) ) ; setSinkFields ( fields ) ; setSourceFields ( fields ) ; setCompressor ( compressor ) ; setCharsetName ( charsetName ) ; } @ Override public boolean source ( FlowProcess < ? extends Properties > flowProcess , SourceCall < LineNumberReader , InputStream > sourceCall ) throws IOException { String line = sourceCall . getContext ( ) . readLine ( ) ; if ( line == null ) return false ; TupleEntry incomingEntry = sourceCall . getIncomingEntry ( ) ; JsonNode jsonNode = null ; if ( !line . isEmpty ( ) ) jsonNode = mapper . readTree ( line ) ; incomingEntry . setObject ( 0 , jsonNode ) ; return true ; } @ Override public void sink ( FlowProcess < ? extends Properties > flowProcess , SinkCall < PrintWriter , OutputStream > sinkCall ) throws IOException { JsonNode jsonNode = ( JsonNode ) sinkCall . getOutgoingEntry ( ) . getTuple ( ) . getObject ( 0 ) ; if ( jsonNode == null ) { sinkCall . getContext ( ) . println ( ) ; } else { String string = mapper . writeValueAsString ( jsonNode ) ; sinkCall . getContext ( ) . println ( string ) ; } } @ Override protected String getBaseFileExtension ( ) { return "json" ; } }