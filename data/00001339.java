public class FieldJoiner extends BaseOperation<Tuple> implements Function<Tuple> { public static final String FIELD_NAME = "joined"; private String delimiter = "\t"; @ConstructorProperties({"delimiter"}) public FieldJoiner( String delimiter ) { this( new Fields( FIELD_NAME ) ); this.delimiter = delimiter; } @ConstructorProperties({"fieldDeclaration"}) public FieldJoiner( Fields fieldDeclaration ) { super( fieldDeclaration ); } @ConstructorProperties({"fieldDeclaration", "delimiter"}) public FieldJoiner( Fields fieldDeclaration, String delimiter ) { super( fieldDeclaration ); this.delimiter = delimiter; } public String getDelimiter() { return delimiter; } @Override public void prepare( FlowProcess flowProcess, OperationCall<Tuple> operationCall ) { operationCall.setContext( Tuple.size( 1 ) ); } @Override public void operate( FlowProcess flowProcess, FunctionCall<Tuple> functionCall ) { functionCall.getContext().set( 0, functionCall.getArguments().getTuple().toString( delimiter, false ) ); functionCall.getOutputCollector().add( functionCall.getContext() ); } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof FieldJoiner ) ) return false; if( !super.equals( object ) ) return false; FieldJoiner that = (FieldJoiner) object; if( delimiter != null ? !delimiter.equals( that.delimiter ) : that.delimiter != null ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( delimiter != null ? delimiter.hashCode() : 0 ); return result; } }