public class HadoopNodeCounterCache extends HadoopCounterCache < FlowNodeStats , Map < String , Map < String , Long > > > { private FlowNodeStats flowNodeStats ; private Configuration configuration ; protected HadoopNodeCounterCache ( FlowNodeStats flowNodeStats , Configuration configuration ) { super ( flowNodeStats , configuration ) ; this . flowNodeStats = flowNodeStats ; this . configuration = configuration ; } @ Override protected FlowNodeStats getJobStatusClient ( ) { return flowNodeStats ; } @ Override protected boolean areCountersAvailable ( FlowNodeStats runningJob ) { return !HadoopUtil . isLocal ( this . configuration ) ; } protected Map < String , Map < String , Long > > getCounters ( FlowNodeStats flowNodeStats ) throws IOException { flowNodeStats . captureDetail ( CascadingStats . Type . SLICE ) ; Map < String , Map < String , Long > > allCounters = new HashMap < > ( ) ; Collection < FlowSliceStats > children = flowNodeStats . getChildren ( ) ; for ( FlowSliceStats sliceStats : children ) { TaskReport taskReport = ( ( HadoopSliceStats ) sliceStats ) . getTaskReport ( ) ; Counters counters = taskReport . getTaskCounters ( ) ; for ( CounterGroup group : counters ) { Map < String , Long > values = allCounters . get ( group . getName ( ) ) ; if ( values == null ) { values = new HashMap < > ( ) ; allCounters . put ( group . getName ( ) , values ) ; } for ( Counter counter : group ) { Long value = values . get ( counter . getName ( ) ) ; if ( value == null ) value = 0L ; value += counter . getValue ( ) ; values . put ( counter . getName ( ) , value ) ; } } } return allCounters ; } protected Collection < String > getGroupNames ( Map < String , Map < String , Long > > groups ) { return groups . keySet ( ) ; } protected Set < String > getCountersFor ( Map < String , Map < String , Long > > counters , String group ) { Set < String > results = new HashSet < > ( ) ; Map < String , Long > map = counters . get ( group ) ; if ( map != null ) results . addAll ( map . keySet ( ) ) ; return results ; } protected long getCounterValue ( Map < String , Map < String , Long > > counters , Enum counter ) { return getCounterValue ( counters , counter . getDeclaringClass ( ) . getName ( ) , counter . name ( ) ) ; } protected long getCounterValue ( Map < String , Map < String , Long > > counters , String groupName , String counterName ) { Map < String , Long > counterGroup = counters . get ( groupName ) ; if ( counterGroup == null ) return 0 ; Long counterValue = counterGroup . get ( counterName ) ; if ( counterValue == null ) return 0 ; return counterValue ; } }