public class LazyCollection implements Collection < Tuple > , ResettableCollection < Iterator < Tuple > > { Iterator < Tuple > iterator ; Collection < Tuple > parent ; public static Collection < Tuple > getParent ( LazyCollection collection ) { return collection . parent ; } public LazyCollection ( Collection < Tuple > parent ) { this . parent = parent ; } @ Override public int size ( ) { return parent . size ( ) ; } @ Override public boolean isEmpty ( ) { return !iterator . hasNext ( ) && parent . isEmpty ( ) ; } @ Override public boolean contains ( Object o ) { return parent . contains ( o ) ; } @ Override public Iterator < Tuple > iterator ( ) { if ( !iterator . hasNext ( ) ) return parent . iterator ( ) ; return new Iterator < Tuple > ( ) { @ Override public boolean hasNext ( ) { return iterator . hasNext ( ) ; } @ Override public Tuple next ( ) { Tuple next = iterator . next ( ) ; parent . add ( next ) ; return next ; } @ Override public void remove ( ) { iterator . remove ( ) ; } } ; } @ Override public Object [ ] toArray ( ) { return parent . toArray ( ) ; } @ Override public < T > T [ ] toArray ( T [ ] a ) { return parent . toArray ( a ) ; } @ Override public boolean add ( Tuple objects ) { return parent . add ( objects ) ; } @ Override public boolean remove ( Object o ) { return parent . remove ( o ) ; } @ Override public boolean containsAll ( Collection < ? > c ) { return parent . containsAll ( c ) ; } @ Override public boolean addAll ( Collection < ? extends Tuple > c ) { return parent . addAll ( c ) ; } @ Override public boolean removeAll ( Collection < ? > c ) { return parent . removeAll ( c ) ; } @ Override public boolean retainAll ( Collection < ? > c ) { return parent . retainAll ( c ) ; } @ Override public void clear ( ) { parent . clear ( ) ; } @ Override public boolean equals ( Object o ) { return parent . equals ( o ) ; } @ Override public int hashCode ( ) { return parent . hashCode ( ) ; } @ Override public void reset ( Iterator < Tuple > iterator ) { this . iterator = iterator ; } }