public class Transformed < E extends ElementGraph > extends GraphResult { PlannerContext plannerContext ; GraphTransformer graphTransformer ; ExpressionGraph expressionGraph ; ElementGraph beginGraph ; int recursionCount = 0 ; List < ElementGraph > recursions ; List < Transformed > childTransforms ; E endGraph ; public Transformed ( PlannerContext plannerContext , GraphTransformer graphTransformer , ElementGraph beginGraph ) { this . plannerContext = plannerContext ; this . graphTransformer = graphTransformer ; if ( plannerContext . isTransformTracingEnabled ( ) ) beginGraph = new ElementMultiGraph ( beginGraph ) ; this . beginGraph = beginGraph ; } public Transformed ( PlannerContext plannerContext , GraphTransformer graphTransformer , ExpressionGraph expressionGraph , ElementGraph beginGraph ) { this . plannerContext = plannerContext ; this . graphTransformer = graphTransformer ; this . expressionGraph = expressionGraph ; if ( plannerContext . isTransformTracingEnabled ( ) ) beginGraph = new ElementMultiGraph ( beginGraph ) ; this . beginGraph = beginGraph ; } public PlannerContext getPlannerContext ( ) { return plannerContext ; } public String getRuleName ( ) { if ( getGraphTransform ( ) instanceof Rule ) return ( ( Rule ) getGraphTransform ( ) ) . getRuleName ( ) ; return "none" ; } public String getTransformerName ( ) { return getGraphTransform ( ) . getClass ( ) . getSimpleName ( ) ; } public GraphTransformer getGraphTransform ( ) { return graphTransformer ; } @ Override public ElementGraph getBeginGraph ( ) { return beginGraph ; } public void setEndGraph ( E endGraph ) { this . endGraph = endGraph ; } @ Override public E getEndGraph ( ) { return endGraph ; } public int getNumRecursions ( ) { return recursionCount ; } public List < ElementGraph > getRecursions ( ) { if ( recursions == null ) recursions = new LinkedList < > ( ) ; return recursions ; } public List < Transformed > getChildTransforms ( ) { if ( childTransforms == null ) childTransforms = new LinkedList < > ( ) ; return childTransforms ; } void addRecursionTransform ( ElementGraph transformed ) { recursionCount++ ; if ( plannerContext . isTransformTracingEnabled ( ) ) getRecursions ( ) . add ( new ElementMultiGraph ( transformed ) ) ; } public void addChildTransform ( Transformed transformed ) { if ( plannerContext . isTransformTracingEnabled ( ) ) getChildTransforms ( ) . add ( transformed ) ; } @ Override public void writeDOTs ( String path ) { int count = 0 ; if ( expressionGraph != null ) { String fileName = String . format ( "expression-graph-%s . dot" , expressionGraph . getClass ( ) . getSimpleName ( ) ) ; expressionGraph . writeDOT ( new File ( path , fileName ) . toString ( ) ) ; } for ( int i = 0 ; i < getChildTransforms ( ) . size ( ) ; i++ ) { Transformed transformed = getChildTransforms ( ) . get ( i ) ; String name = transformed . getTransformerName ( ) ; String pathName = String . format ( "%s/child-%d-%s/" , path , i , name ) ; transformed . writeDOTs ( pathName ) ; } count = writeBeginGraph ( path , count ) ; for ( ElementGraph recursion : getRecursions ( ) ) { String name = recursion . getClass ( ) . getSimpleName ( ) ; recursion . writeDOT ( new File ( path , makeFileName ( count++ , name , "recursion" ) ) . toString ( ) ) ; } writeEndGraph ( path , count ) ; } }