public class IndexTuple extends Tuple implements Comparable < Object > { int index ; Tuple tuple ; public IndexTuple ( ) { super ( ( List < Object > ) null ) ; } public IndexTuple ( int index , Tuple tuple ) { super ( ( List < Comparable > ) null ) ; this . index = index ; this . tuple = tuple ; } public void setIndex ( int index ) { this . index = index ; } public int getIndex ( ) { return index ; } public void setTuple ( Tuple tuple ) { this . tuple = tuple ; } public Tuple getTuple ( ) { return tuple ; } @ Override public String print ( ) { return printTo ( new StringBuffer ( ) ) . toString ( ) ; } public StringBuffer printTo ( StringBuffer buffer ) { buffer . append ( " { " ) ; buffer . append ( index ) . append ( " : " ) ; tuple . printTo ( buffer ) ; buffer . append ( " } " ) ; return buffer ; } public int compareTo ( Object object ) { if ( object instanceof IndexTuple ) return compareTo ( ( IndexTuple ) object ) ; return -1 ; } public int compareTo ( IndexTuple indexTuple ) { int c = this . index - indexTuple . index ; if ( c != 0 ) return c ; return this . tuple . compareTo ( indexTuple . tuple ) ; } @ Override public boolean equals ( Object object ) { if ( this == object ) return true ; if ( object == null || getClass ( ) != object . getClass ( ) ) return false ; IndexTuple that = ( IndexTuple ) object ; if ( index != that . index ) return false ; if ( tuple != null ? !tuple . equals ( that . tuple ) : that . tuple != null ) return false ; return true ; } @ Override public int hashCode ( ) { int result = index ; result = 31 * result + ( tuple != null ? tuple . hashCode ( ) : 0 ) ; return result ; } @ Override public String toString ( ) { return " [ " + index + " ] " + tuple ; } }