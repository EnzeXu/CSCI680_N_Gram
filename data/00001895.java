public class ForwardingConsumerRecords<K, V> extends ConsumerRecords<K, V> { ConsumerRecords<K, V> consumerRecords; public ForwardingConsumerRecords( ConsumerRecords<K, V> consumerRecords ) { super( null ); this.consumerRecords = consumerRecords; } @Override public List<ConsumerRecord<K, V>> records( TopicPartition partition ) { return consumerRecords.records( partition ); } @Override public Iterable<ConsumerRecord<K, V>> records( String topic ) { return consumerRecords.records( topic ); } @Override public Set<TopicPartition> partitions() { return consumerRecords.partitions(); } @Override public Iterator<ConsumerRecord<K, V>> iterator() { return consumerRecords.iterator(); } @Override public int count() { return consumerRecords.count(); } @Override public boolean isEmpty() { return consumerRecords.isEmpty(); } public static <K1, V1> ConsumerRecords<K1, V1> empty() { return ConsumerRecords.empty(); } }