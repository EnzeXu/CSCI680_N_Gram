public class RegexOperation<C> extends BaseOperation<C> { protected String patternString = ".*"; public RegexOperation() { } @ConstructorProperties({"numArgs"}) public RegexOperation( int numArgs ) { super( numArgs ); } @ConstructorProperties({"fieldDeclaration"}) public RegexOperation( Fields fieldDeclaration ) { super( fieldDeclaration ); } @ConstructorProperties({"numArgs", "patternString"}) public RegexOperation( int numArgs, String patternString ) { super( numArgs ); this.patternString = patternString; } @ConstructorProperties({"patternString"}) public RegexOperation( String patternString ) { this.patternString = patternString; } @ConstructorProperties({"numArgs", "fieldDeclaration"}) public RegexOperation( int numArgs, Fields fieldDeclaration ) { super( numArgs, fieldDeclaration ); } @ConstructorProperties({"numArgs", "fieldDeclaration", "patternString"}) public RegexOperation( int numArgs, Fields fieldDeclaration, String patternString ) { super( numArgs, fieldDeclaration ); this.patternString = patternString; } @Property(name = "patternString", visibility = Visibility.PRIVATE) @PropertyDescription("The regular expression pattern string.") public final String getPatternString() { return patternString; } protected Pattern getPattern() { return Pattern.compile( getPatternString() ); } @Override public boolean equals( Object object ) { if( this == object ) return true; if( !( object instanceof RegexOperation ) ) return false; if( !super.equals( object ) ) return false; RegexOperation that = (RegexOperation) object; if( patternString != null ? !patternString.equals( that.patternString ) : that.patternString != null ) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + ( patternString != null ? patternString.hashCode() : 0 ); return result; } }