public class OpenReducingDuct < Incoming , Outgoing > extends Duct < Grouping < Incoming , Iterator < Incoming > > , Outgoing > implements OpenWindow { final Reducing reducing ; public OpenReducingDuct ( Duct < Outgoing , ? > next ) { super ( next ) ; reducing = ( Reducing ) getNext ( ) ; } @ Override public void receive ( Duct previous , int ordinal , Grouping < Incoming , Iterator < Incoming > > grouping ) { if ( !grouping . joinIterator . hasNext ( ) ) return ; reducing . startGroup ( previous , grouping . key ) ; while ( grouping . joinIterator . hasNext ( ) ) next . receive ( this , 0 , ( Outgoing ) grouping . joinIterator . next ( ) ) ; reducing . completeGroup ( previous , grouping . key ) ; } }