public class MeasuredOutputCollector implements OutputCollector , Flushable , Closeable { private final FlowProcess flowProcess ; private final Enum counter ; private OutputCollector outputCollector ; public MeasuredOutputCollector ( FlowProcess flowProcess , Enum counter ) { this . flowProcess = flowProcess ; this . counter = counter ; } public MeasuredOutputCollector ( FlowProcess flowProcess , Enum counter , OutputCollector outputCollector ) { this . flowProcess = flowProcess ; this . counter = counter ; this . outputCollector = outputCollector ; } public OutputCollector getOutputCollector ( ) { return outputCollector ; } public void setOutputCollector ( OutputCollector outputCollector ) { this . outputCollector = outputCollector ; } @ Override public void collect ( Object key , Object value ) throws IOException { long start = System . currentTimeMillis ( ) ; try { outputCollector . collect ( key , value ) ; } finally { flowProcess . increment ( counter , System . currentTimeMillis ( ) - start ) ; } } @ Override public void flush ( ) throws IOException { if ( outputCollector instanceof Flushable ) ( ( Flushable ) outputCollector ) . flush ( ) ; } @ Override public void close ( ) throws IOException { if ( outputCollector instanceof Closeable ) ( ( Closeable ) outputCollector ) . close ( ) ; } }