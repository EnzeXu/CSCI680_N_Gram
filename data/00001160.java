public class SecondarySortKeyValuesReader extends KeyValuesReader { private KeyValuesReader parent; private Comparator<Tuple> groupComparator; private Tuple currentKey; private Iterable<Object> currentValues; private boolean isNewKey = false; private TuplePair currentKeyPair; public SecondarySortKeyValuesReader( KeyValuesReader parent, Comparator<Tuple> groupComparator ) { this.parent = parent; this.groupComparator = groupComparator; } @Override public boolean next() throws IOException { if( parent != null && isNewKey ) { isNewKey = false; return true; } boolean advanced = advance(); while( !isNewKey && advanced ) advanced = advance(); isNewKey = false; return advanced; } protected boolean advance() throws IOException { if( parent == null ) return false; boolean next = parent.next(); if( !next ) { parent = null; return false; } currentKeyPair = (TuplePair) parent.getCurrentKey(); isNewKey = currentKey == null || groupComparator.compare( currentKey, currentKeyPair.getLhs() ) != 0; currentKey = currentKeyPair.getLhs(); currentValues = parent.getCurrentValues(); return true; } @Override public Object getCurrentKey() throws IOException { return currentKeyPair; } @Override public Iterable<Object> getCurrentValues() throws IOException { return new Iterable<Object>() { @Override public Iterator<Object> iterator() { final Iterator<Object>[] iterator = new Iterator[]{currentValues.iterator()}; return new Iterator<Object>() { @Override public boolean hasNext() { boolean hasNext = iterator[ 0 ].hasNext(); if( hasNext ) return true; if( !advanceSafe() ) return false; if( isNewKey ) return false; iterator[ 0 ] = currentValues.iterator(); return hasNext(); } @Override public Object next() { return iterator[ 0 ].next(); } @Override public void remove() { iterator[ 0 ].remove(); } protected boolean advanceSafe() { try { return advance(); } catch( IOException exception ) { throw new CascadingException( "unable to advance values iterator", exception ); } } }; } }; } }