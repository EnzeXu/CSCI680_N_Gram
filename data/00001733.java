public class GroupingSortingComparator extends DeserializerComparator<TuplePair> { Class[] sortTypes; Comparator[] sortComparators; @Override public void setConf( Configuration conf ) { super.setConf( conf ); if( conf == null ) return; sortTypes = tupleSerialization.getSortTypes(); sortComparators = deserializeComparatorsFor( "cascading.sort.comparator" ); sortComparators = delegatingComparatorsFor( sortTypes, sortComparators ); } public int compare( byte[] b1, int s1, int l1, byte[] b2, int s2, int l2 ) { try { lhsBuffer.reset( b1, s1, l1 ); rhsBuffer.reset( b2, s2, l2 ); int c = compareTuples( keyTypes, groupComparators ); if( c != 0 ) return c; return compareTuples( sortTypes, sortComparators ); } catch( IOException exception ) { throw new CascadingException( exception ); } finally { lhsBuffer.clear(); rhsBuffer.clear(); } } public int compare( TuplePair lhs, TuplePair rhs ) { int c = compareTuples( groupComparators, lhs.getLhs(), rhs.getLhs() ); if( c != 0 ) return c; return compareTuples( sortComparators, lhs.getRhs(), rhs.getRhs() ); } }