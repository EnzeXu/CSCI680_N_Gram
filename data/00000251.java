public class RContour extends RGeomElem { public int type = RGeomElem . CONTOUR ; public RPoint [ ] points ; boolean isContributing = true ; boolean isHole = false ; boolean closed = true ; public int countPoints ( ) { if ( this . points==null ) { return 0 ; } return this . points . length ; } public RContour ( RPoint [ ] contourpoints ) { this . points = contourpoints ; } public RContour ( ) { } public RContour ( RContour c ) { for ( int i=0 ; i < c . countPoints ( ) ; i++ ) { this . append ( new RPoint ( c . points [ i ] ) ) ; } isHole = c . isHole ; isContributing = c . isContributing ; setStyle ( c ) ; } public void draw ( PGraphics g ) { int numPoints = countPoints ( ) ; boolean beforeFill = g . fill ; g . noFill ( ) ; g . beginShape ( ) ; for ( int i=0 ; i < numPoints ; i++ ) { g . vertex ( points [ i ] . x , points [ i ] . y ) ; } g . endShape ( closed ? PConstants . CLOSE : PConstants . OPEN ) ; if ( beforeFill ) g . fill ( g . fillColor ) ; } public void draw ( PApplet g ) { int numPoints = countPoints ( ) ; boolean beforeFill = g . g . fill ; g . noFill ( ) ; g . beginShape ( ) ; for ( int i=0 ; i < numPoints ; i++ ) { g . vertex ( points [ i ] . x , points [ i ] . y ) ; } g . endShape ( closed ? PConstants . CLOSE : PConstants . OPEN ) ; if ( beforeFill ) g . fill ( g . g . fillColor ) ; } public void addPoint ( RPoint p ) { this . append ( p ) ; } public void addPoint ( float x , float y ) { this . append ( new RPoint ( x , y ) ) ; } public void addPoints ( RPoint [ ] morePoints ) { if ( points == null ) { this . points = morePoints ; } else { RPoint [ ] newPoints = new RPoint [ this . points . length+morePoints . length ] ; System . arraycopy ( this . points , 0 , newPoints , 0 , this . points . length ) ; System . arraycopy ( morePoints , 0 , newPoints , this . points . length , morePoints . length ) ; this . points = newPoints ; } } public void addPoints ( List morePoints ) { int start = 0 ; if ( points == null ) { this . points = new RPoint [ morePoints . size ( ) ] ; } else { RPoint [ ] newPoints = new RPoint [ this . points . length+morePoints . size ( ) ] ; System . arraycopy ( this . points , 0 , newPoints , 0 , this . points . length ) ; this . points = newPoints ; start = morePoints . size ( ) ; } for ( int i = start , j = 0 ; i < points . length ; i++ ) { points [ i ] = ( RPoint ) morePoints . get ( j ) ; j++ ; } } public RPoint [ ] getHandles ( ) { return points ; } public RPoint [ ] getPoints ( ) { return points ; } public RPoint getPoint ( float t ) { PApplet . println ( "Feature not yet implemented for this class . " ) ; return null ; } public RPoint getTangent ( float t ) { PApplet . println ( "Feature not yet implemented for this class . " ) ; return null ; } public RPoint [ ] getTangents ( ) { PApplet . println ( "Feature not yet implemented for this class . " ) ; return null ; } public RPoint [ ] [ ] getPointsInPaths ( ) { PApplet . println ( "Feature not yet implemented for this class . " ) ; return null ; } public RPoint [ ] [ ] getHandlesInPaths ( ) { PApplet . println ( "Feature not yet implemented for this class . " ) ; return null ; } public RPoint [ ] [ ] getTangentsInPaths ( ) { PApplet . println ( "Feature not yet implemented for this class . " ) ; return null ; } public boolean contains ( RPoint p ) { PApplet . println ( "Feature not yet implemented for this class . " ) ; return false ; } public boolean isHole ( ) { return isHole ; } public void print ( ) { System . out . println ( "contour : " ) ; for ( int i=0 ; i < countPoints ( ) ; i++ ) { System . out . println ( "--- point "+i+" ---" ) ; points [ i ] . print ( ) ; System . out . println ( "---------------" ) ; } } public void addClose ( ) { if ( points == null ) { return ; } if ( ( points [ 0 ] . x == points [ points . length-1 ] . x ) && ( points [ 0 ] . y == points [ points . length-1 ] . y ) ) { return ; } addPoint ( new RPoint ( points [ 0 ] . x , points [ 0 ] . y ) ) ; closed = true ; } public RPolygon toPolygon ( ) { return new RPolygon ( this ) ; } public RShape toShape ( ) throws RuntimeException { throw new RuntimeException ( "Transforming a Contour to a Shape is not yet implemented . " ) ; } public RMesh toMesh ( ) { return this . toPolygon ( ) . toMesh ( ) ; } public int getType ( ) { return type ; } void append ( RPoint nextpoint ) { RPoint [ ] newpoints ; if ( points==null ) { newpoints = new RPoint [ 1 ] ; newpoints [ 0 ] = nextpoint ; } else { newpoints = new RPoint [ this . points . length+1 ] ; System . arraycopy ( this . points , 0 , newpoints , 0 , this . points . length ) ; newpoints [ this . points . length ] =nextpoint ; } this . points=newpoints ; } }