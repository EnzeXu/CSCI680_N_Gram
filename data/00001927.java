public class FunctionPlatformTest extends PlatformTestCase { public FunctionPlatformTest() { } @Test public void testInsert() throws IOException { getPlatform().copyFromLocal( inputFileApache200 ); Tap source = getPlatform().getTextFile( inputFileApache200 ); Tap sink = getPlatform().getTextFile( new Fields( "line" ), getOutputPath( "insert" ), SinkMode.REPLACE ); Pipe pipe = new Pipe( "apache" ); pipe = new Each( pipe, new Insert( new Fields( "A", "B" ), "a", "b" ) ); pipe = new GroupBy( pipe, new Fields( "A" ) ); Flow flow = getPlatform().getFlowConnector().connect( source, sink, pipe ); flow.complete(); validateLength( flow, 200 ); List<Tuple> results = getSinkAsList( flow ); assertTrue( results.contains( new Tuple( "a\tb" ) ) ); assertTrue( results.contains( new Tuple( "a\tb" ) ) ); } @Test public void testFieldFormatter() throws IOException { getPlatform().copyFromLocal( inputFileUpper ); Tap source = getPlatform().getTextFile( inputFileUpper ); Tap sink = getPlatform().getTextFile( new Fields( "line" ), getOutputPath( "formatter" ), SinkMode.REPLACE ); Pipe pipe = new Pipe( "formatter" ); pipe = new Each( pipe, new Fields( "line" ), new RegexSplitter( new Fields( "a", "b" ), "\\s" ) ); pipe = new Each( pipe, new FieldFormatter( new Fields( "result" ), "%s and %s" ) ); Flow flow = getPlatform().getFlowConnector().connect( source, sink, pipe ); flow.complete(); validateLength( flow, 5 ); List<Tuple> results = getSinkAsList( flow ); assertTrue( results.contains( new Tuple( "1 and A" ) ) ); assertTrue( results.contains( new Tuple( "2 and B" ) ) ); } @Test public void testSetValue() throws IOException { getPlatform().copyFromLocal( inputFileUpper ); Tap source = getPlatform().getTextFile( inputFileUpper ); Tap sink = getPlatform().getTextFile( new Fields( "line" ), getOutputPath( "setvalue" ), SinkMode.REPLACE ); Pipe pipe = new Pipe( "setvalue" ); pipe = new Each( pipe, new Fields( "line" ), new RegexSplitter( new Fields( "num", "char" ), "\\s" ) ); pipe = new Each( pipe, new SetValue( new Fields( "result" ), new RegexFilter( "[A-C]" ) ) ); Flow flow = getPlatform().getFlowConnector().connect( source, sink, pipe ); flow.complete(); validateLength( flow, 5 ); List<Tuple> results = getSinkAsList( flow ); assertTrue( results.contains( new Tuple( "true" ) ) ); assertTrue( results.contains( new Tuple( "true" ) ) ); assertTrue( results.contains( new Tuple( "true" ) ) ); assertTrue( results.contains( new Tuple( "false" ) ) ); assertTrue( results.contains( new Tuple( "false" ) ) ); } }