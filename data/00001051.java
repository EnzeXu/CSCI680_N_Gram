public class TupleEntrySchemeIteratorTest { @ Test public void testHasNextWithException ( ) throws Exception { FlowProcess < ? > flowProcess = FlowProcess . NULL ; Scheme < ? , ? , ? , ? , ? > scheme = new MockedScheme ( ) ; CloseableIterator < Object > inputIterator = new MockedSingleValueCloseableIterator ( new Object ( ) ) ; TupleEntrySchemeIterator < ? , ? > iterator = new TupleEntrySchemeIterator ( flowProcess , null , scheme , inputIterator ) ; assertTrue ( iterator . hasNext ( ) ) ; assertTrue ( iterator . hasNext ( ) ) ; } public class MockedScheme extends Scheme { private int callCount = 0 ; private static final long serialVersionUID = 1L ; @ Override public void sourceConfInit ( FlowProcess flowProcess , Tap tap , Object conf ) { } @ Override public void sinkConfInit ( FlowProcess flowProcess , Tap tap , Object conf ) { } @ Override public boolean source ( FlowProcess flowProcess , SourceCall sourceCall ) throws IOException { if ( callCount == 0 ) { callCount++ ; throw new IOException ( "Error getting tuple" ) ; } return false ; } @ Override public void sink ( FlowProcess flowProcess , SinkCall sinkCall ) throws IOException { } } public class MockedSingleValueCloseableIterator extends SingleValueCloseableIterator < Object > { public MockedSingleValueCloseableIterator ( Object value ) { super ( value ) ; } @ Override public void close ( ) throws IOException { } } }