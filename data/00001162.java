public class OperatorException extends CascadingException { enum Kind { argument , grouping , sorting , joining } private Fields incomingFields ; private Fields argumentSelector ; private Fields groupingSelector ; private Fields sortingSelector ; private Fields declaredFields ; private Fields outputSelector ; public OperatorException ( ) { } public OperatorException ( Pipe pipe , String string ) { super ( TraceUtil . formatTrace ( pipe , string ) ) ; } public OperatorException ( Pipe pipe , String string , Throwable throwable ) { super ( TraceUtil . formatTrace ( pipe , string ) , throwable ) ; } protected OperatorException ( String string ) { super ( string ) ; } protected OperatorException ( String string , Throwable throwable ) { super ( string , throwable ) ; } protected OperatorException ( Throwable throwable ) { super ( throwable ) ; } public OperatorException ( Pipe pipe , Fields incomingFields , Fields declaredFields , Fields outputSelector , Throwable throwable ) { super ( createMessage ( pipe , incomingFields , declaredFields , outputSelector ) , throwable ) ; this . incomingFields = incomingFields ; this . declaredFields = declaredFields ; this . outputSelector = outputSelector ; } public OperatorException ( Pipe pipe , Kind kind , Fields incomingFields , Fields selectorFields , Throwable throwable ) { super ( createMessage ( pipe , kind , incomingFields , selectorFields ) , throwable ) ; this . incomingFields = incomingFields ; if ( kind == Kind . argument ) this . argumentSelector = selectorFields ; else if ( kind == Kind . grouping ) this . groupingSelector = selectorFields ; else this . sortingSelector = selectorFields ; } public Fields getIncomingFields ( ) { return incomingFields ; } public Fields getArgumentSelector ( ) { return argumentSelector ; } public Fields getGroupingSelector ( ) { return groupingSelector ; } public Fields getSortingSelector ( ) { return sortingSelector ; } public Fields getDeclaredFields ( ) { return declaredFields ; } public Fields getOutputSelector ( ) { return outputSelector ; } private static String createMessage ( Pipe pipe , Fields incomingFields , Fields declaredFields , Fields outputSelector ) { String message = "unable to resolve output selector : " + outputSelector . printVerbose ( ) + " , with incoming : " + incomingFields . printVerbose ( ) + " and declared : " + declaredFields . printVerbose ( ) ; return TraceUtil . formatTrace ( pipe , message ) ; } private static String createMessage ( Pipe pipe , Kind kind , Fields incomingFields , Fields argumentSelector ) { String message = "unable to resolve " + kind + " selector : " + argumentSelector . printVerbose ( ) + " , with incoming : " + incomingFields . printVerbose ( ) ; return TraceUtil . formatTrace ( pipe , message ) ; } }