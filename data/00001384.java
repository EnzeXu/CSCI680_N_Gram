public class SumByLocally extends AggregateByLocally { public static class SumPartials implements Functor { private final Fields declaredFields; private final Type sumType; private final CoercibleType canonical; public SumPartials( Fields declaredFields ) { this.declaredFields = declaredFields; if( !declaredFields.hasTypes() ) throw new IllegalArgumentException( "result type must be declared " ); this.sumType = declaredFields.getType( 0 ); if( declaredFields.size() != 1 ) throw new IllegalArgumentException( "declared fields may only have one field, got: " + declaredFields ); this.canonical = Coercions.coercibleTypeFor( this.sumType ); } public SumPartials( Fields declaredFields, Class sumType ) { this.declaredFields = declaredFields; this.sumType = sumType; if( declaredFields.size() != 1 ) throw new IllegalArgumentException( "declared fields may only have one field, got: " + declaredFields ); this.canonical = Coercions.coercibleTypeFor( this.sumType ); } @Override public Fields getDeclaredFields() { return declaredFields; } @Override public Tuple aggregate( FlowProcess flowProcess, TupleEntry args, Tuple context ) { if( context == null ) return args.getTupleCopy(); else if( args.getObject( 0 ) == null ) return context; context.set( 0, context.getDouble( 0 ) + args.getDouble( 0 ) ); return context; } @Override public Tuple complete( FlowProcess flowProcess, Tuple context ) { context.set( 0, canonical.canonical( context.getObject( 0 ) ) ); return context; } } @ConstructorProperties({"valueField", "sumField"}) public SumByLocally( Fields valueField, Fields sumField ) { super( valueField, new SumPartials( sumField ) ); } @ConstructorProperties({"pipe", "groupingFields", "valueField", "sumField"}) public SumByLocally( Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField ) { this( null, pipe, groupingFields, valueField, sumField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipe", "groupingFields", "valueField", "sumField", "threshold"}) public SumByLocally( Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField, int threshold ) { this( null, pipe, groupingFields, valueField, sumField, threshold ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueField", "sumField"}) public SumByLocally( String name, Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField ) { this( name, pipe, groupingFields, valueField, sumField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueField", "sumField", "threshold"}) public SumByLocally( String name, Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField, int threshold ) { super( name, pipe, groupingFields, valueField, new SumPartials( sumField ), threshold ); } @ConstructorProperties({"valueField", "sumField", "sumType"}) public SumByLocally( Fields valueField, Fields sumField, Class sumType ) { super( valueField, new SumPartials( sumField, sumType ) ); } @ConstructorProperties({"pipe", "groupingFields", "valueField", "sumField", "sumType"}) public SumByLocally( Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField, Class sumType ) { this( null, pipe, groupingFields, valueField, sumField, sumType, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipe", "groupingFields", "valueField", "sumField", "sumType", "threshold"}) public SumByLocally( Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField, Class sumType, int threshold ) { this( null, pipe, groupingFields, valueField, sumField, sumType, threshold ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueField", "sumField", "sumType"}) public SumByLocally( String name, Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField, Class sumType ) { this( name, pipe, groupingFields, valueField, sumField, sumType, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueField", "sumField", "sumType", "threshold"}) public SumByLocally( String name, Pipe pipe, Fields groupingFields, Fields valueField, Fields sumField, Class sumType, int threshold ) { super( name, pipe, groupingFields, valueField, new SumPartials( sumField, sumType ), threshold ); } }