public class AverageByLocally extends AggregateByLocally { public enum Include { ALL , NO_NULLS } public static class AveragePartials implements Functor { private final Fields declaredFields ; private final Include include ; private final Type type ; private final CoercibleType canonical ; public AveragePartials ( Fields declaredFields ) { this ( declaredFields , Include . ALL ) ; } public AveragePartials ( Fields declaredFields , Include include ) { this . declaredFields = makeFieldDeclaration ( declaredFields ) ; this . include = include ; if ( this . declaredFields . hasTypes ( ) ) this . type = this . declaredFields . getType ( 0 ) ; else this . type = Double . class ; this . canonical = Coercions . coercibleTypeFor ( this . type ) ; } private static Fields makeFieldDeclaration ( Fields fieldDeclaration ) { if ( fieldDeclaration . hasTypes ( ) ) return fieldDeclaration ; return fieldDeclaration . applyTypes ( Double . class ) ; } @ Override public Fields getDeclaredFields ( ) { return declaredFields ; } @ Override public Tuple aggregate ( FlowProcess flowProcess , TupleEntry args , Tuple context ) { if ( context == null ) context = Tuple . size ( 2 ) ; if ( include == Include . NO_NULLS && args . getObject ( 0 ) == null ) return context ; context . set ( 0 , context . getDouble ( 0 ) + args . getDouble ( 0 ) ) ; context . set ( 1 , context . getLong ( 1 ) + 1 ) ; return context ; } @ Override public Tuple complete ( FlowProcess flowProcess , Tuple context ) { long count = context . getLong ( 1 ) ; if ( count == 0 ) return new Tuple ( canonical . canonical ( null ) ) ; double sum = context . getDouble ( 0 ) ; return new Tuple ( canonical . canonical ( sum / count ) ) ; } } @ ConstructorProperties ( { "valueField" , "averageField" } ) public AverageByLocally ( Fields valueField , Fields averageField ) { super ( valueField , new AveragePartials ( averageField ) ) ; } @ ConstructorProperties ( { "valueField" , "averageField" , "include" } ) public AverageByLocally ( Fields valueField , Fields averageField , Include include ) { super ( valueField , new AveragePartials ( averageField , include ) ) ; } @ ConstructorProperties ( { "pipe" , "groupingFields" , "valueField" , "averageField" } ) public AverageByLocally ( Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField ) { this ( null , pipe , groupingFields , valueField , averageField , USE_DEFAULT_THRESHOLD ) ; } @ ConstructorProperties ( { "pipe" , "groupingFields" , "valueField" , "averageField" , "threshold" } ) public AverageByLocally ( Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField , int threshold ) { this ( null , pipe , groupingFields , valueField , averageField , threshold ) ; } @ ConstructorProperties ( { "name" , "pipe" , "groupingFields" , "valueField" , "averageField" } ) public AverageByLocally ( String name , Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField ) { this ( name , pipe , groupingFields , valueField , averageField , USE_DEFAULT_THRESHOLD ) ; } @ ConstructorProperties ( { "name" , "pipe" , "groupingFields" , "valueField" , "averageField" , "threshold" } ) public AverageByLocally ( String name , Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField , int threshold ) { super ( name , pipe , groupingFields , valueField , new AveragePartials ( averageField ) , threshold ) ; } @ ConstructorProperties ( { "pipe" , "groupingFields" , "valueField" , "averageField" , "include" } ) public AverageByLocally ( Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField , Include include ) { this ( null , pipe , groupingFields , valueField , averageField , include , USE_DEFAULT_THRESHOLD ) ; } @ ConstructorProperties ( { "pipe" , "groupingFields" , "valueField" , "averageField" , "include" , "threshold" } ) public AverageByLocally ( Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField , Include include , int threshold ) { this ( null , pipe , groupingFields , valueField , averageField , include , threshold ) ; } @ ConstructorProperties ( { "name" , "pipe" , "groupingFields" , "valueField" , "averageField" , "include" } ) public AverageByLocally ( String name , Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField , Include include ) { this ( name , pipe , groupingFields , valueField , averageField , include , USE_DEFAULT_THRESHOLD ) ; } @ ConstructorProperties ( { "name" , "pipe" , "groupingFields" , "valueField" , "averageField" , "include" , "threshold" } ) public AverageByLocally ( String name , Pipe pipe , Fields groupingFields , Fields valueField , Fields averageField , Include include , int threshold ) { super ( name , pipe , groupingFields , valueField , new AveragePartials ( averageField , include ) , threshold ) ; } }