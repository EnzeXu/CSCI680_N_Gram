public class PartitionTupleEntryIterator implements Iterator < Tuple > { private final TupleEntrySchemeIterator childIterator ; private final Tuple base ; private final Tuple view ; public PartitionTupleEntryIterator ( Fields sourceFields , Partition partition , String parentIdentifier , String childIdentifier , TupleEntrySchemeIterator schemeIterator ) { this . childIterator = schemeIterator ; TupleEntry partitionEntry = new TupleEntry ( partition . getPartitionFields ( ) , Tuple . size ( partition . getPartitionFields ( ) . size ( ) ) ) ; try { partition . toTuple ( childIdentifier . substring ( parentIdentifier . length ( ) + 1 ) , partitionEntry ) ; } catch ( Exception exception ) { throw new TapException ( "unable to parse partition given parent : " + parentIdentifier + " and child : " + childIdentifier ) ; } base = TupleViews . createOverride ( sourceFields , partitionEntry . getFields ( ) ) ; TupleViews . reset ( base , Tuple . size ( sourceFields . size ( ) ) , partitionEntry . getTuple ( ) ) ; view = TupleViews . createOverride ( sourceFields , childIterator . getFields ( ) ) ; } @ Override public boolean hasNext ( ) { return childIterator . hasNext ( ) ; } @ Override public Tuple next ( ) { Tuple tuple = childIterator . next ( ) . getTuple ( ) ; TupleViews . reset ( view , base , tuple ) ; return view ; } @ Override public void remove ( ) { childIterator . remove ( ) ; } }