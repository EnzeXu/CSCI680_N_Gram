public class ValueAssertionEachStage extends EachStage { private ValueAssertion valueAssertion ; public ValueAssertionEachStage ( FlowProcess flowProcess , Each each ) { super ( flowProcess , each ) ; } @ Override protected Fields getIncomingPassThroughFields ( ) { return incomingScopes . get ( 0 ) . getIncomingFunctionPassThroughFields ( ) ; } @ Override protected Fields getIncomingArgumentsFields ( ) { return incomingScopes . get ( 0 ) . getIncomingFunctionArgumentFields ( ) ; } @ Override public void initialize ( ) { super . initialize ( ) ; valueAssertion = each . getValueAssertion ( ) ; } @ Override public void receive ( Duct previous , int ordinal , TupleEntry incomingEntry ) { argumentsEntry . setTuple ( argumentsBuilder . makeResult ( incomingEntry . getTuple ( ) , null ) ) ; try { valueAssertion . doAssert ( flowProcess , operationCall ) ; next . receive ( this , 0 , incomingEntry ) ; } catch ( CascadingException exception ) { handleException ( exception , argumentsEntry ) ; } catch ( Throwable throwable ) { handleException ( new OperatorException ( each , "operator Each failed executing operation" , throwable ) , argumentsEntry ) ; } } }