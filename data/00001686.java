public class SplunkCSV extends TextDelimited implements SplunkScheme { public static final DateType DATE_TYPE = new DateType( "yyyy-MM-dd HH:mm:ss.SSS z", TimeZone.getTimeZone( "UTC" ) ); public static final Fields _TIME = new Fields( "_time", DATE_TYPE ); public static final Fields _SERIAL = new Fields( "_serial", Long.class ); public static final Fields SOURCE = new Fields( "source", String.class ); public static final Fields SOURCETYPE = new Fields( "sourcetype", String.class ); public static final Fields HOST = new Fields( "host", String.class ); public static final Fields INDEX = new Fields( "index", String.class ); public static final Fields SPLUNK_SERVER = new Fields( "splunk_server", String.class ); public static final Fields _RAW = new Fields( "_raw", String.class ); public static final Fields _INDEXTIME = new Fields( "_indextime", long.class ); public static final Fields _SUBSECOND = new Fields( "_subsecond", float.class ); public static final Fields TIMESTARTPOS = new Fields( "timestartpos", long.class ); public static final Fields TIMEENDPOS = new Fields( "timeendpos", long.class ); public static final Fields DEFAULTS = Fields.NONE .append( _SERIAL ) .append( _TIME ) .append( SOURCE ) .append( SOURCETYPE ) .append( HOST ) .append( INDEX ) .append( SPLUNK_SERVER ) .append( _RAW ); public static final Fields KNOWN = DEFAULTS .append( _INDEXTIME ) .append( _SUBSECOND ) .append( TIMESTARTPOS ) .append( TIMEENDPOS ); public SplunkCSV() { super( Fields.ALL, true, false, ",", "\"", null ); } public SplunkCSV( Fields fields ) { super( fields, true, false, ",", "\"", null ); } @Override public boolean isSink() { return false; } @Override public void sink( FlowProcess<? extends Properties> flowProcess, SinkCall<PrintWriter, OutputStream> sinkCall ) { throw new UnsupportedOperationException( "sinking is not supported" ); } @Override public void sourceConfInit( FlowProcess<? extends Properties> flowProcess, Tap<Properties, InputStream, OutputStream> tap, Properties conf ) { super.sourceConfInit( flowProcess, tap, conf ); JobExportArgs args = new JobExportArgs(); args.setOutputMode( JobExportArgs.OutputMode.CSV ); if( getSourceFields().isDefined() ) { Fields sourceFields = getSourceFields(); String[] fields = new String[ sourceFields.size() ]; for( int i = 0; i < sourceFields.size(); i++ ) fields[ i ] = sourceFields.get( i ).toString(); args.setFieldList( fields ); } conf.put( "args", args ); } @Override public Fields retrieveSourceFields( FlowProcess<? extends Properties> process, Tap tap ) { return getSourceFields(); } }