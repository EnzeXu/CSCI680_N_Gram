public class Each extends Operator { private static final Fields FUNCTION_SELECTOR = Fields . RESULTS ; private static final Fields FILTER_SELECTOR = Fields . RESULTS ; @ ConstructorProperties ( { "name" , "function" } ) public Each ( String name , Function function ) { super ( name , function , FUNCTION_SELECTOR ) ; } @ ConstructorProperties ( { "name" , "argumentSelector" , "function" } ) public Each ( String name , Fields argumentSelector , Function function ) { super ( name , argumentSelector , function , FUNCTION_SELECTOR ) ; } @ ConstructorProperties ( { "name" , "argumentSelector" , "function" , "outputSelector" } ) public Each ( String name , Fields argumentSelector , Function function , Fields outputSelector ) { super ( name , argumentSelector , function , outputSelector ) ; } @ ConstructorProperties ( { "name" , "function" , "outputSelector" } ) public Each ( String name , Function function , Fields outputSelector ) { super ( name , function , outputSelector ) ; } @ ConstructorProperties ( { "previous" , "function" } ) public Each ( Pipe previous , Function function ) { super ( previous , function , FUNCTION_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "argumentSelector" , "function" } ) public Each ( Pipe previous , Fields argumentSelector , Function function ) { super ( previous , argumentSelector , function , FUNCTION_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "argumentSelector" , "function" , "outputSelector" } ) public Each ( Pipe previous , Fields argumentSelector , Function function , Fields outputSelector ) { super ( previous , argumentSelector , function , outputSelector ) ; } @ ConstructorProperties ( { "previous" , "function" , "outputSelector" } ) public Each ( Pipe previous , Function function , Fields outputSelector ) { super ( previous , function , outputSelector ) ; } @ ConstructorProperties ( { "name" , "filter" } ) public Each ( String name , Filter filter ) { super ( name , filter , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "name" , "argumentSelector" , "filter" } ) public Each ( String name , Fields argumentSelector , Filter filter ) { super ( name , argumentSelector , filter , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "filter" } ) public Each ( Pipe previous , Filter filter ) { super ( previous , filter , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "argumentSelector" , "filter" } ) public Each ( Pipe previous , Fields argumentSelector , Filter filter ) { super ( previous , argumentSelector , filter , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "name" , "assertionLevel" , "assertion" } ) public Each ( String name , AssertionLevel assertionLevel , Assertion assertion ) { super ( name , assertionLevel , assertion , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "name" , "argumentSelector" , "assertionLevel" , "assertion" } ) public Each ( String name , Fields argumentSelector , AssertionLevel assertionLevel , Assertion assertion ) { super ( name , argumentSelector , assertionLevel , assertion , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "assertionLevel" , "assertion" } ) public Each ( Pipe previous , AssertionLevel assertionLevel , Assertion assertion ) { super ( previous , assertionLevel , assertion , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "argumentSelector" , "assertionLevel" , "assertion" } ) public Each ( Pipe previous , Fields argumentSelector , AssertionLevel assertionLevel , Assertion assertion ) { super ( previous , argumentSelector , assertionLevel , assertion , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "name" , "argumentSelector" , "debugLevel" , "debug" } ) public Each ( String name , Fields argumentSelector , DebugLevel debugLevel , Debug debug ) { super ( name , argumentSelector , debugLevel , debug , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "debugLevel" , "debug" } ) public Each ( Pipe previous , DebugLevel debugLevel , Debug debug ) { super ( previous , debugLevel , debug , FILTER_SELECTOR ) ; } @ ConstructorProperties ( { "previous" , "argumentSelector" , "debugLevel" , "debug" } ) public Each ( Pipe previous , Fields argumentSelector , DebugLevel debugLevel , Debug debug ) { super ( previous , argumentSelector , debugLevel , debug , FILTER_SELECTOR ) ; } @ Override protected void verifyOperation ( ) { if ( plannerLevel == null && operation instanceof Debug ) plannerLevel = DebugLevel . DEFAULT ; super . verifyOperation ( ) ; if ( !argumentSelector . isArgSelector ( ) ) throw new IllegalArgumentException ( "invalid argument selector : " + argumentSelector ) ; if ( !operation . getFieldDeclaration ( ) . isDeclarator ( ) ) throw new IllegalArgumentException ( "invalid field declaration : " + operation . getFieldDeclaration ( ) ) ; if ( !outputSelector . isOutSelector ( ) ) throw new IllegalArgumentException ( "invalid output selector : " + outputSelector ) ; } public Function getFunction ( ) { return ( Function ) operation ; } public Filter getFilter ( ) { return ( Filter ) operation ; } public ValueAssertion getValueAssertion ( ) { return ( ValueAssertion ) operation ; } public boolean isFunction ( ) { return operation instanceof Function ; } public boolean isFilter ( ) { return operation instanceof Filter ; } public boolean isValueAssertion ( ) { return operation instanceof ValueAssertion ; } @ Override public Fields resolveIncomingOperationArgumentFields ( Scope incomingScope ) { return incomingScope . getIncomingFunctionArgumentFields ( ) ; } @ Override public Fields resolveIncomingOperationPassThroughFields ( Scope incomingScope ) { return incomingScope . getIncomingFunctionPassThroughFields ( ) ; } @ Override public Scope outgoingScopeFor ( Set < Scope > incomingScopes ) { Fields argumentFields = resolveArgumentSelector ( incomingScopes ) ; verifyArguments ( argumentFields ) ; Fields declaredFields = resolveDeclared ( incomingScopes , argumentFields ) ; verifyDeclaredFields ( declaredFields ) ; Fields outgoingValuesFields = resolveOutgoingValuesSelector ( incomingScopes , argumentFields , declaredFields ) ; verifyOutputSelector ( outgoingValuesFields ) ; Fields outgoingGroupingFields = Fields . asDeclaration ( outgoingValuesFields ) ; Fields passThroughFields = resolveIncomingOperationPassThroughFields ( getFirst ( incomingScopes ) ) ; Fields remainderFields = resolveRemainderFields ( incomingScopes , argumentFields ) ; return new Scope ( getName ( ) , Scope . Kind . EACH , passThroughFields , remainderFields , argumentFields , declaredFields , outgoingGroupingFields , outgoingValuesFields ) ; } Fields resolveOutgoingValuesSelector ( Set < Scope > incomingScopes , Fields argumentFields , Fields declaredFields ) { try { return resolveOutgoingSelector ( incomingScopes , argumentFields , declaredFields ) ; } catch ( Exception exception ) { if ( exception instanceof OperatorException ) throw ( OperatorException ) exception ; throw new OperatorException ( this , "could not resolve outgoing values selector in : " + this , exception ) ; } } }