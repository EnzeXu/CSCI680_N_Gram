public class MemcachedCacheProvider implements CacheProvider { private final Logger log = LoggerFactory . getLogger ( MemcachedCacheProvider . class ) ; private Memcache client ; public Cache buildCache ( String regionName , Properties properties ) throws CacheException { Config config = new Config ( new PropertiesHelper ( properties ) ) ; log . info ( "Building cache for region [ { } ] " , regionName ) ; MemcachedCache cache = new MemcachedCache ( regionName , client ) ; String keyStrategy = config . getKeyStrategyName ( regionName ) ; if ( keyStrategy != null ) { setKeyStrategy ( keyStrategy , cache ) ; } cache . setCacheTimeSeconds ( config . getCacheTimeSeconds ( regionName ) ) ; cache . setClearSupported ( config . isClearSupported ( regionName ) ) ; boolean dogpilePrevention = config . isDogpilePreventionEnabled ( regionName ) ; cache . setDogpilePreventionEnabled ( dogpilePrevention ) ; if ( dogpilePrevention ) { cache . setDogpilePreventionExpirationFactor ( config . getDogpilePreventionExpirationFactor ( regionName ) ) ; } return cache ; } private void setKeyStrategy ( String keyStrategyName , MemcachedCache cache ) { log . debug ( "Using KeyStrategy : [ { } ] " , keyStrategyName ) ; KeyStrategy keyStrategy = instantiateKeyStrategy ( keyStrategyName ) ; cache . setKeyStrategy ( keyStrategy ) ; } protected KeyStrategy instantiateKeyStrategy ( String cls ) { try { return ( KeyStrategy ) Class . forName ( cls ) . newInstance ( ) ; } catch ( InstantiationException e ) { throw new CacheException ( "Could not instantiate keyStrategy class" , e ) ; } catch ( IllegalAccessException e ) { throw new CacheException ( "Could not instantiate keyStrategy class" , e ) ; } catch ( ClassNotFoundException e ) { throw new CacheException ( "Could not instantiate keyStrategy class" , e ) ; } } public long nextTimestamp ( ) { return System . currentTimeMillis ( ) / 100 ; } public void start ( Properties properties ) throws CacheException { log . info ( "Starting MemcachedClient . . . " ) ; try { client = getMemcachedClientFactory ( new Config ( new PropertiesHelper ( properties ) ) ) . createMemcacheClient ( ) ; } catch ( Exception e ) { throw new CacheException ( "Unable to initialize MemcachedClient" , e ) ; } } protected MemcacheClientFactory getMemcachedClientFactory ( Config config ) { String factoryClassName = config . getMemcachedClientFactoryName ( ) ; Constructor < ? > constructor ; try { constructor = Class . forName ( factoryClassName ) . getConstructor ( PropertiesHelper . class ) ; } catch ( ClassNotFoundException e ) { throw new CacheException ( "Unable to find factory class [ " + factoryClassName + " ] " , e ) ; } catch ( NoSuchMethodException e ) { throw new CacheException ( "Unable to find PropertiesHelper constructor for factory class [ " + factoryClassName + " ] " , e ) ; } MemcacheClientFactory clientFactory ; try { clientFactory = ( MemcacheClientFactory ) constructor . newInstance ( config . getPropertiesHelper ( ) ) ; } catch ( Exception e ) { throw new CacheException ( "Unable to instantiate factory class [ " + factoryClassName + " ] " , e ) ; } return clientFactory ; } public void stop ( ) { if ( client != null ) { log . debug ( "Shutting down Memcache client" ) ; client . shutdown ( ) ; } client = null ; } public boolean isMinimalPutsEnabledByDefault ( ) { return true ; } }