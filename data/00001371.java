public class CountBy extends AggregateBy { public enum Include { ALL, NO_NULLS, ONLY_NULLS } public static class CountPartials implements Functor { private final Fields declaredFields; private final Include include; public CountPartials( Fields declaredFields ) { this( declaredFields, Include.ALL ); } public CountPartials( Fields declaredFields, Include include ) { this.declaredFields = declaredFields; if( include == null ) include = Include.ALL; this.include = include; if( !declaredFields.isDeclarator() || declaredFields.size() != 1 ) throw new IllegalArgumentException( "declaredFields should declare only one field name" ); } @Override public Fields getDeclaredFields() { return declaredFields; } @Override public Tuple aggregate( FlowProcess flowProcess, TupleEntry args, Tuple context ) { if( context == null ) context = new Tuple( 0L ); switch( include ) { case ALL: break; case NO_NULLS: if( Tuples.frequency( args, null ) == args.size() ) return context; break; case ONLY_NULLS: if( Tuples.frequency( args, null ) != args.size() ) return context; break; } context.set( 0, context.getLong( 0 ) + 1L ); return context; } @Override public Tuple complete( FlowProcess flowProcess, Tuple context ) { return context; } } @ConstructorProperties({"countField"}) public CountBy( Fields countField ) { super( Fields.ALL, new CountPartials( countField.applyTypes( Long.TYPE ) ), new Sum( countField.applyTypes( Long.TYPE ) ) ); } @ConstructorProperties({"countField", "include"}) public CountBy( Fields countField, Include include ) { super( Fields.ALL, new CountPartials( countField.applyTypes( Long.TYPE ), include ), new Sum( countField.applyTypes( Long.TYPE ) ) ); } @ConstructorProperties({"valueFields", "countField"}) public CountBy( Fields valueFields, Fields countField ) { super( valueFields, new CountPartials( countField.applyTypes( Long.TYPE ) ), new Sum( countField.applyTypes( Long.TYPE ) ) ); } @ConstructorProperties({"valueFields", "countField", "include"}) public CountBy( Fields valueFields, Fields countField, Include include ) { super( valueFields, new CountPartials( countField.applyTypes( Long.TYPE ), include ), new Sum( countField.applyTypes( Long.TYPE ) ) ); } @ConstructorProperties({"pipe", "groupingFields", "countField"}) public CountBy( Pipe pipe, Fields groupingFields, Fields countField ) { this( null, pipe, groupingFields, countField ); } @ConstructorProperties({"pipe", "groupingFields", "countField", "threshold"}) public CountBy( Pipe pipe, Fields groupingFields, Fields countField, int threshold ) { this( null, pipe, groupingFields, countField, threshold ); } @ConstructorProperties({"name", "pipe", "groupingFields", "countField"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields countField ) { this( name, pipe, groupingFields, countField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipe", "groupingFields", "countField", "threshold"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields countField, int threshold ) { this( name, Pipe.pipes( pipe ), groupingFields, countField, threshold ); } @ConstructorProperties({"pipes", "groupingFields", "countField"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields countField ) { this( null, pipes, groupingFields, countField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipes", "groupingFields", "countField", "threshold"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields countField, int threshold ) { this( null, pipes, groupingFields, countField, threshold ); } @ConstructorProperties({"name", "pipes", "groupingFields", "countField"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields countField ) { this( name, pipes, groupingFields, countField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipes", "groupingFields", "countField", "threshold"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields countField, int threshold ) { super( name, pipes, groupingFields, groupingFields, new CountPartials( countField.applyTypes( Long.TYPE ) ), new Sum( countField.applyTypes( Long.TYPE ) ), threshold ); } @ConstructorProperties({"pipe", "groupingFields", "countField", "include"}) public CountBy( Pipe pipe, Fields groupingFields, Fields countField, Include include ) { this( null, pipe, groupingFields, countField, include ); } @ConstructorProperties({"pipe", "groupingFields", "countField", "include", "threshold"}) public CountBy( Pipe pipe, Fields groupingFields, Fields countField, Include include, int threshold ) { this( null, pipe, groupingFields, countField, include, threshold ); } @ConstructorProperties({"name", "pipe", "groupingFields", "countField", "include"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields countField, Include include ) { this( name, pipe, groupingFields, countField, include, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipe", "groupingFields", "countField", "include", "threshold"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields countField, Include include, int threshold ) { this( name, Pipe.pipes( pipe ), groupingFields, countField, include, threshold ); } @ConstructorProperties({"pipes", "groupingFields", "countField", "include"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields countField, Include include ) { this( null, pipes, groupingFields, countField, include, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipes", "groupingFields", "countField", "include", "threshold"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields countField, Include include, int threshold ) { this( null, pipes, groupingFields, countField, include, threshold ); } @ConstructorProperties({"name", "pipes", "groupingFields", "countField", "include"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields countField, Include include ) { this( name, pipes, groupingFields, countField, include, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipes", "groupingFields", "countField", "include", "threshold"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields countField, Include include, int threshold ) { super( name, pipes, groupingFields, groupingFields, new CountPartials( countField.applyTypes( Long.TYPE ), include ), new Sum( countField.applyTypes( Long.TYPE ) ), threshold ); } @ConstructorProperties({"pipe", "groupingFields", "valueFields", "countField"}) public CountBy( Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField ) { this( null, pipe, groupingFields, valueFields, countField, Include.ALL ); } @ConstructorProperties({"pipe", "groupingFields", "valueFields", "countField", "threshold"}) public CountBy( Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField, int threshold ) { this( null, pipe, groupingFields, valueFields, countField, threshold ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueFields", "countField"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField ) { this( name, pipe, groupingFields, valueFields, countField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueFields", "countField", "threshold"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField, int threshold ) { this( name, Pipe.pipes( pipe ), groupingFields, valueFields, countField, threshold ); } @ConstructorProperties({"pipes", "groupingFields", "valueFields", "countField"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField ) { this( null, pipes, groupingFields, valueFields, countField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipes", "groupingFields", "valueFields", "countField", "threshold"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField, int threshold ) { this( null, pipes, groupingFields, valueFields, countField, threshold ); } @ConstructorProperties({"name", "pipes", "groupingFields", "valueFields", "countField"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField ) { this( name, pipes, groupingFields, valueFields, countField, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipes", "groupingFields", "valueFields", "countField", "threshold"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField, int threshold ) { super( name, pipes, groupingFields, valueFields, new CountPartials( countField.applyTypes( Long.TYPE ) ), new Sum( countField.applyTypes( Long.TYPE ) ), threshold ); } @ConstructorProperties({"pipe", "groupingFields", "valueFields", "countField", "include"}) public CountBy( Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField, Include include ) { this( null, pipe, groupingFields, valueFields, countField, include ); } @ConstructorProperties({"pipe", "groupingFields", "valueFields", "countField", "include", "threshold"}) public CountBy( Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField, Include include, int threshold ) { this( null, pipe, groupingFields, valueFields, countField, include, threshold ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueFields", "countField", "include"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField, Include include ) { this( name, pipe, groupingFields, valueFields, countField, include, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipe", "groupingFields", "valueFields", "countField", "include", "threshold"}) public CountBy( String name, Pipe pipe, Fields groupingFields, Fields valueFields, Fields countField, Include include, int threshold ) { this( name, Pipe.pipes( pipe ), groupingFields, valueFields, countField, include, threshold ); } @ConstructorProperties({"pipes", "groupingFields", "valueFields", "countField", "include"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField, Include include ) { this( null, pipes, groupingFields, valueFields, countField, include, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"pipes", "groupingFields", "valueFields", "countField", "include", "threshold"}) public CountBy( Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField, Include include, int threshold ) { this( null, pipes, groupingFields, valueFields, countField, include, threshold ); } @ConstructorProperties({"name", "pipes", "groupingFields", "valueFields", "countField", "include"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField, Include include ) { this( name, pipes, groupingFields, valueFields, countField, include, USE_DEFAULT_THRESHOLD ); } @ConstructorProperties({"name", "pipes", "groupingFields", "valueFields", "countField", "include", "threshold"}) public CountBy( String name, Pipe[] pipes, Fields groupingFields, Fields valueFields, Fields countField, Include include, int threshold ) { super( name, pipes, groupingFields, valueFields, new CountPartials( countField.applyTypes( Long.TYPE ), include ), new Sum( countField.applyTypes( Long.TYPE ) ), threshold ); } }