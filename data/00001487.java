public class CascadeConnector { private Map<Object, Object> properties; public CascadeConnector() { } @ConstructorProperties({"properties"}) public CascadeConnector( Map<Object, Object> properties ) { this.properties = properties; } public Cascade connect( Collection<Flow> flows ) { return connect( null, flows.toArray( new Flow[ flows.size() ] ) ); } public Cascade connect( String name, Collection<Flow> flows ) { return connect( name, flows.toArray( new Flow[ flows.size() ] ) ); } public Cascade connect( Flow... flows ) { return connect( null, flows ); } public Cascade connect( String name, Flow... flows ) { name = name == null ? makeName( flows ) : name; CascadeDef cascadeDef = cascadeDef() .setName( name ) .addFlows( flows ); return connect( cascadeDef ); } public Cascade connect( CascadeDef cascadeDef ) { IdentifierGraph identifierGraph = new IdentifierGraph( cascadeDef.getFlowsArray() ); FlowGraph flowGraph = new FlowGraph( identifierGraph ); return new BaseCascade( cascadeDef, properties, flowGraph, identifierGraph ); } private String makeName( Flow[] flows ) { String[] names = new String[ flows.length ]; for( int i = 0; i < flows.length; i++ ) names[ i ] = flows[ i ].getName(); return Util.join( names, "+" ); } }