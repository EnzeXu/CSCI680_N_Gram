public class PathScopeExpression extends ScopeExpression { public static final PathScopeExpression BLOCKING = new PathScopeExpression ( Mode . Blocking ) ; public static final PathScopeExpression NON_BLOCKING = new PathScopeExpression ( Mode . NonBlocking ) ; public static final PathScopeExpression ALL_BLOCKING = new PathScopeExpression ( Applies . All , Mode . Blocking ) ; public static final PathScopeExpression ALL_NON_BLOCKING = new PathScopeExpression ( Applies . All , Mode . NonBlocking ) ; public static final PathScopeExpression ANY_BLOCKING = new PathScopeExpression ( Applies . Any , Mode . Blocking ) ; public static final PathScopeExpression ANY_NON_BLOCKING = new PathScopeExpression ( Applies . Any , Mode . NonBlocking ) ; public static final PathScopeExpression ALL_BLOCKING_NO_CAPTURE = new PathScopeExpression ( false , Applies . All , Mode . Blocking ) ; public static final PathScopeExpression ALL_NON_BLOCKING_NO_CAPTURE = new PathScopeExpression ( false , Applies . All , Mode . NonBlocking ) ; public enum Mode { Ignore , Blocking , NonBlocking } private Mode mode = Mode . Ignore ; public PathScopeExpression ( ) { } public PathScopeExpression ( Applies applies ) { this . applies = applies ; } public PathScopeExpression ( boolean capture , Applies applies ) { super ( capture , applies ) ; } public PathScopeExpression ( Mode mode ) { this . mode = mode ; } public PathScopeExpression ( Applies applies , Mode mode ) { super ( applies ) ; this . mode = mode ; } public PathScopeExpression ( boolean capture , Applies applies , Mode mode ) { super ( capture , applies ) ; this . mode = mode ; } @ Override public boolean acceptsAll ( ) { return appliesToAllPaths ( ) && isIgnoreMode ( ) ; } public boolean isIgnoreMode ( ) { return mode == Mode . Ignore ; } public Mode getMode ( ) { return mode ; } @ Override public boolean applies ( PlannerContext plannerContext , ElementGraph elementGraph , Scope scope ) { switch ( mode ) { case Ignore : return true ; case Blocking : return !scope . isNonBlocking ( ) ; case NonBlocking : return scope . isNonBlocking ( ) ; default : throw new IllegalStateException ( "should never reach here" ) ; } } @ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( "PathScopeExpression { " ) ; sb . append ( "capture=" ) . append ( capture ) ; sb . append ( " , applies=" ) . append ( applies ) ; sb . append ( " , mode=" ) . append ( mode ) ; sb . append ( ' } ' ) ; return sb . toString ( ) ; } }