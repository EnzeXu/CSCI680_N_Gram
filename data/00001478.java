public class CoerceBench { public enum Canonical { String , Short , Short_TYPE , Integer , Integer_TYPE , Long , Long_TYPE , Float , Float_TYPE , Double , Double_TYPE } @ Param Canonical from = Canonical . String ; Type [ ] canonicalTypes = new Type [ ] { String . class , Short . class , Short . TYPE , Integer . class , Integer . TYPE , Long . class , Long . TYPE , Float . class , Float . TYPE , Double . class , Double . TYPE } ; Object [ ] canonicalValues = new Object [ ] { "1000" , 1000 , 1000 , 1000 , 1000 , 1000L , 1000L , 1000 . 000F , 1000 . 000F , 1000 . 000D , 1000 . 000D } ; @ Param ( { "0" , "1" , "2" , "3" , "4" , "5" , "6" , "7" , "8" , "9" , "10" } ) int to = 0 ; Class [ ] toTypes = new Class [ ] { String . class , Short . class , Short . TYPE , Integer . class , Integer . TYPE , Long . class , Long . TYPE , Float . class , Float . TYPE , Double . class , Double . TYPE } ; CoercibleType coercibleType ; Object canonicalValue ; CoercionFrom coercion ; Class toType ; @ Setup public void setup ( ) { coercibleType = Coercions . coercibleTypeFor ( canonicalTypes [ from . ordinal ( ) ] ) ; canonicalValue = canonicalValues [ from . ordinal ( ) ] ; toType = toTypes [ to ] ; coercion = coercibleType . to ( toType ) ; } @ Benchmark public void baseline ( Blackhole bh ) { bh . consume ( coercibleType . coerce ( canonicalValue , toType ) ) ; } @ Benchmark public void coercionFrom ( Blackhole bh ) { bh . consume ( coercibleType . to ( toType ) . coerce ( canonicalValue ) ) ; } @ Benchmark public void coercionFromFixed ( Blackhole bh ) { bh . consume ( coercion . coerce ( canonicalValue ) ) ; } }