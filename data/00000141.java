public class MemcachedClientFactoryBean implements FactoryBean , InitializingBean , DisposableBean { private final ConnectionFactoryBuilder connectionFactoryBuilder = new ConnectionFactoryBuilder ( ) ; private String servers ; private long shutdownTimeoutSeconds = 0 ; private MemcachedClient client ; @ Override public Object getObject ( ) throws Exception { return client ; } @ Override public Class < ? > getObjectType ( ) { return MemcachedClient . class ; } @ Override public boolean isSingleton ( ) { return true ; } @ Override public void afterPropertiesSet ( ) throws Exception { client = new MemcachedClient ( connectionFactoryBuilder . build ( ) , AddrUtil . getAddresses ( servers ) ) ; } @ Override public void destroy ( ) throws Exception { if ( shutdownTimeoutSeconds > 0 ) { client . shutdown ( shutdownTimeoutSeconds , TimeUnit . SECONDS ) ; } else { client . shutdown ( ) ; } } public void setServers ( final String newServers ) { this . servers = newServers ; } public void setAuthDescriptor ( final AuthDescriptor to ) { connectionFactoryBuilder . setAuthDescriptor ( to ) ; } public void setDaemon ( final boolean d ) { connectionFactoryBuilder . setDaemon ( d ) ; } public void setFailureMode ( final FailureMode fm ) { connectionFactoryBuilder . setFailureMode ( fm ) ; } public void setHashAlg ( final HashAlgorithm to ) { connectionFactoryBuilder . setHashAlg ( to ) ; } public void setInitialObservers ( final Collection < ConnectionObserver > obs ) { connectionFactoryBuilder . setInitialObservers ( obs ) ; } public void setLocatorType ( final Locator l ) { connectionFactoryBuilder . setLocatorType ( l ) ; } public void setMaxReconnectDelay ( final long to ) { connectionFactoryBuilder . setMaxReconnectDelay ( to ) ; } public void setOpFact ( final OperationFactory f ) { connectionFactoryBuilder . setOpFact ( f ) ; } public void setOpQueueFactory ( final OperationQueueFactory q ) { connectionFactoryBuilder . setOpQueueFactory ( q ) ; } public void setOpQueueMaxBlockTime ( final long t ) { connectionFactoryBuilder . setOpQueueMaxBlockTime ( t ) ; } public void setOpTimeout ( final long t ) { connectionFactoryBuilder . setOpTimeout ( t ) ; } public void setProtocol ( final Protocol prot ) { connectionFactoryBuilder . setProtocol ( prot ) ; } public void setReadBufferSize ( final int to ) { connectionFactoryBuilder . setReadBufferSize ( to ) ; } public void setReadOpQueueFactory ( final OperationQueueFactory q ) { connectionFactoryBuilder . setReadOpQueueFactory ( q ) ; } public void setShouldOptimize ( final boolean o ) { connectionFactoryBuilder . setShouldOptimize ( o ) ; } public void setTimeoutExceptionThreshold ( final int to ) { connectionFactoryBuilder . setTimeoutExceptionThreshold ( to ) ; } public void setTranscoder ( final Transcoder < Object > t ) { connectionFactoryBuilder . setTranscoder ( t ) ; } public void setUseNagleAlgorithm ( final boolean to ) { connectionFactoryBuilder . setUseNagleAlgorithm ( to ) ; } public void setWriteOpQueueFactory ( final OperationQueueFactory q ) { connectionFactoryBuilder . setWriteOpQueueFactory ( q ) ; } public void setShutdownTimeoutSeconds ( long shutdownTimeoutSeconds ) { this . shutdownTimeoutSeconds = shutdownTimeoutSeconds ; } }