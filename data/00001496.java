public class NestedGetAllFunction < Node , Result > extends NestedGetFunction < Node , Result > { protected NestedPointer < Node , Result > rootPointer ; public NestedGetAllFunction ( NestedCoercibleType < Node , Result > nestedCoercibleType , String stringRootPointer , Fields fieldDeclaration , boolean failOnMissingNode , String . . . stringPointers ) { super ( nestedCoercibleType , fieldDeclaration , failOnMissingNode , stringPointers ) ; NestedPointerCompiler < Node , Result > compiler = getNestedPointerCompiler ( ) ; this . rootPointer = compiler . nested ( stringRootPointer ) ; } @ Override public void operate ( FlowProcess flowProcess , FunctionCall < Tuple > functionCall ) { Tuple resultTuple = functionCall . getContext ( ) ; Node argument = ( Node ) functionCall . getArguments ( ) . getObject ( 0 , getCoercibleType ( ) ) ; Result result = rootPointer . allAt ( argument ) ; if ( failOnMissingNode && getNestedPointerCompiler ( ) . size ( result ) == 0 ) throw new OperationException ( "nodes missing from json node tree : " + rootPointer ) ; Iterable < Node > iterable = getNestedPointerCompiler ( ) . iterable ( result ) ; for ( Node node : iterable ) { extractResult ( resultTuple , node ) ; functionCall . getOutputCollector ( ) . add ( resultTuple ) ; } } }