public class CanonicalBench { @Param({"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17"}) int from = 0; Object[] fromValues = new Object[]{ JsonNodeFactory.instance.textNode( "1000" ), JsonNodeFactory.instance.numberNode( 1000 ), JSONCoercibleType.TYPE.canonical( "{ \"name\":\"John\", \"age\":50, \"car\":null }" ), null, "1000", "{ \"sale\":true }", "{\n\"person\":{ \"name\":\"John\", \"age\":50, \"city\":\"Houston\" }\n}", "[ \"Ford\", \"BMW\", \"Fiat\" ]", (short) 1000, (short) 1000, 1000, 1000, 1000L, 1000L, 1000.000F, 1000.000F, 1000.000D, 1000.000D }; Class[] fromTypes = new Class[]{ JsonNode.class, JsonNode.class, JsonNode.class, String.class, String.class, String.class, String.class, String.class, Short.class, Short.TYPE, Integer.class, Integer.TYPE, Long.class, Long.TYPE, Float.class, Float.TYPE, Double.class, Double.TYPE }; CoercibleType coercibleType = JSONCoercibleType.TYPE; ToCanonical canonical; Object fromValue; Class fromType; @Setup public void setup() { fromType = fromTypes[ from ]; canonical = coercibleType.from( fromType ); fromValue = fromValues[ from ]; } @Benchmark public void baseline( Blackhole bh ) { bh.consume( coercibleType.canonical( fromValue ) ); } @Benchmark public void toCanonical( Blackhole bh ) { bh.consume( coercibleType.from( fromType ).canonical( fromValue ) ); } @Benchmark public void toCanonicalFixed( Blackhole bh ) { bh.consume( canonical.canonical( fromValue ) ); } }