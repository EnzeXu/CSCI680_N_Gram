public class HadoopMemoryJoinGate extends MemoryHashJoinGate { private static final Logger LOG = LoggerFactory . getLogger ( HadoopMemoryJoinGate . class ) ; public enum Spill { Num_Spills_Written , Num_Spills_Read , Num_Tuples_Spilled , Duration_Millis_Written } private class SpillListener implements Spillable . SpillListener { private final FlowProcess < ? extends Configuration > flowProcess ; public SpillListener ( FlowProcess < ? extends Configuration > flowProcess ) { this . flowProcess = flowProcess ; } @ Override public void notifyWriteSpillBegin ( Spillable spillable , int spillSize , String spillReason ) { int numFiles = spillable . spillCount ( ) ; if ( numFiles % 10 == 0 ) { LOG . info ( "spilling grouping : { } , num times : { } , with reason : { } " , new Object [ ] { spillable . getGrouping ( ) . print ( ) , numFiles + 1 , spillReason } ) ; Runtime runtime = Runtime . getRuntime ( ) ; long freeMem = runtime . freeMemory ( ) / 1024 / 1024 ; long maxMem = runtime . maxMemory ( ) / 1024 / 1024 ; long totalMem = runtime . totalMemory ( ) / 1024 / 1024 ; LOG . info ( "mem on spill ( mb ) , free : " + freeMem + " , total : " + totalMem + " , max : " + maxMem ) ; } LOG . info ( "spilling { } tuples in list to file number { } " , spillSize , numFiles + 1 ) ; flowProcess . increment ( Spill . Num_Spills_Written , 1 ) ; flowProcess . increment ( Spill . Num_Tuples_Spilled , spillSize ) ; } @ Override public void notifyWriteSpillEnd ( SpillableTupleList spillableTupleList , long duration ) { flowProcess . increment ( Spill . Duration_Millis_Written , duration ) ; } @ Override public void notifyReadSpillBegin ( Spillable spillable ) { flowProcess . increment ( Spill . Num_Spills_Read , 1 ) ; } } private final SpillListener spillListener ; private TupleMapFactory < Configuration > tupleMapFactory ; public HadoopMemoryJoinGate ( FlowProcess < ? extends Configuration > flowProcess , HashJoin join ) { super ( flowProcess , join ) ; this . spillListener = new SpillListener ( flowProcess ) ; FactoryLoader loader = FactoryLoader . getInstance ( ) ; this . tupleMapFactory = loader . loadFactoryFrom ( flowProcess , TUPLE_MAP_FACTORY , HadoopTupleMapFactory . class ) ; } @ Override protected Set < Tuple > createKeySet ( ) { return new HashSet < Tuple > ( ) ; } @ Override protected Map < Tuple , Collection < Tuple > > createTupleMap ( ) { Map < Tuple , Collection < Tuple > > map = tupleMapFactory . create ( flowProcess ) ; if ( map instanceof Spillable ) ( ( Spillable ) map ) . setSpillListener ( spillListener ) ; return map ; } @ Override protected void waitOnLatch ( ) { } @ Override protected void countDownLatch ( ) { } }